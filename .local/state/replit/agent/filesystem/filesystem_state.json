{"file_contents":{"README.md":{"content":"# Coolors.in\n\nA next-generation color palette generator built with modern web technologies, designed to streamline color selection for designers and developers with advanced exploration and export tools.\n\n## Features\n\n- 🎨 Advanced color palette generator\n- 🔒 Color locking for selective generation\n- 📊 Comprehensive color theory system\n- 🖼️ Image-to-palette extraction\n- 👁️ Visualizer with UI templates\n- 📱 Fully responsive design\n- 🚀 Server-side rendering for SEO\n\n## Tech Stack\n\n- React.js with TypeScript\n- Vite build tool\n- Context API for state management\n- Tailwind CSS and shadcn/ui for styling\n- Next.js for SSR/SSG pages\n- Drizzle ORM for database interactions\n\n## Development\n\n### Prerequisites\n\n- Node.js (v18+)\n- npm or yarn\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Create a `.env.local` file based on `.env.local.example`\n4. Start the development server:\n   ```bash\n   npm run dev\n   ```\n\n### Running in Development Mode\n\n- For the React (Vite) app only:\n  ```bash\n  npm run dev\n  ```\n\n- For Next.js development:\n  ```bash\n  ./start-next-dev.sh\n  ```\n\n- For both apps simultaneously:\n  ```bash\n  ./start-all.sh\n  ```\n\n## Deployment to Vercel\n\nThis project is configured for deployment on Vercel.\n\n### Automatic Deployment\n\n1. Push your code to GitHub\n2. Connect the repository to Vercel\n3. Vercel will automatically detect the configuration and deploy\n\n### Manual Deployment\n\n1. Install the Vercel CLI:\n   ```bash\n   npm i -g vercel\n   ```\n\n2. Login to Vercel:\n   ```bash\n   vercel login\n   ```\n\n3. Deploy to Vercel:\n   ```bash\n   vercel\n   ```\n\n### Environment Variables\n\nConfigure the following environment variables in Vercel dashboard:\n\n- `NODE_ENV`: Set to `production`\n- `VITE_BASE_URL`: Your production URL\n- `VITE_GA_ID`: Google Analytics ID\n- `SESSION_SECRET`: A secure random string for session encryption\n\n## Project Structure\n\n- `/client`: React app (Vite)\n- `/pages`: Next.js pages\n- `/components`: Shared components\n- `/shared`: Shared types and utilities\n- `/server`: Express server for database operations\n\n## Migration Status\n\nThe application is currently being migrated from React/Vite to Next.js. See `NEXT_MIGRATION.md` for details on the migration progress.\n\n## License\n\nMIT","size_bytes":2289},"client-dev.js":{"content":"import { createServer } from 'vite';\n\nasync function startDevServer() {\n  const server = await createServer({\n    configFile: './vite.config.ts',\n    root: './client',\n    server: {\n      port: 5000,\n      host: '0.0.0.0'\n    }\n  });\n\n  await server.listen();\n  server.printUrls();\n}\n\nstartDevServer().catch(err => {\n  console.error('Error starting dev server:', err);\n  process.exit(1);\n});","size_bytes":391},"replit.md":{"content":"# Coolors.in Color Palette Generator\n\n## Overview\n\nCoolors.in is a next-generation color palette generator built with modern web technologies. The application is currently undergoing a migration from a client-side React application to a server-rendered Next.js application to improve SEO, performance, and user experience. The project provides advanced color exploration tools, palette generation with color theory support, image-to-palette extraction, and visualization templates for designers and developers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Hybrid Architecture Pattern\nThe application currently operates in a hybrid state during the Next.js migration, with both the original React (Vite) client and new Next.js pages coexisting:\n\n- **Client Directory**: Contains the original React application built with Vite\n- **Pages Directory**: Houses Next.js server-rendered pages and API routes\n- **Shared Directory**: Common types and utilities used across both architectures\n\n### Frontend Architecture\nThe frontend uses a component-based architecture with multiple rendering strategies:\n\n- **Client-Side Rendering**: Original React app using Vite for development and bundling\n- **Server-Side Rendering**: Next.js pages for improved SEO and initial load performance\n- **State Management**: React Context API for palette state management across the application\n- **UI Framework**: Tailwind CSS with shadcn/ui components for consistent design\n- **Color Processing**: Custom utilities for color manipulation, theory calculations, and accessibility\n\n### Build and Deployment Strategy\nThe project employs a multi-environment build system:\n\n- **Development**: Vite dev server for fast hot reloading during development\n- **Production**: Vercel-optimized builds with specific configuration for deployment\n- **Static Assets**: Optimized images and fonts with proper caching headers\n\n### Color Generation Engine\nCore functionality built around sophisticated color algorithms:\n\n- **Random Generation**: Algorithmic color palette creation\n- **Color Theory Support**: Complementary, analogous, triadic, and other harmony rules\n- **Image Extraction**: Server-side color extraction from uploaded images using Canvas API\n- **Lock/Unlock System**: Individual color preservation during regeneration\n\n### API Architecture\nNext.js API routes provide server-side functionality:\n\n- **Color Extraction API**: Processes images and returns dominant color palettes\n- **OpenGraph Image Generation**: Dynamic social media preview images\n- **Palette Sharing**: URL-based palette sharing and preview functionality\n\n## External Dependencies\n\n### Core Technologies\n- **React 18**: Component library with TypeScript support\n- **Next.js**: Full-stack React framework for SSR/SSG\n- **Vite**: Development build tool for the client application\n- **Tailwind CSS**: Utility-first CSS framework\n\n### Database and ORM\n- **Drizzle ORM**: Type-safe database operations\n- **PostgreSQL**: Database for user accounts and saved palettes (via Neon serverless)\n- **Database Schema**: User management and palette storage with relationships\n\n### UI and Styling\n- **shadcn/ui**: React component library built on Radix UI primitives\n- **Radix UI**: Headless UI components for accessibility\n- **Lucide React**: Icon library for consistent iconography\n- **html2canvas**: Client-side screenshot generation for palette exports\n\n### Authentication and Session Management\n- **Custom Auth System**: Built with secure session handling\n- **PostgreSQL Sessions**: Server-side session storage using connect-pg-simple\n\n### Development and Build Tools\n- **TypeScript**: Static type checking across the entire codebase\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer\n\n### External Services\n- **Vercel**: Deployment platform with edge functions and CDN\n- **Google Analytics**: User behavior tracking and analytics\n- **Google AdSense**: Advertisement integration with performance optimization\n- **Node Canvas**: Server-side image processing for color extraction and OpenGraph generation\n\n### Performance and SEO\n- **Next.js Image Optimization**: Automatic image optimization and lazy loading\n- **Structured Data**: JSON-LD schema for search engine understanding\n- **Web Fonts**: Optimized font loading with preconnect hints\n- **Service Worker**: Caching strategy for improved performance (planned)","size_bytes":4459},"server-static.js":{"content":"// Simple Express server for static files\nimport express from 'express';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Serve static files from the client/dist directory\napp.use(express.static(path.join(__dirname, 'client', 'dist')));\n\n// For any request that doesn't match a static file, serve the index.html\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'client', 'dist', 'index.html'));\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","size_bytes":669},"start-all.sh":{"content":"#!/bin/bash\n\n# Determine if we should run in dual mode\nDUAL_MODE=true\nNEXT_PORT=3000\nVITE_PORT=5000\n\nif [ \"$1\" == \"--next-only\" ]; then\n  DUAL_MODE=false\nfi\n\nif [ \"$1\" == \"--help\" ]; then\n  echo \"Usage: ./start-all.sh [options]\"\n  echo \"\"\n  echo \"Options:\"\n  echo \"  --next-only    Run only the Next.js server\"\n  echo \"  --help         Show this help message\"\n  exit 0\nfi\n\n# Function to kill background processes on script exit\ncleanup() {\n  echo \"Cleaning up...\"\n  if [ ! -z \"$NEXT_PID\" ]; then\n    kill $NEXT_PID 2>/dev/null\n  fi\n  if [ ! -z \"$VITE_PID\" ]; then\n    kill $VITE_PID 2>/dev/null\n  fi\n  exit 0\n}\n\n# Register the cleanup function for these signals\ntrap cleanup EXIT INT TERM\n\n# Start Next.js development server\necho \"Starting Next.js development server on port $NEXT_PORT...\"\nnpx next dev -p $NEXT_PORT &\nNEXT_PID=$!\n\n# Start Vite development server if in dual mode\nif [ \"$DUAL_MODE\" = true ]; then\n  echo \"Starting Vite development server on port $VITE_PORT...\"\n  npm run dev &\n  VITE_PID=$!\n  \n  echo \"\"\n  echo \"=== Development servers running ===\"\n  echo \"Next.js: http://localhost:$NEXT_PORT\"\n  echo \"Vite:    http://localhost:$VITE_PORT\"\n  echo \"==============================\"\n  echo \"Press Ctrl+C to stop both servers\"\nelse\n  echo \"\"\n  echo \"=== Development servers running ===\"\n  echo \"Next.js: http://localhost:$NEXT_PORT\"\n  echo \"==============================\"\n  echo \"Press Ctrl+C to stop the server\"\nfi\n\n# Keep script running until Ctrl+C\nwait","size_bytes":1470},"start-client.sh":{"content":"#!/bin/bash\ncd client && npx vite --port 5000 --host","size_bytes":52},"start-next-dev.sh":{"content":"#!/bin/bash\n\necho \"Starting Next.js development server...\"\nnpx next dev -p 3000","size_bytes":79},"start-next.js":{"content":"#!/usr/bin/env node\n\nconst { spawn } = require('child_process');\nconst path = require('path');\n\nconsole.log('Starting Next.js development server...');\n\n// Run next dev command\nconst nextProcess = spawn('npx', ['next', 'dev'], {\n  stdio: 'inherit',\n  shell: true,\n  env: { ...process.env }\n});\n\nnextProcess.on('error', (error) => {\n  console.error(`Error starting Next.js server: ${error.message}`);\n  process.exit(1);\n});\n\nnextProcess.on('close', (code) => {\n  if (code !== 0) {\n    console.error(`Next.js server exited with code ${code}`);\n    process.exit(code);\n  }\n});","size_bytes":572},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    screens: {\n      'xs': '480px',\n      'sm': '640px',\n      'md': '768px',\n      'lg': '1024px',\n      'xl': '1280px',\n      '2xl': '1536px',\n    },\n    extend: {\n      fontSize: {\n        'xxs': '0.625rem', // 10px\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3001},"vercel-deployment-checklist.md":{"content":"# Vercel Deployment Checklist for Coolors.in\n\nUse this checklist to ensure your application is ready for deployment to Vercel.\n\n## Configuration Files\n\n- [x] `vercel.json` - Contains proper configuration for Vercel deployment\n- [x] `.env.production` - Contains production environment variables\n- [x] `.env.local.example` - Example file for local development\n- [x] `.gitignore` - Updated with Vercel-specific entries\n\n## Optimizations\n\n- [x] Security headers added to `vercel.json`\n- [x] Optimized build configuration in `vite.config.vercel.mjs`\n- [x] Manual chunk splitting for improved loading performance\n- [x] Font preloading and preconnection directives\n- [x] Asset caching through proper Cache-Control headers\n\n## SEO Improvements\n\n- [x] Proper viewport meta tags\n- [x] Updated robots.txt with proper directives\n- [x] Sitemap.xml with current dates\n- [x] Structured data for rich search results\n- [x] Enhanced meta tags in `_document.tsx`\n\n## Performance Enhancements\n\n- [x] Terser minification for production builds\n- [x] Console log removal in production\n- [x] Critical CSS inlined\n- [x] Preloaded critical assets\n- [x] Proper font loading strategy\n\n## Browser Compatibility\n\n- [x] Polyfills for older browsers\n- [x] Fallback content for users without JavaScript\n- [x] Cross-browser meta tags\n\n## Analytics and Monitoring\n\n- [x] Google Analytics setup with Next.js Script component\n- [x] AdSense integration\n\n## Documentation\n\n- [x] README.md with deployment instructions\n- [x] VERCEL_DEPLOYMENT.md with detailed instructions\n- [x] deploy-vercel.sh script for easy deployment\n\n## Pre-Deployment Verification\n\nBefore deploying to Vercel, run through these manual checks:\n\n- [ ] Run `npm run build` to verify the build succeeds locally\n- [ ] Check that all internal links are correct and use relative paths\n- [ ] Verify that the application runs correctly in production mode\n- [ ] Test responsive design across different devices\n- [ ] Ensure all API endpoints work correctly\n- [ ] Verify that environment variables are properly accessed\n\n## After Deployment\n\nOnce deployed to Vercel, complete these tasks:\n\n- [ ] Test the deployed application thoroughly\n- [ ] Verify that analytics is working correctly\n- [ ] Check all pages render correctly on different devices\n- [ ] Verify that the sitemap is accessible\n- [ ] Run performance tests using Lighthouse or PageSpeed Insights\n- [ ] Check Search Console for any indexing issues","size_bytes":2429},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":978},"attached_assets/content-1745139299313.md":{"content":"Generate PaletteAdd ColorResetExport PNGExport JSON\n\n### \\#7A4ED9\n\nCopy\n\n### \\#ED584E\n\nCopy\n\n### \\#51CED9\n\nCopy\n\n### \\#F7DB58\n\nCopy\n\n### \\#5AE881\n\nCopy\n\n## Trending Palettes\n\n### Summer Sunset\n\n### Ocean Breeze\n\n### Forest Vibes\n\n### Retro Wave\n\n### Pastel Dream\n\nPress spacebar to generate a new palette \\| Click on the lock icon to keep a color","size_bytes":346},"attached_assets/content-1745143418547.md":{"content":"Generate PaletteAdd ColorResetExport PNGExport JSON\n\n### \\#7A4ED9\n\nCopy\n\n### \\#ED584E\n\nCopy\n\n### \\#51CED9\n\nCopy\n\n### \\#F7DB58\n\nCopy\n\n### \\#5AE881\n\nCopy\n\n## Trending Palettes\n\n### Summer Sunset\n\n### Ocean Breeze\n\n### Forest Vibes\n\n### Retro Wave\n\n### Pastel Dream\n\nPress spacebar to generate a new palette \\| Click on the lock icon to keep a color\n\n[iframe](https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-5617109574785382&output=html&adk=1812271804&adf=3025194257&abgtt=6&lmt=1745025471&plat=3%3A16%2C4%3A16%2C9%3A32768%2C16%3A8388608%2C17%3A32%2C24%3A32%2C25%3A32%2C30%3A1081344%2C32%3A32%2C41%3A32%2C42%3A32&format=0x0&url=https%3A%2F%2Fwww.coolors.in%2F&pra=5&wgl=1&aihb=0&asro=0&aifxl=29_18~30_19&aiapm=0.15&aiapmi=0.33938&aiact=0.7&ailct=0.7&uach=WyJMaW51eCB4ODZfNjQiLCI2LjYuNzIiLCJ4ODYiLCIiLCIxMzUuMC43MDQ5Ljk1IixudWxsLDAsbnVsbCwiNjQiLFtbIkdvb2dsZSBDaHJvbWUiLCIxMzUuMC43MDQ5Ljk1Il0sWyJOb3QtQS5CcmFuZCIsIjguMC4wLjAiXSxbIkNocm9taXVtIiwiMTM1LjAuNzA0OS45NSJdXSwwXQ..&dt=1745143430056&bpp=11&bdt=297&idt=193&shv=r20250417&mjsv=m202504160101&ptt=9&saldr=aa&abxe=1&cookie_enabled=1&eoidce=1&nras=1&correlator=787216332109&frm=20&pv=2&u_tz=-540&u_his=2&u_h=1024&u_w=1280&u_ah=1024&u_aw=1280&u_cd=24&u_sd=1&dmc=8&adx=-12245933&ady=-12245933&biw=1920&bih=100000&scr_x=0&scr_y=0&eid=95357427%2C95355972%2C95355974%2C42532523%2C95357461%2C31091860%2C95357877%2C95356661%2C95357715&oid=2&pvsid=5820615961291178&tmod=1874557719&uas=0&nvt=1&fsapi=1&fc=1920&brdim=40%2C40%2C40%2C40%2C1280%2C0%2C1920%2C1080%2C1920%2C100000&vis=1&rsz=%7C%7Cs%7C&abl=NS&fu=32768&bc=31&bz=1&td=1&tdf=2&psd=W251bGwsbnVsbCxudWxsLDNd&nt=1&ifi=1&uci=a!1&fsb=1&dtd=213)\n\n[iframe](https://googleads.g.doubleclick.net/pagead/html/r20250417/r20190131/zrt_lookup_fy2021.html)","size_bytes":1749},"client/build-vercel.js":{"content":"// ESM-compatible build script for Vercel deployment\nimport { execSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the directory name properly in ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ntry {\n  console.log('Setting up Vercel-specific build files...');\n  \n  // Ensure we're using the Vercel-specific files\n  // Copy main.vercel.tsx to main.tsx\n  fs.copyFileSync(\n    path.resolve(__dirname, './src/main.vercel.tsx'),\n    path.resolve(__dirname, './src/main.tsx')\n  );\n  \n  // Copy index.vercel.css to index.css\n  fs.copyFileSync(\n    path.resolve(__dirname, './src/index.vercel.css'),\n    path.resolve(__dirname, './src/index.css')\n  );\n  \n  console.log('Files copied successfully');\n  \n  // Run the build with the Vercel config\n  console.log('Running Vite build with Vercel config...');\n  execSync('npx vite build --config vite.config.vercel.mjs', { \n    stdio: 'inherit',\n    cwd: __dirname\n  });\n  \n  console.log('Build completed successfully!');\n} catch (error) {\n  console.error('Error during build process:', error);\n  process.exit(1);\n}","size_bytes":1173},"client/build.sh":{"content":"#!/bin/bash\n\n# Simple build script for Vercel deployment\necho \"Starting Vercel build process...\"\necho \"Current directory: $(pwd)\"\necho \"Listing source directory:\"\nls -la ./src/\n\n# Copy Vercel-specific files\necho \"Copying Vercel-specific files...\"\nif [ -f \"./src/main.vercel.tsx\" ]; then\n    cp ./src/main.vercel.tsx ./src/main.tsx\n    echo \"main.vercel.tsx copied to main.tsx\"\nelse\n    echo \"WARNING: ./src/main.vercel.tsx not found\"\n    ls -la ./src/main*\nfi\n\nif [ -f \"./src/index.vercel.css\" ]; then\n    cp ./src/index.vercel.css ./src/index.css\n    echo \"index.vercel.css copied to index.css\"\nelse\n    echo \"WARNING: ./src/index.vercel.css not found\"\n    ls -la ./src/index*\nfi\n\n# Check config file\necho \"Checking for config file...\"\nif [ -f \"./vite.config.vercel.mjs\" ]; then\n    echo \"Using vite.config.vercel.mjs\"\n    CONFIG=\"vite.config.vercel.mjs\"\nelse\n    echo \"vite.config.vercel.mjs not found, using default config\"\n    CONFIG=\"vite.config.js\"\nfi\n\n# Ensure terser is installed\necho \"Checking for terser...\"\nif ! npm list terser --depth=0 > /dev/null 2>&1; then\n    echo \"terser not found, installing...\"\n    npm install --no-save terser\nfi\n\n# Run Vite build with config\necho \"Running Vite build with config: $CONFIG\"\necho \"Node version: $(node --version)\"\necho \"NPM version: $(npm --version)\"\nNODE_OPTIONS=\"--no-warnings\" npx vite build --config $CONFIG\n\nif [ $? -eq 0 ]; then\n    echo \"Build completed successfully!\"\n    echo \"Content of dist directory:\"\n    ls -la ./dist/\nelse\n    echo \"Build failed with error code: $?\"\n    exit 1\nfi","size_bytes":1548},"client/dev-server.js":{"content":"import { createServer } from 'vite';\n\nasync function startDevServer() {\n  const server = await createServer({\n    // The server will use the Vite config from the root directory\n    configFile: '../vite.config.ts',\n    root: './client',\n    server: {\n      port: 5000,\n      host: '0.0.0.0',\n    },\n  });\n\n  await server.listen();\n  \n  server.printUrls();\n  \n  // Handle SIGINT (Ctrl+C) to gracefully shut down the server\n  process.on('SIGINT', () => {\n    server.close().then(() => {\n      console.log('Vite dev server closed');\n      process.exit();\n    });\n  });\n}\n\nstartDevServer();","size_bytes":585},"client/preinstall.js":{"content":"// This script ensures terser is installed before the build starts\nconst { execSync } = require('child_process');\n\nconsole.log('Checking if terser is installed...');\n\ntry {\n  // Try to require terser\n  require.resolve('terser');\n  console.log('terser is already installed.');\n} catch (e) {\n  // If terser is not installed, install it\n  console.log('terser is not installed. Installing...');\n  execSync('npm install --no-save terser', { stdio: 'inherit' });\n  console.log('terser installed successfully.');\n}","size_bytes":507},"client/tailwind.config.vercel.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./index.html\", \"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    screens: {\n      'xs': '480px',\n      'sm': '640px',\n      'md': '768px',\n      'lg': '1024px',\n      'xl': '1280px',\n      '2xl': '1536px',\n    },\n    extend: {\n      fontSize: {\n        'xxs': '0.625rem', // 10px\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n}","size_bytes":2968},"client/vercel-build.js":{"content":"#!/usr/bin/env node\n\n// A simpler build script for Vercel\nconst fs = require('fs');\nconst path = require('path');\nconst { execSync } = require('child_process');\n\nconsole.log('Starting Vercel build process...');\n\ntry {\n  // Ensure source directory exists\n  const srcDir = path.join(__dirname, 'src');\n  if (!fs.existsSync(srcDir)) {\n    console.error(`Source directory not found: ${srcDir}`);\n    process.exit(1);\n  }\n\n  // File paths\n  const mainVercelPath = path.join(srcDir, 'main.vercel.tsx');\n  const mainPath = path.join(srcDir, 'main.tsx');\n  const cssVercelPath = path.join(srcDir, 'index.vercel.css');\n  const cssPath = path.join(srcDir, 'index.css');\n\n  // Check if source files exist\n  if (!fs.existsSync(mainVercelPath)) {\n    console.error(`Vercel main file not found: ${mainVercelPath}`);\n    process.exit(1);\n  }\n  \n  if (!fs.existsSync(cssVercelPath)) {\n    console.error(`Vercel CSS file not found: ${cssVercelPath}`);\n    process.exit(1);\n  }\n\n  // Copy files\n  console.log('Copying Vercel-specific files...');\n  fs.copyFileSync(mainVercelPath, mainPath);\n  fs.copyFileSync(cssVercelPath, cssPath);\n  console.log('Files copied successfully');\n\n  // Config file\n  const configFile = path.join(__dirname, 'vite.config.vercel.mjs');\n  if (!fs.existsSync(configFile)) {\n    console.error(`Vercel config file not found: ${configFile}`);\n    process.exit(1);\n  }\n\n  // Run build\n  console.log('Running Vite build with Vercel config...');\n  execSync(`npx vite build --config ${configFile}`, {\n    stdio: 'inherit',\n    cwd: __dirname\n  });\n  \n  console.log('Build completed successfully!');\n} catch (error) {\n  console.error('Error during build process:', error);\n  process.exit(1);\n}","size_bytes":1694},"client/vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport themePlugin from '@replit/vite-plugin-shadcn-theme-json';\nimport path from 'path';\nimport runtimeErrorOverlay from '@replit/vite-plugin-runtime-error-modal';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n  },\n  server: {\n    port: 5000,\n    host: '0.0.0.0',\n    hmr: {\n      clientPort: 443\n    },\n    strictPort: true,\n    allowedHosts: [\n      'localhost',\n      '0.0.0.0',\n      '172.31.128.17',\n      'a7c2b0e9-c4bd-4912-9db6-d8e76a014543-00-1m0y5conrqvbj.riker.replit.dev',\n      '.replit.dev',\n      '.repl.co'\n    ],\n  },\n});","size_bytes":756},"client/vite.config.replit.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\n// This is a simplified Vite config for Replit that avoids ESM-only plugins\nexport default defineConfig({\n  plugins: [\n    react(),\n    // Removed problematic ESM-only plugins: \n    // - runtimeErrorOverlay\n    // - themePlugin\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n  },\n  server: {\n    port: 5000,\n    host: '0.0.0.0',\n    hmr: {\n      clientPort: 443\n    },\n    strictPort: true,\n    allowedHosts: [\n      'localhost',\n      '0.0.0.0',\n      '172.31.128.17',\n      'a7c2b0e9-c4bd-4912-9db6-d8e76a014543-00-1m0y5conrqvbj.riker.replit.dev',\n      '.replit.dev',\n      '.repl.co'\n    ],\n  },\n});","size_bytes":742},"scripts/optimize-images.js":{"content":"// Image optimization script for better SEO and performance\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { execSync } = require('child_process');\n\n// Configuration\nconst PUBLIC_DIR = path.join(__dirname, '../public');\nconst IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp'];\nconst QUALITY = 85;\n\nasync function optimizeImages() {\n  console.log('Starting image optimization...');\n  \n  try {\n    // Check if sharp is installed\n    try {\n      require.resolve('sharp');\n      console.log('Sharp is installed. Proceeding with optimization...');\n    } catch (e) {\n      console.log('Installing sharp package for image optimization...');\n      execSync('npm install sharp --no-save');\n    }\n    \n    // Recursively find all image files\n    const imageFiles = await findImageFiles(PUBLIC_DIR);\n    console.log(`Found ${imageFiles.length} images to optimize.`);\n    \n    if (imageFiles.length === 0) {\n      console.log('No images found to optimize.');\n      return;\n    }\n    \n    // Import sharp after ensuring it's installed\n    const sharp = require('sharp');\n    \n    // Process each image\n    for (const file of imageFiles) {\n      const ext = path.extname(file).toLowerCase();\n      const webpOutput = file.replace(ext, '.webp');\n      \n      // Skip already optimized files\n      if (ext === '.webp' && await fileExists(file.replace('.webp', '.webp.original'))) {\n        console.log(`Skipping already optimized: ${path.basename(file)}`);\n        continue;\n      }\n      \n      // Backup original if not already backed up\n      const originalBackup = `${file}.original`;\n      if (!(await fileExists(originalBackup))) {\n        await fs.copyFile(file, originalBackup);\n      }\n      \n      // Optimize the original format\n      await sharp(file)\n        .resize(2048, null, { withoutEnlargement: true })\n        .jpeg({ quality: QUALITY, progressive: true })\n        .png({ compressionLevel: 9, progressive: true })\n        .toFile(`${file}.temp`);\n        \n      await fs.rename(`${file}.temp`, file);\n      \n      // Create WebP version (better compression, modern browsers)\n      await sharp(originalBackup)\n        .resize(2048, null, { withoutEnlargement: true })\n        .webp({ quality: QUALITY })\n        .toFile(webpOutput);\n      \n      console.log(`Optimized: ${path.basename(file)} (and created WebP version)`);\n    }\n    \n    console.log('Image optimization complete!');\n  } catch (error) {\n    console.error('Error during image optimization:', error);\n  }\n}\n\nasync function findImageFiles(dir, allFiles = []) {\n  const files = await fs.readdir(dir);\n  \n  for (const file of files) {\n    const filePath = path.join(dir, file);\n    const stat = await fs.stat(filePath);\n    \n    if (stat.isDirectory()) {\n      await findImageFiles(filePath, allFiles);\n    } else {\n      const ext = path.extname(file).toLowerCase();\n      if (IMAGE_EXTENSIONS.includes(ext)) {\n        allFiles.push(filePath);\n      }\n    }\n  }\n  \n  return allFiles;\n}\n\nasync function fileExists(filePath) {\n  try {\n    await fs.access(filePath);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// Run the optimizer\noptimizeImages().catch(console.error);","size_bytes":3170},"server/paypal.ts":{"content":"import {\n  Client,\n  Environment,\n  LogLevel,\n  OAuthAuthorizationController,\n  OrdersController,\n} from \"@paypal/paypal-server-sdk\";\nimport { Request, Response } from \"express\";\n\n/* PayPal Controllers Setup */\n\nconst { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET } = process.env;\n\nif (!PAYPAL_CLIENT_ID) {\n  throw new Error(\"Missing PAYPAL_CLIENT_ID\");\n}\nif (!PAYPAL_CLIENT_SECRET) {\n  throw new Error(\"Missing PAYPAL_CLIENT_SECRET\");\n}\n\nconst client = new Client({\n  clientCredentialsAuthCredentials: {\n    oAuthClientId: PAYPAL_CLIENT_ID,\n    oAuthClientSecret: PAYPAL_CLIENT_SECRET,\n  },\n  timeout: 0,\n  environment:\n    process.env.NODE_ENV === \"production\"\n      ? Environment.Production\n      : Environment.Sandbox,\n  logging: {\n    logLevel: LogLevel.Info,\n    logRequest: {\n      logBody: true,\n    },\n    logResponse: {\n      logHeaders: true,\n    },\n  },\n});\n\nconst ordersController = new OrdersController(client);\nconst oAuthAuthorizationController = new OAuthAuthorizationController(client);\n\n/* Token generation helpers */\n\nexport async function getClientToken() {\n  const auth = Buffer.from(\n    `${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`,\n  ).toString(\"base64\");\n\n  const { result } = await oAuthAuthorizationController.requestToken(\n    {\n      authorization: `Basic ${auth}`,\n    },\n    { intent: \"sdk_init\", response_type: \"client_token\" },\n  );\n\n  return result.accessToken;\n}\n\n/* Subscription Plans */\nexport const SUBSCRIPTION_PLANS = {\n  USD: {\n    planId: \"P-5ML4271244454362WXNWU5NQ\", // PayPal plan ID for $1 USD\n    price: \"1.00\",\n    currency: \"USD\"\n  },\n  INR: {\n    planId: \"P-1GF589577P007863KXNWU5NQ\", // PayPal plan ID for ₹100 INR\n    price: \"100.00\", \n    currency: \"INR\"\n  }\n};\n\n/* Subscription management using Orders API for recurring payments */\n\nexport async function createSubscription(req: Request, res: Response) {\n  try {\n    const { country = \"US\" } = req.body;\n    const plan = country === \"IN\" ? SUBSCRIPTION_PLANS.INR : SUBSCRIPTION_PLANS.USD;\n\n    const orderRequest = {\n      body: {\n        intent: \"CAPTURE\",\n        purchase_units: [\n          {\n            amount: {\n              currency_code: plan.currency,\n              value: plan.price\n            },\n            description: `Coolors.in Premium Subscription - Monthly (${plan.currency})`\n          }\n        ],\n        application_context: {\n          brand_name: \"Coolors.in\",\n          locale: \"en-US\",\n          shipping_preference: \"NO_SHIPPING\",\n          user_action: \"PAY_NOW\",\n          return_url: `${req.protocol}://${req.get('host')}/subscription/success`,\n          cancel_url: `${req.protocol}://${req.get('host')}/subscription/cancel`\n        }\n      },\n      prefer: \"return=representation\"\n    };\n\n    const { body, ...httpResponse } = await ordersController.createOrder(orderRequest);\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to create subscription order:\", error);\n    res.status(500).json({ error: \"Failed to create subscription order.\" });\n  }\n}\n\nexport async function captureSubscription(req: Request, res: Response) {\n  try {\n    const { orderId } = req.params;\n\n    const captureRequest = {\n      id: orderId,\n      prefer: \"return=representation\"\n    };\n\n    const { body, ...httpResponse } = await ordersController.captureOrder(captureRequest);\n    const jsonResponse = JSON.parse(String(body));\n    const httpStatusCode = httpResponse.statusCode;\n\n    res.status(httpStatusCode).json(jsonResponse);\n  } catch (error) {\n    console.error(\"Failed to capture subscription order:\", error);\n    res.status(500).json({ error: \"Failed to capture subscription order.\" });\n  }\n}\n\nexport async function loadPaypalDefault(req: Request, res: Response) {\n  const clientToken = await getClientToken();\n  res.json({\n    clientToken,\n  });\n}","size_bytes":3923},"styles/globals.css":{"content":"/* Import existing styles from client/src/index.css */\n@import '../client/src/index.css';\n\n/* Additional global styles for Next.js */\n:root {\n  /* Define CSS variables for reuse across the app */\n  --toastify-color-light: #fff;\n  --toastify-color-dark: #121212;\n  --toastify-color-info: #3498db;\n  --toastify-color-success: #07bc0c;\n  --toastify-color-warning: #f1c40f;\n  --toastify-color-error: #e74c3c;\n}\n\n/* Optimize for Core Web Vitals */\n/* Prevent Cumulative Layout Shift (CLS) */\nimg, picture, video, canvas, svg {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n\n/* Prevent ad-related layout shifts */\n.ad-container {\n  min-height: 90px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n}\n\n.ad-container::before {\n  content: \"Advertisement\";\n  position: absolute;\n  top: -20px;\n  left: 0;\n  font-size: 10px;\n  color: #888;\n}\n\n/* Performance improvements */\n/* Enable smooth scrolling but only if user doesn't prefer reduced motion */\n@media (prefers-reduced-motion: no-preference) {\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n/* Improved focus states for accessibility */\n*:focus-visible {\n  outline: 2px solid #4c8bf5;\n  outline-offset: 2px;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none;\n  }\n  \n  body {\n    background-color: white !important;\n    color: black !important;\n  }\n}\n\n/* Loading indicator for SSR hydration */\n#__next-prerender-indicator {\n  display: none;\n}\n\n/* Hide lazyload placeholders once loaded */\n.lazyloaded {\n  opacity: 1 !important;\n  transition: opacity 0.3s ease-in;\n}","size_bytes":1575},"utils/schemaGenerator.ts":{"content":"/**\n * Utility functions for generating structured data (JSON-LD) for SEO\n * This helps search engines better understand the content of each page\n */\n\n// Website/WebApplication schema for the entire site\nexport const generateWebsiteSchema = () => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebSite',\n    'url': 'https://coolors.in',\n    'name': 'Coolors.in',\n    'description': 'The super fast color palette generator for designers and developers.',\n    'potentialAction': [\n      {\n        '@type': 'SearchAction',\n        'target': 'https://coolors.in/search?q={search_term_string}',\n        'query-input': 'required name=search_term_string'\n      }\n    ]\n  };\n};\n\n// WebApplication schema for the application itself\nexport const generateWebAppSchema = () => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebApplication',\n    'name': 'Coolors.in Color Palette Generator',\n    'url': 'https://coolors.in/',\n    'applicationCategory': 'DesignApplication',\n    'operatingSystem': 'All',\n    'offers': {\n      '@type': 'Offer',\n      'price': '0',\n      'priceCurrency': 'USD'\n    },\n    'description': 'Create beautiful color combinations with the Coolors.in color palette generator.',\n    'creator': {\n      '@type': 'Organization',\n      'name': 'Coolors.in'\n    }\n  };\n};\n\n// Organization schema for the site owner\nexport const generateOrganizationSchema = () => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Organization',\n    'name': 'Coolors.in',\n    'url': 'https://coolors.in',\n    'logo': 'https://coolors.in/logo.png',\n    'contactPoint': {\n      '@type': 'ContactPoint',\n      'email': 'coolors.in@gmail.com',\n      'contactType': 'customer service'\n    }\n  };\n};\n\n// BreadcrumbList schema for navigation paths\nexport const generateBreadcrumbSchema = (items: Array<{name: string, url: string}>) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    'itemListElement': items.map((item, index) => ({\n      '@type': 'ListItem',\n      'position': index + 1,\n      'name': item.name,\n      'item': `https://coolors.in${item.url}`\n    }))\n  };\n};\n\n// FAQPage schema for FAQ pages\nexport const generateFAQSchema = (faqs: Array<{question: string, answer: string}>) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    'mainEntity': faqs.map(faq => ({\n      '@type': 'Question',\n      'name': faq.question,\n      'acceptedAnswer': {\n        '@type': 'Answer',\n        'text': faq.answer\n      }\n    }))\n  };\n};\n\n// Article schema for blog-like content (e.g., Designer's Guide)\nexport const generateArticleSchema = (article: {\n  title: string;\n  description: string;\n  image?: string;\n  datePublished: string;\n  dateModified?: string;\n  authorName: string;\n}) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    'headline': article.title,\n    'description': article.description,\n    'image': article.image || 'https://coolors.in/og-default.jpg',\n    'datePublished': article.datePublished,\n    'dateModified': article.dateModified || article.datePublished,\n    'author': {\n      '@type': 'Person',\n      'name': article.authorName\n    },\n    'publisher': {\n      '@type': 'Organization',\n      'name': 'Coolors.in',\n      'logo': {\n        '@type': 'ImageObject',\n        'url': 'https://coolors.in/logo.png'\n      }\n    }\n  };\n};\n\n// CreativeWork schema for color palettes\nexport const generateColorPaletteSchema = (palette: {\n  id: string;\n  name: string;\n  colors: string[];\n  description?: string;\n  dateCreated: string;\n}) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'CreativeWork',\n    'name': palette.name || 'Color Palette',\n    'description': palette.description || `A color palette featuring ${palette.colors.join(', ')}`,\n    'identifier': palette.id,\n    'dateCreated': palette.dateCreated,\n    'creator': {\n      '@type': 'Organization',\n      'name': 'Coolors.in'\n    },\n    'keywords': ['color palette', 'color scheme', 'design', ...palette.colors]\n  };\n};","size_bytes":4048},"utils/structuredData.ts":{"content":"/**\n * Utility functions for generating JSON-LD structured data for SEO\n */\n\n// Basic WebApplication structured data\nexport const generateWebAppSchema = (additionalData = {}) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'WebApplication',\n    'name': 'Coolors.in Color Palette Generator',\n    'url': 'https://coolors.in/',\n    'description': 'Create beautiful color combinations with our intuitive color generator',\n    'applicationCategory': 'DesignApplication',\n    'operatingSystem': 'Any',\n    'offers': {\n      '@type': 'Offer',\n      'price': '0',\n      'priceCurrency': 'USD'\n    },\n    'featureList': 'Generate color palettes, Save palettes, Export in multiple formats, Visualize palettes in UI templates',\n    ...additionalData\n  };\n};\n\n// FAQ page structured data\nexport const generateFAQSchema = (faqs: Array<{ question: string; answer: string }>) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'FAQPage',\n    'mainEntity': faqs.map(faq => ({\n      '@type': 'Question',\n      'name': faq.question,\n      'acceptedAnswer': {\n        '@type': 'Answer',\n        'text': faq.answer\n      }\n    }))\n  };\n};\n\n// Breadcrumbs structured data\nexport const generateBreadcrumbSchema = (items: Array<{ name: string; url: string }>) => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    'itemListElement': items.map((item, index) => ({\n      '@type': 'ListItem',\n      'position': index + 1,\n      'name': item.name,\n      'item': `https://coolors.in${item.url}`\n    }))\n  };\n};\n\n// Color palette schema\nexport const generateColorPaletteSchema = (colors: Array<{ hex: string; name?: string }>, paletteName: string = 'Color Palette') => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'CreativeWork',\n    'name': paletteName,\n    'author': {\n      '@type': 'Organization',\n      'name': 'Coolors.in'\n    },\n    'description': `A color palette featuring ${colors.map(c => c.name || c.hex).join(', ')}`,\n    'keywords': 'color palette, color scheme, design, ' + colors.map(c => c.name || c.hex).join(', ')\n  };\n};\n\n// Article structured data for blog/guides\nexport const generateArticleSchema = (title: string, description: string, author: string, datePublished: string, imageUrl: string = '/og-default.jpg') => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'Article',\n    'headline': title,\n    'description': description,\n    'image': `https://coolors.in${imageUrl}`,\n    'datePublished': datePublished,\n    'author': {\n      '@type': 'Person',\n      'name': author\n    },\n    'publisher': {\n      '@type': 'Organization',\n      'name': 'Coolors.in',\n      'logo': {\n        '@type': 'ImageObject',\n        'url': 'https://coolors.in/logo.svg'\n      }\n    }\n  };\n};\n\n// Contact page structured data\nexport const generateContactPageSchema = () => {\n  return {\n    '@context': 'https://schema.org',\n    '@type': 'ContactPage',\n    'name': 'Contact Coolors.in',\n    'description': 'Get in touch with Yash, the creator of Coolors.in color palette generator',\n    'url': 'https://coolors.in/contact',\n    'mainEntity': {\n      '@type': 'Person',\n      'name': 'Yash',\n      'email': 'rajyash73@gmail.com',\n      'jobTitle': 'Creator of Coolors.in',\n      'url': 'https://coolors.in',\n      'worksFor': {\n        '@type': 'Organization',\n        'name': 'Coolors.in'\n      }\n    },\n    'potentialAction': {\n      '@type': 'CommunicateAction',\n      'target': {\n        '@type': 'EntryPoint',\n        'urlTemplate': 'mailto:rajyash73@gmail.com',\n        'inLanguage': 'en-US'\n      }\n    }\n  };\n};","size_bytes":3597},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/Home\";\nimport LandingPage from \"@/pages/LandingPage\";\nimport ClothingPalettePage from \"@/pages/ClothingPalettePage\";\nimport ClothingColorGuide from \"@/pages/ClothingColorGuide\";\nimport VisualizerGuide from \"@/pages/VisualizerGuide\";\nimport ImagePaletteGuide from \"@/pages/ImagePaletteGuide\";\nimport ImagePalette from \"@/pages/image-palette\";\nimport PaletteVisualizer from \"@/pages/palette-visualizer\";\nimport PaletteVisualizerNew from \"@/pages/palette-visualizer-new\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport FAQPage from \"@/pages/faq\";\nimport DesignersGuide from \"@/pages/designers-guide\";\nimport { useEffect } from \"react\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { PaletteProvider } from \"./contexts/PaletteContext\";\nimport TestApp from \"./TestApp\";\nimport { HelmetProvider } from 'react-helmet-async';\n\n// Components that use the PaletteContext\nconst PaletteRoutes = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <Route path=\"/generator\" component={TestApp} />\n      <Route path=\"/clothing-palette\" component={ClothingPalettePage} />\n      <Route path=\"/image-palette\" component={ImagePalette} />\n      <Route path=\"/visualize\" component={PaletteVisualizerNew} />\n      <Route path=\"/visualize-old\" component={PaletteVisualizer} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/faq\" component={FAQPage} />\n      <Route path=\"/designers-guide\" component={DesignersGuide} />\n      <Route path=\"/clothing-color-guide\" component={ClothingColorGuide} />\n      <Route path=\"/visualizer-guide\" component={VisualizerGuide} />\n      <Route path=\"/image-palette-guide\" component={ImagePaletteGuide} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n};\n\nfunction Router() {\n  return <PaletteRoutes />;\n}\n\nfunction App() {\n  useEffect(() => {\n    // Initialize keyboard shortcut listener\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.code === \"Space\" && \n          document.activeElement?.tagName !== \"INPUT\" && \n          document.activeElement?.tagName !== \"TEXTAREA\") {\n        e.preventDefault();\n      }\n    };\n    \n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, []);\n\n  return (\n    <HelmetProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <PaletteProvider>\n            <Router />\n            <Toaster />\n          </PaletteProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2874},"client/src/ContextTest.tsx":{"content":"import React from 'react';\nimport { usePalette, PaletteProvider } from './contexts/PaletteContext';\n\nfunction TestConsumer() {\n  const paletteContext = usePalette();\n  \n  return (\n    <div>\n      <h2>Palette Context Test</h2>\n      <p>Palette Size: {paletteContext.palette.length}</p>\n      <button onClick={paletteContext.generatePalette}>Generate Palette</button>\n    </div>\n  );\n}\n\nexport default function ContextTest() {\n  return (\n    <PaletteProvider>\n      <TestConsumer />\n    </PaletteProvider>\n  );\n}","size_bytes":510},"client/src/TestApp.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Color } from './types/Color';\nimport { isLightColor } from '@/lib/colorUtils';\nimport { \n  LockIcon, UnlockIcon, RefreshCw, Copy, Download, Plus, Trash, Info, Sliders, \n  GripVertical, Image as ImageIcon, Eye, BookOpen, Keyboard, Move, Lock, ChevronLeft \n} from 'lucide-react';\nimport html2canvas from 'html2canvas';\nimport ColorAdjustmentModal from '@/components/ColorAdjustmentModal';\nimport TrendingPalettes from '@/components/TrendingPalettes';\nimport WelcomeModal from '@/components/modals/WelcomeModal';\nimport Footer from '@/components/Footer';\nimport { usePalette, colorTheoryOptions, ColorTheory } from '@/contexts/PaletteContext';\nimport { Link } from 'wouter';\n\n// Toast notification component\nfunction Toast({ message, onClose }: { message: string; onClose: () => void }) {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onClose();\n    }, 3000);\n    \n    return () => clearTimeout(timer);\n  }, [onClose]);\n  \n  return (\n    <div className=\"fixed bottom-4 right-4 bg-white text-gray-800 px-4 py-3 rounded-xl shadow-xl border border-gray-200 flex items-center gap-3 animate-in fade-in slide-in-from-bottom-8 duration-300 z-50 max-w-md\">\n      <div className=\"p-2 rounded-full bg-blue-100 text-blue-600\">\n        <Info size={18} />\n      </div>\n      <div className=\"flex-1\">\n        <p className=\"font-medium\">{message}</p>\n      </div>\n      <button \n        onClick={onClose}\n        className=\"p-1 hover:bg-gray-100 rounded-full text-gray-500 hover:text-gray-700 transition-colors\"\n      >\n        <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M1 1L13 13M1 13L13 1\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n        </svg>\n      </button>\n    </div>\n  );\n}\n\n// Main component that uses the context\nfunction PaletteApp() {\n  const { \n    palette, \n    colorTheory,\n    setColorTheory,\n    generatePalette, \n    generatePaletteWithTheory,\n    toggleLock, \n    addColor, \n    removeColor, \n    resetPalette,\n    updateColor,\n    setPalette: setPaletteColors,\n    reorderColors\n  } = usePalette();\n  \n  const [toast, setToast] = useState<string | null>(null);\n  const [showInfoTooltip, setShowInfoTooltip] = useState<number | null>(null);\n  const [showAdjustModal, setShowAdjustModal] = useState<boolean>(false);\n  const [activeColorIndex, setActiveColorIndex] = useState<number | null>(null);\n  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);\n  const paletteRef = useRef<HTMLDivElement>(null);\n  \n  // Handle spacebar for generating new palette\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.code === \"Space\" && \n          document.activeElement?.tagName !== \"INPUT\" && \n          document.activeElement?.tagName !== \"TEXTAREA\" &&\n          !showAdjustModal) {\n        e.preventDefault();\n        generatePalette();\n      }\n    };\n    \n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [generatePalette, showAdjustModal]);\n  \n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text)\n      .then(() => {\n        setToast(`Copied ${text} to clipboard`);\n      })\n      .catch(err => {\n        console.error('Could not copy text: ', err);\n      });\n  };\n  \n  const exportPalette = async () => {\n    if (paletteRef.current) {\n      try {\n        const canvas = await html2canvas(paletteRef.current);\n        const image = canvas.toDataURL(\"image/png\");\n        const link = document.createElement(\"a\");\n        link.href = image;\n        link.download = \"palette.png\";\n        link.click();\n      } catch (err) {\n        console.error(\"Error exporting palette:\", err);\n        setToast(\"Failed to export palette\");\n      }\n    }\n  };\n  \n  const exportPaletteAsJSON = () => {\n    const data = JSON.stringify(palette.map(color => color.hex));\n    const blob = new Blob([data], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"palette.json\";\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n  \n  const handleAdjustColor = (index: number) => {\n    setActiveColorIndex(index);\n    setShowAdjustModal(true);\n  };\n  \n  const handleApplyColorAdjustment = (color: Color) => {\n    if (activeColorIndex !== null) {\n      updateColor(activeColorIndex, color);\n      setShowAdjustModal(false);\n      setActiveColorIndex(null);\n    }\n  };\n  \n  const handleTrendingPaletteSelect = (colors: Color[]) => {\n    setPaletteColors(colors);\n    setToast(\"Trending palette applied!\");\n  };\n  \n  const handleVisualize = () => {\n    // Save current palette to localStorage for the visualizer to use\n    console.log('Saving palette to localStorage before visualization:', palette);\n    localStorage.setItem('currentPalette', JSON.stringify(palette));\n    \n    // Navigate to visualizer page\n    window.location.href = '/visualize';\n  };\n  \n  // Drag and drop handlers\n  const handleDragStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n  \n  const handleDragOver = (e: React.DragEvent, index: number) => {\n    e.preventDefault();\n    if (draggedIndex === null || draggedIndex === index) return;\n  };\n  \n  const handleDrop = (e: React.DragEvent, targetIndex: number) => {\n    e.preventDefault();\n    if (draggedIndex === null || draggedIndex === targetIndex) return;\n    \n    reorderColors(draggedIndex, targetIndex);\n    setDraggedIndex(null);\n    setToast(\"Color order updated\");\n  };\n  \n  const handleDragEnd = () => {\n    setDraggedIndex(null);\n  };\n  \n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      {/* Hero Section */}\n      <header className=\"relative mb-8 sm:mb-12 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-6 sm:p-8 overflow-hidden shadow-sm\">\n        {/* Decorative Elements */}\n        <div className=\"absolute top-0 left-0 w-full h-full overflow-hidden opacity-10\">\n          <div className=\"absolute -top-10 -left-10 w-40 h-40 bg-blue-500 rounded-full\"></div>\n          <div className=\"absolute top-20 -right-10 w-60 h-60 bg-purple-500 rounded-full\"></div>\n          <div className=\"absolute -bottom-20 left-40 w-80 h-80 bg-indigo-500 rounded-full\"></div>\n        </div>\n        \n        <div className=\"relative\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl sm:text-4xl font-extrabold text-gray-800 bg-gradient-to-r from-purple-600 via-blue-500 to-indigo-600 bg-clip-text text-transparent\">\n                Palette Generator\n              </h1>\n              <p className=\"mt-2 text-sm sm:text-base text-gray-600 max-w-xl\">\n                Create beautiful, harmonious color combinations with the power of color theory. Design like a pro in seconds.\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-3\">\n              <div\n                className=\"px-4 py-2 text-sm font-medium text-gray-600 bg-white hover:bg-gray-50 border border-gray-200 rounded-full shadow-sm transition-colors flex items-center gap-1.5 cursor-pointer\"\n                onClick={() => window.location.href = '/'}\n              >\n                <ChevronLeft size={16} />\n                <span>Back to Home</span>\n              </div>\n              \n              <div\n                className=\"px-4 py-2 text-sm font-medium text-blue-600 bg-white hover:bg-blue-50 border border-blue-200 rounded-full shadow-sm transition-colors flex items-center gap-1.5 cursor-pointer\"\n                onClick={() => window.location.href = '/designers-guide'}\n              >\n                <Eye size={16} />\n                <span>Designer's Guide</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white p-4 sm:p-5 rounded-xl shadow-md border border-gray-100 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <div className=\"flex items-center gap-2 flex-wrap\">\n              <div className=\"flex items-center px-3 py-1.5 bg-gray-100 rounded-full text-sm text-gray-700\">\n                <RefreshCw size={14} className=\"mr-1.5 text-gray-500\" />\n                <span>Press <kbd className=\"px-1.5 py-0.5 bg-white rounded text-xs font-semibold border border-gray-200 shadow-sm\">spacebar</kbd> to generate</span>\n              </div>\n              \n              <div className=\"flex items-center px-3 py-1.5 bg-gray-100 rounded-full text-sm text-gray-700\">\n                <LockIcon size={14} className=\"mr-1.5 text-gray-500\" />\n                <span>Click lock to keep a color</span>\n              </div>\n              \n              <div className=\"flex items-center px-3 py-1.5 bg-gray-100 rounded-full text-sm text-gray-700\">\n                <GripVertical size={14} className=\"mr-1.5 text-gray-500\" />\n                <span>Drag to reorder</span>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col bg-blue-50 rounded-lg p-3 border border-blue-100\">\n              <div className=\"flex items-center gap-2\">\n                <label htmlFor=\"color-theory\" className=\"text-sm font-medium text-gray-700 whitespace-nowrap\">Color Theory:</label>\n                <select \n                  id=\"color-theory\"\n                  value={colorTheory}\n                  onChange={(e) => setColorTheory(e.target.value as ColorTheory)}\n                  className=\"text-sm border border-blue-200 rounded-lg px-2 py-1.5 bg-white shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                >\n                  {colorTheoryOptions.map(option => (\n                    <option key={option.value} value={option.value}>\n                      {option.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              {colorTheory !== 'auto' && (\n                <p className=\"text-xs text-blue-700 mt-2 max-w-[220px] sm:max-w-xs\">\n                  {colorTheory === 'monochromatic' ? \"Variations in lightness and saturation of one color\" : \n                   colorTheory === 'analogous' ? \"Colors that sit next to each other on the color wheel\" :\n                   colorTheory === 'complementary' ? \"Opposite colors that create strong contrast\" :\n                   colorTheory === 'split-complementary' ? \"A base color and two adjacent to its complement\" :\n                   colorTheory === 'triadic' ? \"Three colors evenly spaced on the wheel for balance\" :\n                   colorTheory === 'tetradic' ? \"Two complementary pairs for rich diversity\" :\n                   colorTheory === 'neutral' ? \"Desaturated colors for clean aesthetics\" : \n                   \"\"}\n                  \n                  {\" - Select 'Use as Base' on any color\"}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n      \n      <div className=\"bg-white rounded-xl p-4 mb-8 shadow-md border border-gray-100\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-lg font-semibold text-gray-800\">Actions</h2>\n          <div className=\"flex gap-2\">\n            <button \n              onClick={resetPalette}\n              className=\"p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors\"\n              title=\"Reset palette\"\n            >\n              <RefreshCw size={18} />\n            </button>\n          </div>\n        </div>\n      \n        <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-7 gap-3 sm:gap-4\">\n          <button \n            className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 sm:px-6 py-3 rounded-xl shadow-lg hover:shadow-xl hover:from-blue-600 hover:to-indigo-700 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium\"\n            onClick={generatePalette}\n          >\n            <RefreshCw size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>Generate</span>\n          </button>\n          \n          <button \n            className=\"bg-white text-gray-700 border border-gray-200 px-4 sm:px-6 py-3 rounded-xl shadow hover:shadow-md hover:bg-gray-50 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium\"\n            onClick={addColor}\n            disabled={palette.length >= 10}\n          >\n            <Plus size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>Add Color</span>\n          </button>\n          \n          <div\n            className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 sm:px-6 py-3 rounded-xl shadow hover:shadow-md hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium cursor-pointer\"\n            onClick={() => window.location.href = '/image-palette'}\n          >\n            <ImageIcon size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>From Image</span>\n          </div>\n          \n          <div\n            className=\"bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-4 sm:px-6 py-3 rounded-xl shadow hover:shadow-md hover:from-emerald-600 hover:to-teal-600 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium cursor-pointer\"\n            onClick={handleVisualize}\n          >\n            <Eye size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>Visualize</span>\n          </div>\n          \n          <button \n            className=\"bg-white text-gray-700 border border-gray-200 px-4 sm:px-6 py-3 rounded-xl shadow hover:shadow-md hover:bg-gray-50 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium\"\n            onClick={exportPalette}\n          >\n            <Download size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>Export PNG</span>\n          </button>\n          \n          <button \n            className=\"bg-white text-gray-700 border border-gray-200 px-4 sm:px-6 py-3 rounded-xl shadow hover:shadow-md hover:bg-gray-50 transition-all flex items-center justify-center gap-1.5 sm:gap-2 text-sm sm:text-base font-medium\"\n            onClick={exportPaletteAsJSON}\n          >\n            <Download size={18} className=\"sm:w-5 sm:h-5\" />\n            <span>Export JSON</span>\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"flex-1\">\n        <div \n          ref={paletteRef} \n          className=\"flex flex-col md:flex-row h-auto md:h-[500px] rounded-2xl overflow-hidden shadow-2xl border border-gray-200\"\n        >\n          {palette.map((color, index) => {\n            const textColor = isLightColor(color.hex) ? 'text-gray-800' : 'text-white';\n            return (\n              <div \n                key={index}\n                className={`flex-1 relative transition-all group ${draggedIndex === index ? 'opacity-50' : ''} min-h-[200px] md:min-h-0`}\n                style={{ backgroundColor: color.hex }}\n                draggable={true}\n                onDragStart={() => handleDragStart(index)}\n                onDragOver={(e) => handleDragOver(e, index)}\n                onDrop={(e) => handleDrop(e, index)}\n                onDragEnd={handleDragEnd}\n              >\n                <div className={`absolute inset-0 flex flex-col items-center justify-center p-2 sm:p-4 ${textColor}`}>\n                  <div className=\"absolute top-2 sm:top-3 left-2 sm:left-3\">\n                    <div \n                      className=\"p-1.5 sm:p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all cursor-move\"\n                      title=\"Drag to reorder\"\n                    >\n                      <GripVertical size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                    </div>\n                  </div>\n                  \n                  {/* Mobile-friendly action buttons */}\n                  <div className=\"absolute top-2 sm:top-3 right-2 sm:right-3 flex space-x-1 sm:space-x-2\">\n                    <button \n                      className=\"p-1.5 sm:p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all\"\n                      onClick={() => toggleLock(index)}\n                      title={color.locked ? \"Unlock color\" : \"Lock color\"}\n                    >\n                      {color.locked ? \n                        <LockIcon size={16} className=\"sm:w-[18px] sm:h-[18px]\" /> : \n                        <UnlockIcon size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                      }\n                    </button>\n                    \n                    <button \n                      className=\"p-1.5 sm:p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all hidden sm:block\"\n                      onClick={() => handleAdjustColor(index)}\n                      title=\"Adjust color\"\n                    >\n                      <Sliders size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                    </button>\n                    \n                    <button \n                      className=\"p-1.5 sm:p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all\"\n                      onClick={() => removeColor(index)}\n                      disabled={palette.length <= 2}\n                      title=\"Remove color\"\n                    >\n                      <Trash size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                    </button>\n                    \n                    <button \n                      className=\"p-1.5 sm:p-2 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all\"\n                      onClick={() => setShowInfoTooltip(showInfoTooltip === index ? null : index)}\n                      title=\"Color information\"\n                    >\n                      <Info size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                    </button>\n                  </div>\n                  \n                  {/* Mobile-friendly popup for sliders on small screens */}\n                  <button \n                    className=\"absolute bottom-16 right-2 p-1.5 rounded-full bg-white bg-opacity-20 hover:bg-opacity-30 transition-all sm:hidden\"\n                    onClick={() => handleAdjustColor(index)}\n                    title=\"Adjust color\"\n                  >\n                    <Sliders size={16} />\n                  </button>\n                  \n                  {showInfoTooltip === index && (\n                    <div className=\"absolute top-12 sm:top-14 right-2 sm:right-3 bg-white text-gray-800 p-3 rounded-lg shadow-lg z-10 w-[140px] sm:w-48\">\n                      {color.name && (\n                        <p className=\"text-sm font-semibold mb-2\">{color.name}</p>\n                      )}\n                      <div className=\"grid grid-cols-3 gap-1\">\n                        <p className=\"text-xs font-medium\">R: {color.rgb.r}</p>\n                        <p className=\"text-xs font-medium\">G: {color.rgb.g}</p>\n                        <p className=\"text-xs font-medium\">B: {color.rgb.b}</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"mt-auto mb-3 sm:mb-5 text-center w-full px-2\">\n                    <div className=\"mb-2\">\n                      <h3 className=\"text-lg sm:text-2xl font-bold tracking-wide truncate\">{color.hex}</h3>\n                      {color.name && (\n                        <p className=\"text-xs sm:text-sm opacity-90 font-medium mt-0.5 truncate\">{color.name}</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex flex-wrap gap-2 justify-center\">\n                      <button \n                        className=\"px-3 sm:px-4 py-1 sm:py-1.5 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 backdrop-blur-sm transition-all flex items-center justify-center gap-1.5 text-xs sm:text-sm font-medium\"\n                        onClick={() => copyToClipboard(color.hex)}\n                      >\n                        <Copy size={14} className=\"sm:w-4 sm:h-4\" />\n                        <span>Copy</span>\n                      </button>\n                      \n                      {colorTheory !== 'auto' && (\n                        <button \n                          className=\"px-3 sm:px-4 py-1 sm:py-1.5 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 backdrop-blur-sm transition-all flex items-center justify-center gap-1.5 text-xs sm:text-sm font-medium\"\n                          onClick={() => {\n                            generatePaletteWithTheory(color);\n                            setToast(`Generated palette using ${colorTheory} theory with ${color.hex} as base`);\n                          }}\n                        >\n                          <RefreshCw size={14} className=\"sm:w-4 sm:h-4\" />\n                          <span>Use as Base</span>\n                        </button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Trending Palettes Section */}\n      <TrendingPalettes onSelectPalette={handleTrendingPaletteSelect} />\n      \n      <div className=\"mt-10 sm:mt-14 p-6 sm:p-8 bg-white rounded-2xl border border-gray-200 shadow-sm text-center\">\n        <h3 className=\"text-lg sm:text-xl font-bold text-gray-800 mb-4\">Start creating beautiful designs today</h3>\n        <p className=\"text-gray-600 text-sm sm:text-base max-w-2xl mx-auto\">\n          Use our palette generator to create harmonious color combinations for your next project.\n          Experiment with different color theories, save your favorite palettes, and visualize them in real-world designs.\n        </p>\n        <div className=\"mt-6 flex flex-wrap justify-center gap-3\">\n          <div\n            className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-5 py-3 rounded-lg shadow-lg hover:shadow-xl transition-all font-medium cursor-pointer\"\n            onClick={() => window.location.href = '/designers-guide'}\n          >\n            Read the Designer's Guide\n          </div>\n          <div\n            className=\"bg-white text-gray-700 border border-gray-200 px-5 py-3 rounded-lg shadow hover:shadow-md transition-all font-medium cursor-pointer\"\n            onClick={() => window.location.href = '/visualize'}\n          >\n            Try Visualizer\n          </div>\n        </div>\n      </div>\n      \n      {/* Footer */}\n      <Footer className=\"mt-8\" />\n      \n      {/* Modals */}\n      {showAdjustModal && activeColorIndex !== null && (\n        <ColorAdjustmentModal \n          color={palette[activeColorIndex]}\n          onClose={() => setShowAdjustModal(false)}\n          onApply={handleApplyColorAdjustment}\n        />\n      )}\n      \n      {toast && <Toast message={toast} onClose={() => setToast(null)} />}\n    </div>\n  );\n}\n\n// Main component export\nexport default function TestApp() {\n  return (\n    <>\n      <PaletteApp />\n      <WelcomeModal />\n    </>\n  );\n}","size_bytes":23266},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom utilities */\n.ring-color {\n  --tw-ring-color: var(--ring-color);\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.3s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  :root {\n    --primary: 200 94% 40%;\n    --primary-foreground: 0 0% 100%;\n    \n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n    \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n    \n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n    \n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    \n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n    \n    --ring: var(--primary);\n    \n    --radius: 0.5rem;\n  }\n\n  /* Loading Font Awesome via CDN */\n  @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n  \n  /* Adding Inter font */\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n}\n\n@layer components {\n  /* Custom Animation */\n  .animate-bounce-slow {\n    animation: bounce 3s infinite;\n  }\n  \n  @keyframes bounce {\n    0%, 100% {\n      transform: translateY(-5%);\n      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n    }\n    50% {\n      transform: translateY(0);\n      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    }\n  }\n}","size_bytes":1845},"client/src/index.vercel.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom utilities */\n.ring-color {\n  --tw-ring-color: var(--ring-color);\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in-up {\n  animation: fadeInUp 0.3s ease-out;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  :root {\n    --primary: 200 94% 40%;\n    --primary-foreground: 0 0% 100%;\n    \n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n    \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n    \n    --card: 0 0% 100%;\n    --card-foreground: 222.2 47.4% 11.2%;\n    \n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n    \n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n    \n    --ring: var(--primary);\n    \n    --radius: 0.5rem;\n  }\n\n  /* Loading Font Awesome via CDN */\n  @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n  \n  /* Adding Inter font */\n  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n}\n\n@layer components {\n  /* Custom Animation */\n  .animate-bounce-slow {\n    animation: bounce 3s infinite;\n  }\n  \n  @keyframes bounce {\n    0%, 100% {\n      transform: translateY(-5%);\n      animation-timing-function: cubic-bezier(0.8, 0, 1, 1);\n    }\n    50% {\n      transform: translateY(0);\n      animation-timing-function: cubic-bezier(0, 0, 0.2, 1);\n    }\n  }\n}","size_bytes":1845},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport \"./index.vercel.css\"; // Use the Vercel-specific CSS\nimport App from \"./App\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App />\n);","size_bytes":198},"client/src/main.vercel.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport \"./index.vercel.css\"; // Use the Vercel-specific CSS\nimport App from \"./App\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App />\n);","size_bytes":198},"client/src/components/ActionButtons.tsx":{"content":"import React from \"react\";\n\ninterface ActionButtonsProps {\n  onGenerate: () => void;\n  onAddColor: () => void;\n  onClearAll: () => void;\n}\n\nexport default function ActionButtons({ onGenerate, onAddColor, onClearAll }: ActionButtonsProps) {\n  return (\n    <div className=\"p-2 sm:p-3 bg-white shadow-md flex flex-wrap justify-between items-center border-t border-gray-200 gap-2\">\n      <div className=\"flex items-center space-x-2 sm:space-x-3\">\n        <button \n          className=\"flex items-center space-x-1 sm:space-x-2 bg-gray-100 hover:bg-gray-200 text-gray-700 py-1.5 sm:py-2 px-3 sm:px-4 rounded-md transition text-xs sm:text-sm\"\n          onClick={onAddColor}\n          aria-label=\"Add color\"\n        >\n          <i className=\"fas fa-plus text-xs sm:text-sm\"></i>\n          <span className=\"font-medium\">Add Color</span>\n        </button>\n        \n        <button \n          className=\"flex items-center space-x-1 sm:space-x-2 bg-gray-100 hover:bg-gray-200 text-gray-700 py-1.5 sm:py-2 px-3 sm:px-4 rounded-md transition text-xs sm:text-sm\"\n          onClick={onClearAll}\n          aria-label=\"Clear all colors\"\n        >\n          <i className=\"fas fa-trash-alt text-xs sm:text-sm\"></i>\n          <span className=\"font-medium\">Clear All</span>\n        </button>\n      </div>\n      \n      <div className=\"flex items-center\">\n        <button \n          className=\"flex items-center space-x-1 sm:space-x-2 bg-primary hover:bg-blue-500 text-white py-1.5 sm:py-2 px-4 sm:px-5 rounded-md transition-colors group relative animate-bounce-slow\"\n          onClick={onGenerate}\n          aria-label=\"Generate new palette\"\n        >\n          <i className=\"fas fa-dice text-xs sm:text-sm\"></i>\n          <span className=\"text-xs sm:text-sm font-medium\">Generate</span>\n          <span className=\"hidden sm:block absolute -top-10 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded py-1 px-2 opacity-0 group-hover:opacity-100 transition whitespace-nowrap\">\n            Press Space\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2066},"client/src/components/ColorAdjustmentModal.tsx":{"content":"import React, { useState } from 'react';\nimport { X } from 'lucide-react';\nimport { Color } from '../types/Color';\nimport { hexToRgb, rgbToHex, getColorName } from '@/lib/colorUtils';\n\ninterface ColorAdjustmentModalProps {\n  color: Color;\n  onClose: () => void;\n  onApply: (color: Color) => void;\n}\n\nexport default function ColorAdjustmentModal({ color, onClose, onApply }: ColorAdjustmentModalProps) {\n  const [red, setRed] = useState(color.rgb.r);\n  const [green, setGreen] = useState(color.rgb.g);\n  const [blue, setBlue] = useState(color.rgb.b);\n  const [currentHex, setCurrentHex] = useState(color.hex);\n  const [colorName, setColorName] = useState(color.name || getColorName(color.hex));\n  \n  const handleRGBChange = (component: 'r' | 'g' | 'b', value: number) => {\n    const newValue = Math.min(255, Math.max(0, value));\n    \n    if (component === 'r') setRed(newValue);\n    if (component === 'g') setGreen(newValue);\n    if (component === 'b') setBlue(newValue);\n    \n    // Update hex when RGB changes\n    const newHex = rgbToHex(\n      component === 'r' ? newValue : red,\n      component === 'g' ? newValue : green,\n      component === 'b' ? newValue : blue\n    );\n    \n    setCurrentHex(newHex);\n    setColorName(getColorName(newHex));\n  };\n  \n  const handleHexChange = (hex: string) => {\n    // Validate hex format\n    if (/^#[0-9A-F]{6}$/i.test(hex)) {\n      setCurrentHex(hex);\n      \n      // Update RGB values\n      const rgb = hexToRgb(hex);\n      if (rgb) {\n        setRed(rgb.r);\n        setGreen(rgb.g);\n        setBlue(rgb.b);\n        \n        // Update color name\n        setColorName(getColorName(hex));\n      }\n    } else {\n      // Just update the input without changing RGB values\n      setCurrentHex(hex);\n    }\n  };\n  \n  const handleApply = () => {\n    const colorName = getColorName(currentHex);\n    onApply({\n      hex: currentHex,\n      rgb: { r: red, g: green, b: blue },\n      locked: color.locked,\n      name: colorName\n    });\n  };\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg p-4 sm:p-6 max-w-md w-full shadow-xl\">\n        <div className=\"flex justify-between items-center mb-3 sm:mb-4\">\n          <h2 className=\"text-lg sm:text-xl font-bold\">Adjust Color</h2>\n          <button \n            className=\"p-1 rounded-full hover:bg-gray-200 transition-colors\"\n            onClick={onClose}\n            aria-label=\"Close\"\n          >\n            <X size={18} />\n          </button>\n        </div>\n        \n        <div \n          className=\"w-full h-16 sm:h-24 rounded-lg mb-2\"\n          style={{ backgroundColor: currentHex }}\n        ></div>\n        \n        <div className=\"text-center mb-3 sm:mb-4\">\n          <span className=\"text-base sm:text-lg font-medium\">{colorName}</span>\n        </div>\n        \n        <div className=\"mb-4 sm:mb-6\">\n          <label className=\"block text-sm font-medium mb-1\">Hex</label>\n          <input \n            type=\"text\" \n            className=\"w-full px-3 py-1.5 sm:py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm\"\n            value={currentHex}\n            onChange={(e) => handleHexChange(e.target.value)}\n          />\n        </div>\n        \n        <div className=\"space-y-3 sm:space-y-4 mb-4 sm:mb-6\">\n          <div>\n            <div className=\"flex justify-between items-center mb-1\">\n              <label className=\"text-xs sm:text-sm font-medium\">Red</label>\n              <span className=\"text-xs font-mono bg-gray-100 px-1.5 py-0.5 rounded\">{red}</span>\n            </div>\n            <input \n              type=\"range\" \n              min=\"0\" \n              max=\"255\" \n              value={red}\n              onChange={(e) => handleRGBChange('r', parseInt(e.target.value))}\n              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-red-500\"\n            />\n          </div>\n          \n          <div>\n            <div className=\"flex justify-between items-center mb-1\">\n              <label className=\"text-xs sm:text-sm font-medium\">Green</label>\n              <span className=\"text-xs font-mono bg-gray-100 px-1.5 py-0.5 rounded\">{green}</span>\n            </div>\n            <input \n              type=\"range\" \n              min=\"0\" \n              max=\"255\" \n              value={green}\n              onChange={(e) => handleRGBChange('g', parseInt(e.target.value))}\n              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-green-500\"\n            />\n          </div>\n          \n          <div>\n            <div className=\"flex justify-between items-center mb-1\">\n              <label className=\"text-xs sm:text-sm font-medium\">Blue</label>\n              <span className=\"text-xs font-mono bg-gray-100 px-1.5 py-0.5 rounded\">{blue}</span>\n            </div>\n            <input \n              type=\"range\" \n              min=\"0\" \n              max=\"255\" \n              value={blue}\n              onChange={(e) => handleRGBChange('b', parseInt(e.target.value))}\n              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-500\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <button\n            className=\"flex-1 px-3 sm:px-4 py-1.5 sm:py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors text-sm sm:text-base\"\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n          <button\n            className=\"flex-1 px-3 sm:px-4 py-1.5 sm:py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm sm:text-base\"\n            onClick={handleApply}\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5839},"client/src/components/ColorCard.tsx":{"content":"import React from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Color } from \"../types/Color\";\nimport { usePalette } from \"@/contexts/PaletteContext\";\n\ninterface ColorCardProps {\n  color: Color;\n  index: number;\n  onAdjustColor: () => void;\n}\n\nexport default function ColorCard({ color, index, onAdjustColor }: ColorCardProps) {\n  const { toggleLock, removeColor } = usePalette();\n  const { toast } = useToast();\n  \n  // Determine if we need white or black text based on color brightness\n  const textColor = isLightColor(color.hex) ? \"text-black\" : \"text-white\";\n  const buttonBg = isLightColor(color.hex) \n    ? \"bg-white bg-opacity-30 hover:bg-opacity-50\" \n    : \"bg-black bg-opacity-30 hover:bg-opacity-50\";\n  \n  const handleCopyColorCode = () => {\n    navigator.clipboard.writeText(color.hex).then(() => {\n      toast({\n        title: \"Copied!\",\n        description: `${color.hex} copied to clipboard`,\n        duration: 2000,\n      });\n    }).catch(err => {\n      toast({\n        title: \"Failed to copy\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n        duration: 2000,\n      });\n    });\n  };\n  \n  const handleToggleLock = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    toggleLock(index);\n    \n    toast({\n      title: color.locked ? \"Color unlocked\" : \"Color locked\",\n      description: color.locked \n        ? \"This color will change when generating\" \n        : \"This color will be preserved when generating\",\n      duration: 2000,\n    });\n  };\n  \n  const handleRemoveColor = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    removeColor(index);\n    \n    toast({\n      title: \"Color removed\",\n      description: \"Color has been removed from palette\",\n      duration: 2000,\n    });\n  };\n  \n  const handleAdjustColor = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onAdjustColor();\n  };\n  \n  // Helper function to determine if a color is light or dark\n  function isLightColor(hexColor: string) {\n    const r = parseInt(hexColor.slice(1, 3), 16);\n    const g = parseInt(hexColor.slice(3, 5), 16);\n    const b = parseInt(hexColor.slice(5, 7), 16);\n    \n    // Calculate perceived brightness (YIQ formula)\n    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n    return yiq >= 128;\n  }\n  \n  return (\n    <div \n      className=\"flex-1 relative flex flex-col justify-between transition-all cursor-pointer group min-h-[150px] xs:min-h-[170px] sm:min-h-[190px] md:min-h-0 w-full h-full border-2 border-white/20 rounded-md shadow-md\"\n      style={{ backgroundColor: color.hex }}\n      data-color-index={index}\n    >\n      {/* Color Controls - Top */}\n      <div className=\"absolute top-0 left-0 right-0 p-2 md:p-4 flex justify-between items-center\">\n        <div className=\"flex space-x-1\">\n          <button \n            className={`${textColor} ${buttonBg} rounded-full p-1.5 md:p-2 transition-all transform hover:scale-110 opacity-90`}\n            onClick={handleToggleLock}\n            aria-label={color.locked ? \"Unlock color\" : \"Lock color\"}\n            title={color.locked ? \"Unlock color\" : \"Lock color\"}\n          >\n            <i className={`fas ${color.locked ? 'fa-lock' : 'fa-unlock'} text-xs md:text-base`}></i>\n          </button>\n          \n          <button \n            className={`${textColor} bg-black/30 dark:bg-white/30 rounded-full p-1.5 md:p-2 transition-all transform hover:scale-110 opacity-90 ml-1 md:opacity-90`}\n            onClick={(e) => {\n              e.stopPropagation();\n              handleCopyColorCode();\n            }}\n            aria-label=\"Copy color code\"\n            title=\"Copy color code\"\n          >\n            <i className=\"fas fa-copy text-xs md:text-base\"></i>\n          </button>\n        </div>\n        \n        <div className=\"flex space-x-1 md:space-x-2\">\n          <button \n            className={`${textColor} ${buttonBg} rounded-full p-1.5 md:p-2 transition-all transform hover:scale-110 opacity-90`}\n            onClick={handleAdjustColor}\n            aria-label=\"Adjust color\"\n            title=\"Adjust color\"\n          >\n            <i className=\"fas fa-sliders-h text-xs md:text-base\"></i>\n          </button>\n          <button \n            className={`${textColor} ${buttonBg} rounded-full p-1.5 md:p-2 transition-all transform hover:scale-110 opacity-90`}\n            onClick={handleRemoveColor}\n            aria-label=\"Remove color\"\n            title=\"Remove color\"\n          >\n            <i className=\"fas fa-times text-xs md:text-base\"></i>\n          </button>\n        </div>\n      </div>\n      \n      {/* Color Code Display - Center */}\n      <div \n        className={`flex-1 flex flex-col items-center justify-center ${textColor} py-10 xs:py-12 sm:py-14 px-1 xs:px-2 md:p-4 group-hover:scale-105 md:group-hover:scale-110 transition-transform`}\n        onClick={handleCopyColorCode}\n      >\n        {/* Mobile Display - Simplified with no copy buttons */}\n        <div className=\"block md:hidden w-full\">\n          <div className=\"text-center\">\n            <div className=\"bg-black/20 dark:bg-white/20 py-2 px-3 mx-auto inline-block rounded-md\">\n              <div className=\"flex items-center justify-center\">\n                <span className=\"text-xs xs:text-sm sm:text-base font-bold mr-1\">\n                  {color.hex}\n                </span>\n                {color.name && (\n                  <>\n                    <span className=\"opacity-80 text-[9px] xs:text-[10px] mx-0.5\">•</span>\n                    <span className=\"text-[10px] xs:text-xs sm:text-sm opacity-90 truncate max-w-[80px]\">\n                      {color.name}\n                    </span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Desktop Display */}\n        <div className=\"hidden md:block\">\n          <h2 className=\"text-3xl lg:text-4xl xl:text-5xl font-bold tracking-wider mb-2 text-center\">\n            {color.hex}\n          </h2>\n          <div className=\"flex flex-col gap-1 items-center\">\n            {color.name && (\n              <p className=\"text-base opacity-90 font-medium\">{color.name}</p>\n            )}\n            <p className=\"text-sm opacity-70\">\n              RGB: {color.rgb.r}, {color.rgb.g}, {color.rgb.b}\n            </p>\n          </div>\n        </div>\n        \n        {/* Desktop \"Click to copy\" tooltip */}\n        <div className=\"hidden md:block mt-4 opacity-0 group-hover:opacity-100 transition-opacity\">\n          <div className={`${isLightColor(color.hex) ? 'bg-black bg-opacity-10' : 'bg-white bg-opacity-20'} rounded-full px-3 py-1 text-sm`}>\n            Click to copy\n          </div>\n        </div>\n        \n        {/* We don't need the mobile hover indicator anymore since we have a dedicated Copy button */}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6791},"client/src/components/Footer.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { ArrowUpRight, Github, Mail, Heart } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FooterProps {\n  className?: string;\n}\n\nexport default function Footer({ className }: FooterProps) {\n  const currentYear = new Date().getFullYear();\n  \n  return (\n    <footer className={cn(\"bg-gradient-to-r from-gray-50 to-gray-100 py-6 sm:py-8 rounded-2xl border border-gray-200\", className)}>\n      <div className=\"container mx-auto px-4 sm:px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-16 h-7\">\n                <img src=\"/logo_circles.svg\" alt=\"Coolors.in Logo\" className=\"h-full\" />\n              </div>\n              <span className=\"font-bold text-lg bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n                Coolors.in\n              </span>\n            </div>\n            <p className=\"mt-2 text-sm text-gray-600 max-w-md\">\n              Our color palette generator helps designers and developers create beautiful, harmonious color combinations with ease.\n            </p>\n            <div className=\"mt-3\">\n              <p className=\"text-sm text-gray-600\">\n                Created by <span className=\"font-medium text-gray-900\">Yash</span>\n              </p>\n              <a \n                href=\"mailto:rajyash73@gmail.com\" \n                className=\"text-blue-600 hover:text-blue-700 text-sm transition-colors\"\n              >\n                rajyash73@gmail.com\n              </a>\n            </div>\n            <div className=\"flex items-center mt-4 space-x-2\">\n              <a \n                href=\"https://github.com\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"p-2 bg-white text-gray-700 hover:text-blue-600 rounded-full border border-gray-200 shadow-sm transition-colors\"\n                aria-label=\"GitHub\"\n              >\n                <Github size={18} />\n              </a>\n              <a \n                href=\"mailto:rajyash73@gmail.com\"\n                className=\"p-2 bg-white text-gray-700 hover:text-blue-600 rounded-full border border-gray-200 shadow-sm transition-colors\"\n                aria-label=\"Email Yash\"\n              >\n                <Mail size={18} />\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4 sm:gap-8 text-sm\">\n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-3\">Application</h4>\n              <ul className=\"space-y-2\">\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/'}\n                  >\n                    Color Palette Generator\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/clothing-palette'}\n                  >\n                    Clothing Color Palette Creator\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/visualize'}\n                  >\n                    Visualizer\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/image-palette'}\n                  >\n                    Image to Palette\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-3\">Resources</h4>\n              <ul className=\"space-y-2\">\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/designers-guide'}\n                  >\n                    Designer's Guide\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/clothing-color-guide'}\n                  >\n                    Clothing Color Guide\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/visualizer-guide'}\n                  >\n                    Visualizer Guide\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/image-palette-guide'}\n                  >\n                    Image Palette Guide\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/faq'}\n                  >\n                    FAQ\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-gray-900 mb-3\">Legal</h4>\n              <ul className=\"space-y-2\">\n                <li>\n                  <div \n                    className=\"text-gray-600 hover:text-blue-600 transition-colors flex items-center cursor-pointer\"\n                    onClick={() => window.location.href = '/privacy-policy'}\n                  >\n                    Privacy Policy\n                    <ArrowUpRight className=\"ml-1\" size={12} />\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-8 pt-6 border-t border-gray-200 flex flex-col sm:flex-row justify-between items-center text-sm text-gray-600\">\n          <div className=\"flex items-center\">\n            © {currentYear} Coolors.in - All rights reserved.\n          </div>\n          <div className=\"mt-3 sm:mt-0 flex items-center\">\n            Made with <Heart size={14} className=\"mx-1 text-red-500\" /> for designers everywhere\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":7679},"client/src/components/Header.tsx":{"content":"import React from \"react\";\nimport { Link } from \"wouter\";\nimport { HelpCircle, Eye, Menu } from \"lucide-react\";\n\ninterface HeaderProps {\n  mobileMenuOpen: boolean;\n  toggleMobileMenu: () => void;\n}\n\nexport default function Header({ \n  mobileMenuOpen, \n  toggleMobileMenu \n}: HeaderProps) {\n  return (\n    <>\n      <header className=\"bg-white shadow-sm px-3 sm:px-4 py-2 sm:py-3 flex justify-between items-center z-10\">\n        <div className=\"flex items-center space-x-1 sm:space-x-2 cursor-pointer\" onClick={() => window.location.href = '/'}>\n          <div className=\"flex items-center gap-1 sm:gap-2\">\n            <div className=\"w-16 sm:w-20 md:w-24 h-6 sm:h-8\">\n              <img src=\"/logo_circles.svg\" alt=\"Coolors.in Logo\" className=\"h-full\" />\n            </div>\n            <span className=\"font-bold text-md sm:text-lg md:text-xl bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n              Coolors.in\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"hidden md:flex items-center space-x-4\">\n          <button \n            className=\"text-gray-600 hover:text-blue-600 flex items-center gap-1.5 px-3 py-1.5 rounded-lg hover:bg-gray-100 transition-colors group relative\"\n            onClick={() => window.location.href = '/designers-guide'}\n            aria-label=\"Help\"\n          >\n            <HelpCircle size={16} />\n            <span className=\"font-medium\">Help</span>\n            <span className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition shadow-lg whitespace-nowrap\">\n              Designer's guide\n            </span>\n          </button>\n          \n          <button \n            className=\"text-gray-600 hover:text-blue-600 flex items-center gap-1.5 px-3 py-1.5 rounded-lg hover:bg-gray-100 transition-colors group relative\"\n            onClick={() => window.location.href = '/visualize'}\n            aria-label=\"Visualize palette\"\n          >\n            <Eye size={16} />\n            <span className=\"font-medium\">Visualize</span>\n            <span className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-800 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition shadow-lg whitespace-nowrap\">\n              Preview in UI templates\n            </span>\n          </button>\n        </div>\n        \n        <div className=\"md:hidden\">\n          <button \n            className=\"text-gray-600 p-2 hover:bg-gray-100 rounded-full transition-colors\"\n            onClick={toggleMobileMenu}\n            aria-label=\"Toggle mobile menu\"\n          >\n            <Menu size={20} />\n          </button>\n        </div>\n      </header>\n      \n      {/* Mobile Menu */}\n      <div \n        className={`md:hidden bg-white shadow-lg fixed top-[42px] sm:top-[52px] right-2 sm:right-4 w-48 sm:w-56 z-50 rounded-xl transform origin-top-right transition-all duration-200 ${mobileMenuOpen ? 'scale-100 opacity-100' : 'scale-90 opacity-0 pointer-events-none'}`} \n      >\n        <div className=\"py-2 px-2 flex flex-col space-y-1.5\">\n          <button \n            className=\"text-gray-700 hover:text-blue-600 hover:bg-gray-50 flex items-center gap-2 py-1.5 px-3 rounded-lg transition-colors text-sm\"\n            onClick={() => window.location.href = '/designers-guide'}\n          >\n            <HelpCircle size={16} className=\"text-gray-500\" />\n            <span className=\"font-medium\">Help</span>\n          </button>\n          \n          <button \n            className=\"text-gray-700 hover:text-blue-600 hover:bg-gray-50 flex items-center gap-2 py-1.5 px-3 rounded-lg transition-colors text-sm\"\n            onClick={() => window.location.href = '/visualize'}\n          >\n            <Eye size={16} className=\"text-gray-500\" />\n            <span className=\"font-medium\">Visualize</span>\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":3983},"client/src/components/KeyboardShortcutsBar.tsx":{"content":"import React, { useState } from \"react\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\n\nexport default function KeyboardShortcutsBar() {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <div className=\"bg-gray-800 text-white text-xs shadow-md relative\">\n      {/* Mobile View - Collapsible */}\n      <div className=\"md:hidden\">\n        <div \n          className=\"py-2 px-4 flex justify-between items-center cursor-pointer\"\n          onClick={() => setIsExpanded(!isExpanded)}\n        >\n          <span className=\"font-medium\">Keyboard Shortcuts</span>\n          {isExpanded ? <ChevronUp size={16} /> : <ChevronDown size={16} />}\n        </div>\n        \n        {isExpanded && (\n          <div className=\"px-4 pb-3 flex flex-col space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"px-2 py-1 bg-gray-700 rounded text-center min-w-[50px]\">Space</div>\n              <span>Generate new palette</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"px-2 py-1 bg-gray-700 rounded text-center min-w-[50px]\">L</div>\n              <span>Lock/unlock color</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"px-2 py-1 bg-gray-700 rounded text-center min-w-[50px]\">C</div>\n              <span>Copy color code</span>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Desktop View */}\n      <div className=\"hidden md:flex py-1 px-4 justify-center items-center space-x-4\">\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"px-2 py-1 bg-gray-700 rounded text-center\">Space</div>\n          <span>Generate new palette</span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"px-2 py-1 bg-gray-700 rounded text-center\">L</div>\n          <span>Lock/unlock color</span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          <div className=\"px-2 py-1 bg-gray-700 rounded text-center\">C</div>\n          <span>Copy color code</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2183},"client/src/components/PayPalButton.tsx":{"content":"import React, { useEffect } from \"react\";\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"paypal-button\": React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLElement>,\n        HTMLElement\n      >;\n    }\n  }\n}\n\ninterface PayPalButtonProps {\n  country: string;\n  userInfo: {\n    email: string;\n    firstName?: string;\n    lastName?: string;\n  };\n  onSuccess: (subscriptionId: string) => void;\n  onError: (error: any) => void;\n  onCancel: () => void;\n}\n\nexport default function PayPalButton({\n  country,\n  userInfo,\n  onSuccess,\n  onError,\n  onCancel,\n}: PayPalButtonProps) {\n  const createSubscription = async () => {\n    const subscriptionPayload = {\n      country: country,\n      email: userInfo.email,\n      firstName: userInfo.firstName,\n      lastName: userInfo.lastName,\n    };\n    \n    const response = await fetch(\"/api/subscription/create\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(subscriptionPayload),\n    });\n    \n    const data = await response.json();\n    return { orderId: data.id };\n  };\n\n  const onApprove = async (data: any) => {\n    console.log(\"Payment approved:\", data);\n    if (data.orderID) {\n      // Capture the payment\n      const captureResponse = await fetch(`/api/subscription/capture/${data.orderID}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (captureResponse.ok) {\n        onSuccess(data.orderID);\n      } else {\n        onError(\"Failed to capture payment\");\n      }\n    }\n  };\n\n  const onErrorHandler = async (data: any) => {\n    console.log(\"PayPal error:\", data);\n    onError(data);\n  };\n\n  const onCancelHandler = async (data: any) => {\n    console.log(\"PayPal cancelled:\", data);\n    onCancel();\n  };\n\n  useEffect(() => {\n    const loadPayPalSDK = async () => {\n      try {\n        if (!(window as any).paypal) {\n          const script = document.createElement(\"script\");\n          script.src = import.meta.env.PROD\n            ? \"https://www.paypal.com/web-sdk/v6/core\"\n            : \"https://www.sandbox.paypal.com/web-sdk/v6/core\";\n          script.async = true;\n          script.onload = () => initPayPal();\n          document.body.appendChild(script);\n        } else {\n          await initPayPal();\n        }\n      } catch (e) {\n        console.error(\"Failed to load PayPal SDK\", e);\n      }\n    };\n\n    loadPayPalSDK();\n  }, []);\n\n  const initPayPal = async () => {\n    try {\n      const clientToken: string = await fetch(\"/api/paypal/setup\")\n        .then((res) => res.json())\n        .then((data) => {\n          return data.clientToken;\n        });\n\n      const sdkInstance = await (window as any).paypal.createInstance({\n        clientToken,\n        components: [\"paypal-payments\"],\n      });\n\n      const paypalCheckout = sdkInstance.createPayPalOneTimePaymentSession({\n        onApprove,\n        onCancel: onCancelHandler,\n        onError: onErrorHandler,\n      });\n\n      const onClick = async () => {\n        try {\n          const orderPromise = createSubscription();\n          await paypalCheckout.start(\n            { paymentFlow: \"auto\" },\n            orderPromise,\n          );\n        } catch (e) {\n          console.error(e);\n          onError(e);\n        }\n      };\n\n      const paypalButton = document.getElementById(\"paypal-subscription-button\");\n\n      if (paypalButton) {\n        paypalButton.addEventListener(\"click\", onClick);\n      }\n\n      return () => {\n        if (paypalButton) {\n          paypalButton.removeEventListener(\"click\", onClick);\n        }\n      };\n    } catch (e) {\n      console.error(e);\n      onError(e);\n    }\n  };\n\n  return (\n    <div>\n      <paypal-button \n        id=\"paypal-subscription-button\"\n        className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium cursor-pointer\"\n      >\n        Subscribe with PayPal\n      </paypal-button>\n    </div>\n  );\n}","size_bytes":3954},"client/src/components/Toast.tsx":{"content":"import React, { useEffect, useState } from \"react\";\n\ninterface ToastProps {\n  message: string;\n  duration?: number;\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nexport default function Toast({ \n  message, \n  duration = 3000, \n  isVisible, \n  onClose \n}: ToastProps) {\n  const [isShowing, setIsShowing] = useState(false);\n  \n  useEffect(() => {\n    if (isVisible) {\n      setIsShowing(true);\n      \n      const timer = setTimeout(() => {\n        setIsShowing(false);\n        setTimeout(onClose, 300); // Wait for exit animation to complete\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [isVisible, duration, onClose]);\n  \n  return (\n    <div \n      className={`fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded-md shadow-lg transform transition-all duration-300 z-50 ${\n        isShowing ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'\n      }`}\n    >\n      {message}\n    </div>\n  );\n}\n","size_bytes":945},"client/src/components/TrendingPalettes.tsx":{"content":"import React from 'react';\nimport { ArrowRight } from 'lucide-react';\nimport { Color } from '../types/Color';\nimport { isLightColor, getColorName } from '@/lib/colorUtils';\n\ninterface TrendingPaletteProps {\n  name: string;\n  colors: string[];\n  onSelect: (colors: Color[]) => void;\n}\n\n// Sample trending palettes data\nexport const TRENDING_PALETTES = [\n  {\n    name: \"Summer Sunset\",\n    colors: [\"#FF9671\", \"#FFC75F\", \"#F9F871\", \"#D65DB1\", \"#845EC2\"]\n  },\n  {\n    name: \"Ocean Breeze\",\n    colors: [\"#1A535C\", \"#4ECDC4\", \"#F7FFF7\", \"#FF6B6B\", \"#FFE66D\"]\n  },\n  {\n    name: \"Forest Vibes\",\n    colors: [\"#2D6A4F\", \"#40916C\", \"#52B788\", \"#74C69D\", \"#95D5B2\"]\n  },\n  {\n    name: \"Retro Wave\",\n    colors: [\"#2B2D42\", \"#8D99AE\", \"#EDF2F4\", \"#EF233C\", \"#D90429\"]\n  },\n  {\n    name: \"Pastel Dream\",\n    colors: [\"#CDB4DB\", \"#FFC8DD\", \"#FFAFCC\", \"#BDE0FE\", \"#A2D2FF\"]\n  }\n];\n\nfunction TrendingPalette({ name, colors, onSelect }: TrendingPaletteProps) {\n  const handleClick = () => {\n    // Convert hex strings to Color objects\n    const colorObjects = colors.map(hex => {\n      const colorName = getColorName(hex);\n      return {\n        hex,\n        rgb: {\n          r: parseInt(hex.slice(1, 3), 16),\n          g: parseInt(hex.slice(3, 5), 16),\n          b: parseInt(hex.slice(5, 7), 16)\n        },\n        locked: false,\n        name: colorName\n      };\n    });\n    \n    onSelect(colorObjects);\n  };\n  \n  return (\n    <div \n      className=\"bg-white rounded-xl overflow-hidden shadow-md hover:shadow-lg border border-gray-100 transition-all cursor-pointer group\"\n      onClick={handleClick}\n    >\n      <div className=\"flex h-14 sm:h-20 relative\">\n        {colors.map((color, index) => (\n          <div \n            key={index}\n            className=\"flex-1 group-hover:flex-[1.1] transition-all duration-300 relative\"\n            style={{ backgroundColor: color }}\n          >\n            <div \n              className=\"absolute inset-0 opacity-0 group-hover:opacity-100 flex items-center justify-center text-xs font-medium transition-opacity duration-300\"\n              style={{ color: isLightColor(color) ? '#333' : '#fff', backgroundColor: color + '99' }}\n            >\n              <span className=\"px-2 py-1 backdrop-blur-sm rounded bg-white bg-opacity-20\">\n                {color}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n      <div className=\"p-3 sm:p-4 flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-sm sm:text-base font-medium text-gray-800\">{name}</h3>\n          <p className=\"text-xs text-gray-500 mt-0.5\">{colors.length} colors</p>\n        </div>\n        <span className=\"p-1.5 bg-gray-100 rounded-full text-gray-500 group-hover:bg-blue-500 group-hover:text-white transition-all\">\n          <ArrowRight size={16} className=\"sm:h-[18px] sm:w-[18px]\" />\n        </span>\n      </div>\n    </div>\n  );\n}\n\ninterface TrendingPalettesProps {\n  onSelectPalette: (colors: Color[]) => void;\n}\n\nexport default function TrendingPalettes({ onSelectPalette }: TrendingPalettesProps) {\n  return (\n    <div className=\"mt-8 sm:mt-12 bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-6 sm:p-8 shadow-sm border border-gray-200\">\n      <div className=\"flex justify-between items-center mb-5 sm:mb-6\">\n        <div>\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">Trending Palettes</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">Try these popular color combinations</p>\n        </div>\n        <div className=\"bg-white p-1.5 rounded-full shadow-sm border border-gray-200\">\n          <ArrowRight size={20} className=\"text-blue-500\" />\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5\">\n        {TRENDING_PALETTES.map((palette, index) => (\n          <TrendingPalette\n            key={index}\n            name={palette.name}\n            colors={palette.colors}\n            onSelect={onSelectPalette}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":4096},"client/src/contexts/PaletteContext.tsx":{"content":"import React, { useState, useCallback, useMemo, useContext } from 'react';\nimport { Color } from '@/types/Color';\nimport { getRandomColor, hexToRgb, getColorName, rgbToHex } from '@/lib/colorUtils';\n\n// Define the color theory types\nexport type ColorTheory = \n  | 'auto' \n  | 'monochromatic' \n  | 'analogous' \n  | 'complementary' \n  | 'split-complementary' \n  | 'triadic' \n  | 'tetradic' \n  | 'neutral';\n\nexport const colorTheoryOptions = [\n  { value: 'auto', label: 'Auto (Random)' },\n  { value: 'monochromatic', label: 'Monochromatic' },\n  { value: 'analogous', label: 'Analogous' },\n  { value: 'complementary', label: 'Complementary' },\n  { value: 'split-complementary', label: 'Split-Complementary' },\n  { value: 'triadic', label: 'Triadic' },\n  { value: 'tetradic', label: 'Tetradic' },\n  { value: 'neutral', label: 'Neutral' }\n];\n\n// Define context shape\ninterface PaletteContextType {\n  palette: Color[];\n  colorTheory: ColorTheory;\n  setColorTheory: (theory: ColorTheory) => void;\n  generatePalette: () => void;\n  generatePaletteWithTheory: (baseColor: Color) => void;\n  toggleLock: (index: number) => void;\n  addColor: () => void;\n  removeColor: (index: number) => void;\n  resetPalette: () => void;\n  updateColor: (index: number, color: Color) => void;\n  setPalette: (colors: Color[]) => void;\n  reorderColors: (sourceIndex: number, targetIndex: number) => void;\n}\n\n// Create the context\nconst PaletteContext = React.createContext<PaletteContextType | null>(null);\n\nconst DEFAULT_COLORS = [\n  { hex: \"#7A4ED9\", rgb: { r: 122, g: 78, b: 217 }, locked: false, name: \"Blue Violet\" },\n  { hex: \"#ED584E\", rgb: { r: 237, g: 88, b: 78 }, locked: false, name: \"Tomato\" },\n  { hex: \"#51CED9\", rgb: { r: 81, g: 206, b: 217 }, locked: false, name: \"Turquoise\" },\n  { hex: \"#F7DB58\", rgb: { r: 247, g: 219, b: 88 }, locked: false, name: \"Yellow\" },\n  { hex: \"#5AE881\", rgb: { r: 90, g: 232, b: 129 }, locked: false, name: \"Spring Green\" },\n];\n\n// Helper functions for color theory\nfunction hueShift(hex: string, shift: number): string {\n  const rgb = hexToRgb(hex);\n  if (!rgb) return hex;\n\n  // Convert RGB to HSL\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h, s, l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    \n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n      default: h = 0;\n    }\n    \n    h /= 6;\n  }\n\n  // Apply hue shift (0-1 range)\n  h = (h + shift) % 1;\n  if (h < 0) h += 1;\n  \n  // Convert back to RGB\n  let r1, g1, b1;\n  \n  if (s === 0) {\n    r1 = g1 = b1 = l; // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n    \n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    \n    r1 = hue2rgb(p, q, h + 1/3);\n    g1 = hue2rgb(p, q, h);\n    b1 = hue2rgb(p, q, h - 1/3);\n  }\n  \n  const newR = Math.round(r1 * 255);\n  const newG = Math.round(g1 * 255);\n  const newB = Math.round(b1 * 255);\n  \n  return rgbToHex(newR, newG, newB);\n}\n\nfunction adjustSaturation(hex: string, factor: number): string {\n  const rgb = hexToRgb(hex);\n  if (!rgb) return hex;\n\n  // Convert RGB to HSL\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h, s, l = (max + min) / 2;\n\n  if (max === min) {\n    h = 0; // achromatic\n    s = 0;\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    \n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n      default: h = 0;\n    }\n    \n    h /= 6;\n  }\n\n  // Adjust saturation\n  s = Math.max(0, Math.min(1, s * factor));\n  \n  // Convert back to RGB\n  let r1, g1, b1;\n  \n  if (s === 0) {\n    r1 = g1 = b1 = l; // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n    \n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    \n    r1 = hue2rgb(p, q, h + 1/3);\n    g1 = hue2rgb(p, q, h);\n    b1 = hue2rgb(p, q, h - 1/3);\n  }\n  \n  const newR = Math.round(r1 * 255);\n  const newG = Math.round(g1 * 255);\n  const newB = Math.round(b1 * 255);\n  \n  return rgbToHex(newR, newG, newB);\n}\n\nfunction adjustLightness(hex: string, amount: number): string {\n  const rgb = hexToRgb(hex);\n  if (!rgb) return hex;\n\n  // Convert RGB to HSL\n  const r = rgb.r / 255;\n  const g = rgb.g / 255;\n  const b = rgb.b / 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h, s, l = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    \n    switch (max) {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n      default: h = 0;\n    }\n    \n    h /= 6;\n  }\n\n  // Adjust lightness\n  l = Math.max(0, Math.min(1, l + amount));\n  \n  // Convert back to RGB\n  let r1, g1, b1;\n  \n  if (s === 0) {\n    r1 = g1 = b1 = l; // achromatic\n  } else {\n    const hue2rgb = (p: number, q: number, t: number) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1/6) return p + (q - p) * 6 * t;\n      if (t < 1/2) return q;\n      if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n      return p;\n    };\n    \n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    \n    r1 = hue2rgb(p, q, h + 1/3);\n    g1 = hue2rgb(p, q, h);\n    b1 = hue2rgb(p, q, h - 1/3);\n  }\n  \n  const newR = Math.round(r1 * 255);\n  const newG = Math.round(g1 * 255);\n  const newB = Math.round(b1 * 255);\n  \n  return rgbToHex(newR, newG, newB);\n}\n\n// Provider component\nexport function PaletteProvider({ children }: { children: React.ReactNode }) {\n  const [palette, setPaletteState] = useState<Color[]>(DEFAULT_COLORS);\n  const [colorTheory, setColorTheory] = useState<ColorTheory>('auto');\n  \n  const generatePalette = useCallback(() => {\n    console.log(\"Generating new palette...\");\n    \n    // If using auto mode, just do random generation\n    if (colorTheory === 'auto') {\n      setPaletteState(prevPalette => \n        prevPalette.map(color => {\n          if (color.locked) return color;\n          \n          const hex = getRandomColor();\n          const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n          const name = getColorName(hex);\n          \n          return {\n            hex,\n            rgb,\n            locked: false,\n            name\n          };\n        })\n      );\n      return;\n    }\n    \n    // If using color theory, find a base color\n    setPaletteState(prevPalette => {\n      // Create a copy of the palette\n      const newPalette = [...prevPalette];\n      \n      // Find the first unlocked color to use as base, or generate a new base color\n      const baseIndex = newPalette.findIndex(c => !c.locked);\n      if (baseIndex === -1) {\n        // All colors are locked, just return the palette as-is\n        return newPalette;\n      }\n      \n      // Generate a new base color if the existing one is not locked\n      if (!newPalette[baseIndex].locked) {\n        const hex = getRandomColor();\n        const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n        const name = getColorName(hex);\n        \n        newPalette[baseIndex] = {\n          hex,\n          rgb,\n          locked: false,\n          name\n        };\n      }\n      \n      // Get the base color\n      const baseColor = newPalette[baseIndex];\n      \n      // Generate colors based on color theory using the base color\n      for (let i = 0; i < newPalette.length; i++) {\n        if (newPalette[i].locked || i === baseIndex) continue;\n        \n        let newHex: string;\n        const baseHex = baseColor.hex;\n        \n        switch (colorTheory) {\n          case 'monochromatic':\n            // Vary lightness and saturation while keeping the same hue\n            if (i < baseIndex) {\n              // Darker variations\n              const darkenAmount = -0.15 * (baseIndex - i);\n              newHex = adjustLightness(baseHex, darkenAmount);\n            } else {\n              // Lighter variations\n              const lightenAmount = 0.15 * (i - baseIndex);\n              newHex = adjustLightness(baseHex, lightenAmount);\n            }\n            break;\n            \n          case 'analogous':\n            // Colors next to each other on the color wheel\n            const analogousShift = (i - baseIndex) * 0.08; // Small hue shift\n            newHex = hueShift(baseHex, analogousShift);\n            break;\n            \n          case 'complementary':\n            // Opposite colors\n            if (i === baseIndex + 1 || (baseIndex === newPalette.length - 1 && i === 0)) {\n              // Complementary color (opposite on color wheel)\n              newHex = hueShift(baseHex, 0.5);\n            } else {\n              // Variations of the base and complement\n              const isBaseVariation = i < baseIndex || i > baseIndex + 1;\n              const referenceColor = isBaseVariation ? baseHex : hueShift(baseHex, 0.5);\n              const variationIndex = isBaseVariation ? i : i - baseIndex - 1;\n              \n              // Adjust saturation and lightness for variations\n              newHex = adjustSaturation(\n                adjustLightness(referenceColor, variationIndex * 0.1),\n                1 - variationIndex * 0.1\n              );\n            }\n            break;\n            \n          case 'split-complementary':\n            // Base color + two adjacent to its complement\n            if (i === baseIndex + 1 || (baseIndex === newPalette.length - 1 && i === 0)) {\n              // First split complement\n              newHex = hueShift(baseHex, 0.5 - 0.05);\n            } else if (i === baseIndex + 2 || (baseIndex >= newPalette.length - 2 && i === baseIndex + 2 - newPalette.length)) {\n              // Second split complement\n              newHex = hueShift(baseHex, 0.5 + 0.05);\n            } else {\n              // Variations\n              const shift = (i - baseIndex) * 0.07;\n              newHex = hueShift(baseHex, shift);\n            }\n            break;\n            \n          case 'triadic':\n            // Three evenly spaced colors\n            const triadicShift = Math.floor((i - baseIndex) / Math.ceil(newPalette.length / 3)) * (1/3);\n            newHex = hueShift(baseHex, triadicShift);\n            break;\n            \n          case 'tetradic':\n            // Four evenly spaced colors\n            const tetradicShift = Math.floor((i - baseIndex) / Math.ceil(newPalette.length / 4)) * 0.25;\n            newHex = hueShift(baseHex, tetradicShift);\n            break;\n            \n          case 'neutral':\n            // Desaturated colors\n            // Create a slight hue shift and heavily desaturate\n            const slightShift = (i - baseIndex) * 0.02;\n            newHex = adjustSaturation(hueShift(baseHex, slightShift), 0.3);\n            break;\n            \n          default:\n            // Default to random colors\n            const hex = getRandomColor();\n            const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n            const name = getColorName(hex);\n            \n            newPalette[i] = {\n              hex,\n              rgb,\n              locked: false,\n              name\n            };\n            continue;\n        }\n        \n        // Convert the new color to RGB and get its name\n        const rgb = hexToRgb(newHex) || { r: 0, g: 0, b: 0 };\n        const name = getColorName(newHex);\n        \n        // Update the palette with the new color\n        newPalette[i] = {\n          hex: newHex,\n          rgb,\n          locked: false,\n          name\n        };\n      }\n      \n      return newPalette;\n    });\n  }, [colorTheory]);\n  \n  const toggleLock = useCallback((index: number) => {\n    setPaletteState(prevPalette => \n      prevPalette.map((color, i) => \n        i === index ? { ...color, locked: !color.locked } : color\n      )\n    );\n  }, []);\n  \n  const addColor = useCallback(() => {\n    if (palette.length >= 10) {\n      console.log(\"Maximum palette size reached\");\n      return;\n    }\n    \n    // In auto mode, just add a random color\n    if (colorTheory === 'auto') {\n      const hex = getRandomColor();\n      const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n      const name = getColorName(hex);\n      \n      setPaletteState(prevPalette => [\n        ...prevPalette,\n        { hex, rgb, locked: false, name }\n      ]);\n      return;\n    }\n    \n    // In color theory mode, add a color that follows the pattern\n    setPaletteState(prevPalette => {\n      const newPalette = [...prevPalette];\n      \n      // Find a good base color (preferably the first unlocked color)\n      const baseIndex = newPalette.findIndex(c => !c.locked);\n      const baseColor = baseIndex !== -1 ? \n        newPalette[baseIndex] : \n        newPalette[0]; // Use first color if all are locked\n      \n      let newHex: string;\n      const baseHex = baseColor.hex;\n      const newIndex = newPalette.length;\n      \n      // Calculate position relative to the base color\n      const relativePosition = baseIndex !== -1 ? newIndex - baseIndex : newIndex;\n      \n      switch (colorTheory) {\n        case 'monochromatic':\n          // Add a lighter variation\n          const lightenAmount = 0.15 * relativePosition;\n          newHex = adjustLightness(baseHex, lightenAmount);\n          break;\n          \n        case 'analogous':\n          // Add a color with hue further along the wheel\n          const analogousShift = relativePosition * 0.08;\n          newHex = hueShift(baseHex, analogousShift);\n          break;\n          \n        case 'complementary':\n          // If we have odd number of colors, add a complement\n          // Otherwise add a variation\n          if (newPalette.length % 2 === 0) {\n            newHex = hueShift(baseHex, 0.5); // Complement\n          } else {\n            // Variation of either base or complement\n            const isBaseVariation = Math.random() > 0.5;\n            const referenceColor = isBaseVariation ? baseHex : hueShift(baseHex, 0.5);\n            \n            // Adjust saturation and lightness for variations\n            newHex = adjustSaturation(\n              adjustLightness(referenceColor, 0.1),\n              0.9\n            );\n          }\n          break;\n          \n        case 'split-complementary':\n          // Try to complete the split-complementary triad\n          if (newPalette.length % 3 === 0) {\n            newHex = hueShift(baseHex, 0.5 - 0.05); // First split complement\n          } else if (newPalette.length % 3 === 1) {\n            newHex = hueShift(baseHex, 0.5 + 0.05); // Second split complement\n          } else {\n            // Add a variation\n            const shift = relativePosition * 0.07;\n            newHex = hueShift(baseHex, shift);\n          }\n          break;\n          \n        case 'triadic':\n          // Add the next color in the triad\n          const triadicShift = Math.floor(relativePosition / Math.ceil((newPalette.length + 1) / 3)) * (1/3);\n          newHex = hueShift(baseHex, triadicShift);\n          break;\n          \n        case 'tetradic':\n          // Add the next color in the tetrad\n          const tetradicShift = Math.floor(relativePosition / Math.ceil((newPalette.length + 1) / 4)) * 0.25;\n          newHex = hueShift(baseHex, tetradicShift);\n          break;\n          \n        case 'neutral':\n          // Add another desaturated color\n          const slightShift = relativePosition * 0.02;\n          newHex = adjustSaturation(hueShift(baseHex, slightShift), 0.3);\n          break;\n          \n        default:\n          // Default to random colors\n          const hex = getRandomColor();\n          const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n          const name = getColorName(hex);\n          \n          return [...newPalette, { hex, rgb, locked: false, name }];\n      }\n      \n      // Convert the new color to RGB and get its name\n      const rgb = hexToRgb(newHex) || { r: 0, g: 0, b: 0 };\n      const name = getColorName(newHex);\n      \n      // Add the new color to the palette\n      return [...newPalette, { hex: newHex, rgb, locked: false, name }];\n    });\n  }, [palette, colorTheory]);\n  \n  const removeColor = useCallback((index: number) => {\n    if (palette.length <= 2) {\n      console.log(\"Minimum palette size reached\");\n      return;\n    }\n    \n    setPaletteState(prevPalette => \n      prevPalette.filter((_, i) => i !== index)\n    );\n  }, [palette.length]);\n  \n  const resetPalette = useCallback(() => {\n    setPaletteState(DEFAULT_COLORS);\n  }, []);\n  \n  const updateColor = useCallback((index: number, updatedColor: Color) => {\n    setPaletteState(prevPalette => \n      prevPalette.map((color, i) => i === index ? updatedColor : color)\n    );\n  }, []);\n  \n  const setPalette = useCallback((colors: Color[]) => {\n    setPaletteState(colors);\n  }, []);\n  \n  const reorderColors = useCallback((sourceIndex: number, targetIndex: number) => {\n    if (sourceIndex === targetIndex) return;\n    \n    setPaletteState(prevPalette => {\n      const newPalette = [...prevPalette];\n      const [movedColor] = newPalette.splice(sourceIndex, 1);\n      newPalette.splice(targetIndex, 0, movedColor);\n      return newPalette;\n    });\n  }, []);\n  \n  const generatePaletteWithTheory = useCallback((baseColor: Color) => {\n    if (colorTheory === 'auto') {\n      // Just use the regular random generation\n      generatePalette();\n      return;\n    }\n    \n    // Start with the base color, which should be kept\n    const newPalette: Color[] = [...palette];\n    const baseIndex = newPalette.findIndex(c => !c.locked);\n    \n    if (baseIndex === -1) {\n      // All colors are locked, can't generate\n      return;\n    }\n    \n    // Update the base color if it's not locked\n    if (!newPalette[baseIndex].locked) {\n      newPalette[baseIndex] = { ...baseColor, locked: true };\n    }\n    \n    // Generate colors based on color theory\n    for (let i = 0; i < newPalette.length; i++) {\n      if (newPalette[i].locked && i !== baseIndex) continue;\n      \n      let newHex: string;\n      const baseHex = baseColor.hex;\n      \n      switch (colorTheory) {\n        case 'monochromatic':\n          // Vary lightness and saturation while keeping the same hue\n          if (i === baseIndex) continue; // Skip the base color\n          \n          if (i < baseIndex) {\n            // Darker variations\n            const darkenAmount = -0.15 * (baseIndex - i);\n            newHex = adjustLightness(baseHex, darkenAmount);\n          } else {\n            // Lighter variations\n            const lightenAmount = 0.15 * (i - baseIndex);\n            newHex = adjustLightness(baseHex, lightenAmount);\n          }\n          break;\n          \n        case 'analogous':\n          // Colors next to each other on the color wheel\n          if (i === baseIndex) continue;\n          \n          const analogousShift = (i - baseIndex) * 0.08; // Small hue shift\n          newHex = hueShift(baseHex, analogousShift);\n          break;\n          \n        case 'complementary':\n          // Opposite colors\n          if (i === baseIndex) continue;\n          \n          if (i === baseIndex + 1 || (baseIndex === newPalette.length - 1 && i === 0)) {\n            // Complementary color (opposite on color wheel)\n            newHex = hueShift(baseHex, 0.5);\n          } else {\n            // Variations of the base and complement\n            const isBaseVariation = i < baseIndex || i > baseIndex + 1;\n            const referenceColor = isBaseVariation ? baseHex : hueShift(baseHex, 0.5);\n            const variationIndex = isBaseVariation ? i : i - baseIndex - 1;\n            \n            // Adjust saturation and lightness for variations\n            newHex = adjustSaturation(\n              adjustLightness(referenceColor, variationIndex * 0.1),\n              1 - variationIndex * 0.1\n            );\n          }\n          break;\n          \n        case 'split-complementary':\n          // Base color + two adjacent to its complement\n          if (i === baseIndex) continue;\n          \n          if (i === baseIndex + 1 || (baseIndex === newPalette.length - 1 && i === 0)) {\n            // First split complement\n            newHex = hueShift(baseHex, 0.5 - 0.05);\n          } else if (i === baseIndex + 2 || (baseIndex >= newPalette.length - 2 && i === baseIndex + 2 - newPalette.length)) {\n            // Second split complement\n            newHex = hueShift(baseHex, 0.5 + 0.05);\n          } else {\n            // Variations\n            const shift = (i - baseIndex) * 0.07;\n            newHex = hueShift(baseHex, shift);\n          }\n          break;\n          \n        case 'triadic':\n          // Three evenly spaced colors\n          if (i === baseIndex) continue;\n          \n          const triadicShift = Math.floor((i - baseIndex) / Math.ceil(newPalette.length / 3)) * (1/3);\n          newHex = hueShift(baseHex, triadicShift);\n          break;\n          \n        case 'tetradic':\n          // Four evenly spaced colors\n          if (i === baseIndex) continue;\n          \n          const tetradicShift = Math.floor((i - baseIndex) / Math.ceil(newPalette.length / 4)) * 0.25;\n          newHex = hueShift(baseHex, tetradicShift);\n          break;\n          \n        case 'neutral':\n          // Desaturated colors\n          if (i === baseIndex) continue;\n          \n          // Create a slight hue shift and heavily desaturate\n          const slightShift = (i - baseIndex) * 0.02;\n          newHex = adjustSaturation(hueShift(baseHex, slightShift), 0.3);\n          break;\n          \n        default:\n          // Default to random colors\n          const hex = getRandomColor();\n          const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n          const name = getColorName(hex);\n          \n          newPalette[i] = {\n            hex,\n            rgb,\n            locked: false,\n            name\n          };\n          continue;\n      }\n      \n      // Convert the new color to RGB and get its name\n      const rgb = hexToRgb(newHex) || { r: 0, g: 0, b: 0 };\n      const name = getColorName(newHex);\n      \n      // Update the palette with the new color\n      newPalette[i] = {\n        hex: newHex,\n        rgb,\n        locked: false,\n        name\n      };\n    }\n    \n    setPaletteState(newPalette);\n  }, [palette, colorTheory, generatePalette]);\n  \n  const value = useMemo(() => ({\n    palette,\n    colorTheory,\n    setColorTheory,\n    generatePalette,\n    generatePaletteWithTheory,\n    toggleLock,\n    addColor,\n    removeColor,\n    resetPalette,\n    updateColor,\n    setPalette,\n    reorderColors\n  }), [\n    palette, \n    colorTheory, \n    setColorTheory, \n    generatePalette, \n    generatePaletteWithTheory,\n    toggleLock, \n    addColor, \n    removeColor, \n    resetPalette, \n    updateColor, \n    setPalette, \n    reorderColors\n  ]);\n  \n  return (\n    <PaletteContext.Provider value={value}>\n      {children}\n    </PaletteContext.Provider>\n  );\n}\n\n// Hook for using the context\nexport function usePalette() {\n  const context = useContext(PaletteContext);\n  if (!context) {\n    throw new Error(\"usePalette must be used within a PaletteProvider\");\n  }\n  return context;\n}","size_bytes":23833},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\nimport {\n  useMutation,\n  UseMutationResult,\n  useQueryClient\n} from \"@tanstack/react-query\";\nimport { User, InsertUser } from \"../types/User\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  getCurrentUser, \n  loginUser, \n  logoutUser, \n  registerUser \n} from \"../lib/localStorageService\";\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<User, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<User, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // Load user from local storage on component mount\n  useEffect(() => {\n    try {\n      const currentUser = getCurrentUser();\n      setUser(currentUser);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to load user'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      return loginUser(credentials.username, credentials.password);\n    },\n    onSuccess: (user: User) => {\n      setUser(user);\n      queryClient.setQueryData(['currentUser'], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      return registerUser(credentials);\n    },\n    onSuccess: (user: User) => {\n      setUser(user);\n      queryClient.setQueryData(['currentUser'], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome, ${user.username}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      logoutUser();\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.setQueryData(['currentUser'], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":3443},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/colorUtils.ts":{"content":"// Convert hex color to RGB\nexport function hexToRgb(hex: string): { r: number, g: number, b: number } | null {\n  // Handle shorthand hex colors (e.g., #fff)\n  let processedHex = hex;\n  \n  // If the hex code is incomplete (less than 7 chars), return the original color's RGB\n  if (hex.length < 7) {\n    return null;\n  }\n  \n  // Extract r, g, b values\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(processedHex);\n  \n  if (!result) {\n    return null;\n  }\n  \n  return {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  };\n}\n\n// Convert RGB to hex color\nexport function rgbToHex(r: number, g: number, b: number): string {\n  // Ensure values are within range\n  r = Math.min(255, Math.max(0, r));\n  g = Math.min(255, Math.max(0, g));\n  b = Math.min(255, Math.max(0, b));\n  \n  return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();\n}\n\n// Generate a random hex color\nexport function getRandomColor(): string {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  \n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  \n  return color;\n}\n\n// Generate a random RGB color\nexport function getRandomRgb(): { r: number, g: number, b: number } {\n  return {\n    r: Math.floor(Math.random() * 256),\n    g: Math.floor(Math.random() * 256),\n    b: Math.floor(Math.random() * 256)\n  };\n}\n\n// Check if a color is light (for determining text color)\nexport function isLightColor(hexColor: string): boolean {\n  const rgb = hexToRgb(hexColor);\n  \n  if (!rgb) {\n    return false;\n  }\n  \n  // Calculate perceived brightness (YIQ formula)\n  const yiq = ((rgb.r * 299) + (rgb.g * 587) + (rgb.b * 114)) / 1000;\n  return yiq >= 128;\n}\n\n// Generate a complementary color\nexport function getComplementaryColor(hexColor: string): string {\n  const rgb = hexToRgb(hexColor);\n  \n  if (!rgb) {\n    return '#000000';\n  }\n  \n  // Get the complementary color by inverting RGB values\n  const complementary = {\n    r: 255 - rgb.r,\n    g: 255 - rgb.g,\n    b: 255 - rgb.b\n  };\n  \n  return rgbToHex(complementary.r, complementary.g, complementary.b);\n}\n\n// Named color map with common colors and their hex values\nexport const namedColors = [\n  { name: \"Red\", hex: \"#FF0000\" },\n  { name: \"Dark Red\", hex: \"#8B0000\" },\n  { name: \"Crimson\", hex: \"#DC143C\" },\n  { name: \"Maroon\", hex: \"#800000\" },\n  { name: \"Tomato\", hex: \"#FF6347\" },\n  { name: \"Coral\", hex: \"#FF7F50\" },\n  { name: \"Indian Red\", hex: \"#CD5C5C\" },\n  { name: \"Firebrick\", hex: \"#B22222\" },\n  { name: \"Orange Red\", hex: \"#FF4500\" },\n  { name: \"Orange\", hex: \"#FFA500\" },\n  { name: \"Dark Orange\", hex: \"#FF8C00\" },\n  { name: \"Gold\", hex: \"#FFD700\" },\n  { name: \"Yellow\", hex: \"#FFFF00\" },\n  { name: \"Khaki\", hex: \"#F0E68C\" },\n  { name: \"Olive\", hex: \"#808000\" },\n  { name: \"Yellow Green\", hex: \"#9ACD32\" },\n  { name: \"Lime Green\", hex: \"#32CD32\" },\n  { name: \"Lime\", hex: \"#00FF00\" },\n  { name: \"Green\", hex: \"#008000\" },\n  { name: \"Forest Green\", hex: \"#228B22\" },\n  { name: \"Spring Green\", hex: \"#00FF7F\" },\n  { name: \"Medium Spring Green\", hex: \"#00FA9A\" },\n  { name: \"Teal\", hex: \"#008080\" },\n  { name: \"Cyan\", hex: \"#00FFFF\" },\n  { name: \"Light Cyan\", hex: \"#E0FFFF\" },\n  { name: \"Turquoise\", hex: \"#40E0D0\" },\n  { name: \"Medium Turquoise\", hex: \"#48D1CC\" },\n  { name: \"Dark Turquoise\", hex: \"#00CED1\" },\n  { name: \"Aquamarine\", hex: \"#7FFFD4\" },\n  { name: \"Cadet Blue\", hex: \"#5F9EA0\" },\n  { name: \"Steel Blue\", hex: \"#4682B4\" },\n  { name: \"Corn Flower Blue\", hex: \"#6495ED\" },\n  { name: \"Deep Sky Blue\", hex: \"#00BFFF\" },\n  { name: \"Dodger Blue\", hex: \"#1E90FF\" },\n  { name: \"Light Blue\", hex: \"#ADD8E6\" },\n  { name: \"Sky Blue\", hex: \"#87CEEB\" },\n  { name: \"Light Sky Blue\", hex: \"#87CEFA\" },\n  { name: \"Midnight Blue\", hex: \"#191970\" },\n  { name: \"Navy\", hex: \"#000080\" },\n  { name: \"Dark Blue\", hex: \"#00008B\" },\n  { name: \"Medium Blue\", hex: \"#0000CD\" },\n  { name: \"Blue\", hex: \"#0000FF\" },\n  { name: \"Royal Blue\", hex: \"#4169E1\" },\n  { name: \"Blue Violet\", hex: \"#8A2BE2\" },\n  { name: \"Indigo\", hex: \"#4B0082\" },\n  { name: \"Dark Slate Blue\", hex: \"#483D8B\" },\n  { name: \"Slate Blue\", hex: \"#6A5ACD\" },\n  { name: \"Medium Slate Blue\", hex: \"#7B68EE\" },\n  { name: \"Medium Purple\", hex: \"#9370DB\" },\n  { name: \"Dark Magenta\", hex: \"#8B008B\" },\n  { name: \"Dark Violet\", hex: \"#9400D3\" },\n  { name: \"Dark Orchid\", hex: \"#9932CC\" },\n  { name: \"Medium Orchid\", hex: \"#BA55D3\" },\n  { name: \"Purple\", hex: \"#800080\" },\n  { name: \"Thistle\", hex: \"#D8BFD8\" },\n  { name: \"Plum\", hex: \"#DDA0DD\" },\n  { name: \"Violet\", hex: \"#EE82EE\" },\n  { name: \"Magenta\", hex: \"#FF00FF\" },\n  { name: \"Orchid\", hex: \"#DA70D6\" },\n  { name: \"Medium Violet Red\", hex: \"#C71585\" },\n  { name: \"Pale Violet Red\", hex: \"#DB7093\" },\n  { name: \"Deep Pink\", hex: \"#FF1493\" },\n  { name: \"Hot Pink\", hex: \"#FF69B4\" },\n  { name: \"Light Pink\", hex: \"#FFB6C1\" },\n  { name: \"Pink\", hex: \"#FFC0CB\" },\n  { name: \"Antique White\", hex: \"#FAEBD7\" },\n  { name: \"Beige\", hex: \"#F5F5DC\" },\n  { name: \"Bisque\", hex: \"#FFE4C4\" },\n  { name: \"Blanched Almond\", hex: \"#FFEBCD\" },\n  { name: \"Wheat\", hex: \"#F5DEB3\" },\n  { name: \"Corn Silk\", hex: \"#FFF8DC\" },\n  { name: \"Lemon Chiffon\", hex: \"#FFFACD\" },\n  { name: \"Light Golden Rod Yellow\", hex: \"#FAFAD2\" },\n  { name: \"Light Yellow\", hex: \"#FFFFE0\" },\n  { name: \"Saddle Brown\", hex: \"#8B4513\" },\n  { name: \"Sienna\", hex: \"#A0522D\" },\n  { name: \"Chocolate\", hex: \"#D2691E\" },\n  { name: \"Peru\", hex: \"#CD853F\" },\n  { name: \"Sandy Brown\", hex: \"#F4A460\" },\n  { name: \"Burly Wood\", hex: \"#DEB887\" },\n  { name: \"Tan\", hex: \"#D2B48C\" },\n  { name: \"Rosy Brown\", hex: \"#BC8F8F\" },\n  { name: \"Moccasin\", hex: \"#FFE4B5\" },\n  { name: \"Navajo White\", hex: \"#FFDEAD\" },\n  { name: \"Peach Puff\", hex: \"#FFDAB9\" },\n  { name: \"Misty Rose\", hex: \"#FFE4E1\" },\n  { name: \"Lavender Blush\", hex: \"#FFF0F5\" },\n  { name: \"Linen\", hex: \"#FAF0E6\" },\n  { name: \"Old Lace\", hex: \"#FDF5E6\" },\n  { name: \"Papaya Whip\", hex: \"#FFEFD5\" },\n  { name: \"Sea Shell\", hex: \"#FFF5EE\" },\n  { name: \"Mint Cream\", hex: \"#F5FFFA\" },\n  { name: \"Slate Gray\", hex: \"#708090\" },\n  { name: \"Light Slate Gray\", hex: \"#778899\" },\n  { name: \"Light Steel Blue\", hex: \"#B0C4DE\" },\n  { name: \"Lavender\", hex: \"#E6E6FA\" },\n  { name: \"Floral White\", hex: \"#FFFAF0\" },\n  { name: \"Alice Blue\", hex: \"#F0F8FF\" },\n  { name: \"Ghost White\", hex: \"#F8F8FF\" },\n  { name: \"Honeydew\", hex: \"#F0FFF0\" },\n  { name: \"Ivory\", hex: \"#FFFFF0\" },\n  { name: \"Azure\", hex: \"#F0FFFF\" },\n  { name: \"Snow\", hex: \"#FFFAFA\" },\n  { name: \"Black\", hex: \"#000000\" },\n  { name: \"Dim Gray\", hex: \"#696969\" },\n  { name: \"Gray\", hex: \"#808080\" },\n  { name: \"Dark Gray\", hex: \"#A9A9A9\" },\n  { name: \"Silver\", hex: \"#C0C0C0\" },\n  { name: \"Light Gray\", hex: \"#D3D3D3\" },\n  { name: \"Gainsboro\", hex: \"#DCDCDC\" },\n  { name: \"White Smoke\", hex: \"#F5F5F5\" },\n  { name: \"White\", hex: \"#FFFFFF\" }\n];\n\n// Calculates color distance based on RGB values (Euclidean distance in RGB space)\nfunction colorDistance(hex1: string, hex2: string): number {\n  const rgb1 = hexToRgb(hex1);\n  const rgb2 = hexToRgb(hex2);\n  \n  if (!rgb1 || !rgb2) return Infinity;\n  \n  return Math.sqrt(\n    Math.pow(rgb1.r - rgb2.r, 2) + \n    Math.pow(rgb1.g - rgb2.g, 2) + \n    Math.pow(rgb1.b - rgb2.b, 2)\n  );\n}\n\n// Get the name of the closest matching color\nexport function getColorName(hexColor: string): string {\n  // Normalize the hex color\n  hexColor = hexColor.toUpperCase();\n  \n  // Add # if missing\n  if (!hexColor.startsWith('#')) {\n    hexColor = '#' + hexColor;\n  }\n  \n  // If exact match exists\n  const exactMatch = namedColors.find(c => c.hex.toUpperCase() === hexColor);\n  if (exactMatch) return exactMatch.name;\n  \n  // Find closest match\n  let closestMatch = namedColors[0];\n  let closestDistance = colorDistance(hexColor, closestMatch.hex);\n  \n  for (let i = 1; i < namedColors.length; i++) {\n    const distance = colorDistance(hexColor, namedColors[i].hex);\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestMatch = namedColors[i];\n    }\n  }\n  \n  return closestMatch.name;\n}\n","size_bytes":8066},"client/src/lib/localStorageService.ts":{"content":"import { User, InsertUser } from \"../types/User\";\nimport { Color } from \"../types/Color\";\nimport { Palette } from \"../types/Palette\";\n\n// Generate a simple id \nconst generateId = (): number => {\n  return Math.floor(Math.random() * 10000);\n};\n\n// User related functions\nexport const getUsers = (): User[] => {\n  const users = localStorage.getItem('users');\n  return users ? JSON.parse(users) : [];\n};\n\nexport const saveUsers = (users: User[]): void => {\n  localStorage.setItem('users', JSON.stringify(users));\n};\n\nexport const getCurrentUser = (): User | null => {\n  const currentUser = localStorage.getItem('currentUser');\n  return currentUser ? JSON.parse(currentUser) : null;\n};\n\nexport const saveCurrentUser = (user: User | null): void => {\n  if (user) {\n    localStorage.setItem('currentUser', JSON.stringify(user));\n  } else {\n    localStorage.removeItem('currentUser');\n  }\n};\n\nexport const registerUser = (userData: InsertUser): User => {\n  const users = getUsers();\n  \n  // Check if user already exists\n  const existingUser = users.find(user => user.username === userData.username);\n  if (existingUser) {\n    throw new Error('Username already exists');\n  }\n  \n  // Create new user\n  const newUser: User = {\n    id: generateId(),\n    ...userData\n  };\n  \n  // Save to local storage\n  saveUsers([...users, newUser]);\n  saveCurrentUser(newUser);\n  \n  return newUser;\n};\n\nexport const loginUser = (username: string, password: string): User => {\n  const users = getUsers();\n  \n  // Find user\n  const user = users.find(user => \n    user.username === username && user.password === password\n  );\n  \n  if (!user) {\n    throw new Error('Invalid username or password');\n  }\n  \n  // Save current user to localStorage\n  saveCurrentUser(user);\n  \n  return user;\n};\n\nexport const logoutUser = (): void => {\n  saveCurrentUser(null);\n};\n\n// Palette related functions\nexport const getPalettes = (): Palette[] => {\n  const palettes = localStorage.getItem('palettes');\n  return palettes ? JSON.parse(palettes) : [];\n};\n\nexport const savePalettes = (palettes: Palette[]): void => {\n  localStorage.setItem('palettes', JSON.stringify(palettes));\n};\n\nexport const getUserPalettes = (userId: number): Palette[] => {\n  const palettes = getPalettes();\n  return palettes.filter(palette => palette.userId === String(userId));\n};\n\nexport const savePalette = (name: string, colors: Color[], userId?: number): Palette => {\n  const palettes = getPalettes();\n  \n  const newPalette: Palette = {\n    id: String(generateId()),\n    name,\n    colors,\n    userId: userId ? String(userId) : undefined,\n    createdAt: new Date()\n  };\n  \n  savePalettes([...palettes, newPalette]);\n  \n  return newPalette;\n};\n\nexport const deletePalette = (id: string): void => {\n  const palettes = getPalettes();\n  const updatedPalettes = palettes.filter(palette => palette.id !== id);\n  savePalettes(updatedPalettes);\n};","size_bytes":2868},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":705},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\n// Simple QueryClient for client-side only state management\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":366},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/Header\";\nimport KeyboardShortcutsBar from \"@/components/KeyboardShortcutsBar\";\nimport ActionButtons from \"@/components/ActionButtons\";\nimport ColorCard from \"@/components/ColorCard\";\nimport OnboardingTour from \"@/components/modals/OnboardingTour\";\nimport ExportModal from \"@/components/modals/ExportModal\";\nimport AdjustColorModal from \"@/components/modals/AdjustColorModal\";\nimport { usePalette } from \"@/contexts/PaletteContext\";\nimport { type Color } from \"../types/Color\";\nimport { Helmet } from \"react-helmet-async\";\n\nexport default function Home() {\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [showAdjustModal, setShowAdjustModal] = useState(false);\n  const [activeColorIndex, setActiveColorIndex] = useState<number | null>(null);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);\n  \n  const { palette, generatePalette, addColor, resetPalette, updateColor, reorderColors } = usePalette();\n  const { toast } = useToast();\n  const [_, navigate] = useLocation();\n  \n  console.log('Home component rendered with palette:', palette);\n\n  useEffect(() => {\n    // Check if first visit\n    const hasVisited = localStorage.getItem(\"hasVisitedPalettePro\");\n    if (!hasVisited) {\n      setShowOnboarding(true);\n      localStorage.setItem(\"hasVisitedPalettePro\", \"true\");\n    }\n    \n    // Setup space key handler\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.code === \"Space\" && \n          document.activeElement?.tagName !== \"INPUT\" && \n          document.activeElement?.tagName !== \"TEXTAREA\" &&\n          !showOnboarding && \n          !showExportModal && \n          !showAdjustModal) {\n        e.preventDefault();\n        handleGeneratePalette();\n      }\n    };\n    \n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [showOnboarding, showExportModal, showAdjustModal, generatePalette]);\n\n  const handleGeneratePalette = () => {\n    // Call the generate palette function from context\n    generatePalette();\n    \n    toast({\n      title: \"New palette generated!\",\n      description: \"Press spacebar for another one.\",\n      duration: 2000,\n    });\n  };\n\n  const handleSavePalette = () => {\n    // Save to localStorage\n    const savedPalettes = JSON.parse(localStorage.getItem(\"savedPalettes\") || \"[]\");\n    const newPalette = {\n      id: Date.now(),\n      colors: palette,\n      createdAt: new Date().toISOString(),\n    };\n    \n    savedPalettes.push(newPalette);\n    localStorage.setItem(\"savedPalettes\", JSON.stringify(savedPalettes));\n    \n    toast({\n      title: \"Palette saved!\",\n      description: \"Your palette has been saved to local storage.\",\n      duration: 2000,\n    });\n  };\n\n  const handleHelp = () => {\n    setShowOnboarding(true);\n  };\n\n  const handleExport = () => {\n    setShowExportModal(true);\n  };\n  \n  const handleVisualize = () => {\n    // Save current palette to localStorage for the visualizer to use\n    localStorage.setItem('currentPalette', JSON.stringify(palette));\n    \n    // Navigate to visualizer page\n    navigate('/visualize');\n  };\n\n  const handleAdjustColor = (index: number) => {\n    setActiveColorIndex(index);\n    setShowAdjustModal(true);\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n  \n  // Drag and drop handlers for mobile and desktop\n  const handleDragStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n  \n  const handleDragOver = (e: React.DragEvent, index: number) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n  \n  const handleDrop = (e: React.DragEvent, targetIndex: number) => {\n    e.preventDefault();\n    if (draggedIndex !== null && draggedIndex !== targetIndex) {\n      reorderColors(draggedIndex, targetIndex);\n      \n      toast({\n        title: \"Colors reordered\",\n        description: \"Palette order has been updated\",\n        duration: 2000,\n      });\n    }\n  };\n  \n  const handleDragEnd = () => {\n    setDraggedIndex(null);\n  };\n  \n  // Touch events for mobile drag and drop\n  const handleTouchStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n  \n  const handleTouchMove = (e: React.TouchEvent) => {\n    // Preview of movement handled by CSS\n  };\n  \n  const handleTouchEnd = (e: React.TouchEvent, targetIndex: number) => {\n    if (draggedIndex !== null && draggedIndex !== targetIndex) {\n      reorderColors(draggedIndex, targetIndex);\n      \n      toast({\n        title: \"Colors reordered\",\n        description: \"Palette order has been updated\",\n        duration: 2000,\n      });\n    }\n    setDraggedIndex(null);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden bg-gray-50\">\n      <Helmet>\n        <title>Coolors.in - Free Color Palette Generator | Create Beautiful Color Schemes</title>\n        <meta name=\"description\" content=\"Create and explore beautiful color combinations with Coolors.in, the free color palette generator. Design with confidence using our intuitive color tools.\" />\n        <meta name=\"keywords\" content=\"color palette generator, color scheme, color combinations, design tools\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/\" />\n        {/* Dynamic structured data for the home page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebApplication\",\n            \"name\": \"Coolors.in Color Palette Generator\",\n            \"url\": \"https://coolors.in/\",\n            \"description\": \"Create beautiful color combinations with our intuitive color generator\",\n            \"applicationCategory\": \"DesignApplication\",\n            \"operatingSystem\": \"Any\"\n          })}\n        </script>\n      </Helmet>\n      <Header \n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={toggleMobileMenu}\n      />\n      \n      <KeyboardShortcutsBar />\n      \n      {/* Mobile View: Stack colors vertically with drag support */}\n      <div className=\"flex-1 flex flex-col overflow-auto md:hidden\" id=\"mobilePaletteContainer\">\n        {palette.map((color, index) => (\n          <div \n            key={index}\n            className={`relative mb-10 ${draggedIndex === index ? 'opacity-60 border-2 border-dashed border-gray-400' : ''}`}\n            draggable={true}\n            onDragStart={() => handleDragStart(index)}\n            onDragOver={(e) => handleDragOver(e, index)}\n            onDrop={(e) => handleDrop(e, index)}\n            onDragEnd={handleDragEnd}\n            onTouchStart={() => handleTouchStart(index)}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={(e) => handleTouchEnd(e, index)}\n          >\n            {/* Clear separation between palettes */}\n            <div className=\"w-full flex flex-col\">\n              <div className=\"bg-gray-100 dark:bg-gray-800 py-1 px-2 rounded-t-md text-xs opacity-80 text-center shadow-sm\">\n                Color {index+1} \n                <span className=\"ml-2 inline-flex items-center text-gray-500\">\n                  <i className=\"fas fa-grip-lines text-xs mr-1\"></i>\n                  drag to reorder\n                </span>\n              </div>\n              <div className=\"absolute top-10 left-2 z-10 p-3 rounded-full bg-black bg-opacity-50 touch-manipulation cursor-grab active:cursor-grabbing\">\n                <i className=\"fas fa-grip-lines text-sm text-white\"></i>\n              </div>\n              <ColorCard \n                color={color}\n                index={index}\n                onAdjustColor={() => handleAdjustColor(index)}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Desktop View: Colors side by side with drag support */}\n      <div className=\"hidden md:flex flex-1 flex-row overflow-hidden\" id=\"desktopPaletteContainer\">\n        {palette.map((color, index) => (\n          <div \n            key={index}\n            className={`relative flex-1 ${draggedIndex === index ? 'opacity-60 border-2 border-dashed border-gray-400' : ''}`}\n            draggable={true}\n            onDragStart={() => handleDragStart(index)}\n            onDragOver={(e) => handleDragOver(e, index)}\n            onDrop={(e) => handleDrop(e, index)}\n            onDragEnd={handleDragEnd}\n            onTouchStart={() => handleTouchStart(index)}\n            onTouchMove={handleTouchMove}\n            onTouchEnd={(e) => handleTouchEnd(e, index)}\n          >\n            <div className=\"absolute top-3 left-3 z-20 p-3 rounded-full bg-black bg-opacity-40 cursor-grab active:cursor-grabbing transition-opacity opacity-70 hover:opacity-100\">\n              <i className=\"fas fa-grip-lines text-white\"></i>\n            </div>\n            <ColorCard \n              color={color}\n              index={index}\n              onAdjustColor={() => handleAdjustColor(index)}\n            />\n          </div>\n        ))}\n        \n        <div className=\"flex items-center justify-center w-16 bg-gray-100 border-l border-gray-300 hover:bg-gray-200 cursor-pointer transition-colors\"\n            onClick={() => addColor()}>\n          <div className=\"flex flex-col items-center justify-center text-gray-500 space-y-2\">\n            <i className=\"fas fa-plus text-xl\"></i>\n            <span className=\"text-xs font-medium\">Add</span>\n          </div>\n        </div>\n      </div>\n      \n      <ActionButtons \n        onGenerate={handleGeneratePalette}\n        onAddColor={addColor}\n        onClearAll={resetPalette}\n      />\n      \n      {showOnboarding && <OnboardingTour onClose={() => setShowOnboarding(false)} />}\n      \n      {showExportModal && \n        <ExportModal \n          palette={palette} \n          onClose={() => setShowExportModal(false)} \n        />\n      }\n      \n      {showAdjustModal && activeColorIndex !== null &&\n        <AdjustColorModal \n          color={palette[activeColorIndex]} \n          onClose={() => setShowAdjustModal(false)}\n          onApply={(updatedColor: Color) => {\n            updateColor(activeColorIndex, updatedColor);\n            setShowAdjustModal(false);\n          }}\n        />\n      }\n    </div>\n  );\n}\n","size_bytes":10494},"client/src/pages/Landing.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { \n  RefreshCw, \n  Eye, \n  Image as ImageIcon, \n  BookOpen, \n  HelpCircle, \n  Palette\n} from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\nimport Footer from '@/components/Footer';\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Helmet>\n        <title>Coolors.in - Color Palette Generator</title>\n        <meta name=\"description\" content=\"Create beautiful color palettes with our free color palette generator. Professional tools for designers and developers.\" />\n        <meta name=\"keywords\" content=\"color palette generator, color scheme, design tools\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/\" />\n      </Helmet>\n\n      <div className=\"container mx-auto px-4 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          {/* Logo and Title */}\n          <div className=\"mb-12\">\n            <div className=\"w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <Palette className=\"w-8 h-8 text-white\" />\n            </div>\n            <h1 className=\"text-5xl font-bold text-gray-900 mb-4\">\n              Coolors.in\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              The fast color palette generator for designers and developers\n            </p>\n          </div>\n\n          {/* Main Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n            <Link href=\"/generate\">\n              <div className=\"group p-8 bg-gray-50 rounded-2xl hover:bg-blue-50 transition-all cursor-pointer border-2 border-transparent hover:border-blue-200\">\n                <RefreshCw className=\"w-12 h-12 text-blue-600 mx-auto mb-4 group-hover:rotate-180 transition-transform duration-500\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Generate Palette</h3>\n                <p className=\"text-gray-600\">Create beautiful color combinations</p>\n              </div>\n            </Link>\n\n            <Link href=\"/visualize\">\n              <div className=\"group p-8 bg-gray-50 rounded-2xl hover:bg-green-50 transition-all cursor-pointer border-2 border-transparent hover:border-green-200\">\n                <Eye className=\"w-12 h-12 text-green-600 mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Visualize</h3>\n                <p className=\"text-gray-600\">Preview palettes in real designs</p>\n              </div>\n            </Link>\n\n            <Link href=\"/image-palette\">\n              <div className=\"group p-8 bg-gray-50 rounded-2xl hover:bg-purple-50 transition-all cursor-pointer border-2 border-transparent hover:border-purple-200\">\n                <ImageIcon className=\"w-12 h-12 text-purple-600 mx-auto mb-4 group-hover:scale-110 transition-transform\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">From Image</h3>\n                <p className=\"text-gray-600\">Extract colors from images</p>\n              </div>\n            </Link>\n          </div>\n\n          {/* Secondary Actions */}\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            <Link href=\"/pricing\">\n              <div className=\"flex items-center gap-2 px-6 py-3 bg-blue-50 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors cursor-pointer\">\n                <span>💎</span>\n                <span>Premium Features</span>\n              </div>\n            </Link>\n            <Link href=\"/designers-guide\">\n              <div className=\"flex items-center gap-2 px-6 py-3 text-gray-700 hover:text-blue-600 transition-colors cursor-pointer\">\n                <BookOpen className=\"w-5 h-5\" />\n                <span>Designer's Guide</span>\n              </div>\n            </Link>\n            <Link href=\"/faq\">\n              <div className=\"flex items-center gap-2 px-6 py-3 text-gray-700 hover:text-blue-600 transition-colors cursor-pointer\">\n                <HelpCircle className=\"w-5 h-5\" />\n                <span>FAQ</span>\n              </div>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":4266},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Loader2, ChevronLeft } from \"lucide-react\";\n\n// Extend the user schema to add validation rules\nconst authFormSchema = insertUserSchema.extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype AuthFormValues = z.infer<typeof authFormSchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { user, loginMutation, registerMutation, isLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState<\"login\" | \"register\">(\"login\");\n\n  // If user is already logged in, redirect to home page\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const loginForm = useForm<AuthFormValues>({\n    resolver: zodResolver(authFormSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<AuthFormValues>({\n    resolver: zodResolver(authFormSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onLoginSubmit = (data: AuthFormValues) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: AuthFormValues) => {\n    registerMutation.mutate(data);\n  };\n\n  const isPending = loginMutation.isPending || registerMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Back to Home Navigation */}\n      <div className=\"border-b border-gray-200 bg-white\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-blue-600 hover:text-blue-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex min-h-screen flex-col md:flex-row\">\n      {/* Hero Section */}\n      <div className=\"w-full md:w-1/2 bg-gradient-to-b from-primary/20 to-primary/5 p-8 flex items-center justify-center\">\n        <div className=\"max-w-md space-y-4 text-center md:text-left\">\n          <h1 className=\"text-4xl font-bold tracking-tight\">Color Palette Generator</h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Create beautiful color palettes for your designs. Save your favorites and access them anytime.\n          </p>\n          <div className=\"flex justify-center md:justify-start space-x-2 pt-4\">\n            <div className=\"w-8 h-8 rounded-full bg-red-500\"></div>\n            <div className=\"w-8 h-8 rounded-full bg-yellow-500\"></div>\n            <div className=\"w-8 h-8 rounded-full bg-green-500\"></div>\n            <div className=\"w-8 h-8 rounded-full bg-blue-500\"></div>\n            <div className=\"w-8 h-8 rounded-full bg-purple-500\"></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Auth Form Section */}\n      <div className=\"w-full md:w-1/2 p-8 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Welcome</CardTitle>\n            <CardDescription>\n              Sign in to your account or create a new one to save your color palettes.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"login\" | \"register\")}>\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\">Register</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter your username\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n                      {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                      Sign In\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={registerForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Choose a username\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <Input type=\"password\" placeholder=\"Choose a password\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n                      {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                      Create Account\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n          <CardFooter className=\"text-sm text-center text-muted-foreground\">\n            By logging in, you agree to our <span \n              className=\"text-blue-600 hover:underline cursor-pointer\"\n              onClick={() => window.location.href = '/privacy-policy'}\n            >Privacy Policy</span>.\n          </CardFooter>\n        </Card>\n      </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7949},"client/src/pages/designers-guide.tsx":{"content":"import { ChevronLeft } from 'lucide-react';\nimport { Link } from 'wouter';\nimport Footer from '../components/Footer';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function DesignersGuide() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-50 to-white flex flex-col\">\n      <Helmet>\n        <title>Designer's Guide to Color Theory | Coolors.in</title>\n        <meta name=\"description\" content=\"Learn about color theory, harmonies, and how to create beautiful, effective color palettes for your design projects with our comprehensive designer's guide.\" />\n        <meta name=\"keywords\" content=\"color theory, color harmonies, monochromatic, analogous, complementary, triadic, tetradic, designer guide\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/designers-guide\" />\n        {/* Dynamic structured data for the designer's guide page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Article\",\n            \"headline\": \"Choosing the Right Color Palette: A Designer's Guide\",\n            \"description\": \"Learn about color theory, harmonies, and how to create beautiful, effective color palettes for your design projects.\",\n            \"author\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\"\n            },\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\",\n              \"logo\": {\n                \"@type\": \"ImageObject\",\n                \"url\": \"https://coolors.in/logo.svg\"\n              }\n            },\n            \"mainEntityOfPage\": {\n              \"@type\": \"WebPage\",\n              \"@id\": \"https://coolors.in/designers-guide\"\n            }\n          })}\n        </script>\n      </Helmet>\n      <header className=\"border-b border-gray-200 bg-white shadow-sm\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-blue-600 hover:text-blue-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1 container mx-auto px-4 py-8 prose prose-lg max-w-4xl\">\n        <div className=\"bg-white p-6 sm:p-10 rounded-xl shadow-md\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-6 bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent\">\n            Choosing the Right Color Palette: A Designer's Guide\n          </h1>\n\n          <div className=\"space-y-6\">\n            <p className=\"text-gray-700\">\n              Picking the right color palette can make or break a design. Whether you're building a website, \n              crafting a brand identity, or designing an app UI, your choice of colors directly influences \n              how your audience perceives your work. That's where color theory comes in.\n            </p>\n\n            <p className=\"text-gray-700\">\n              Color theory offers practical rules and harmonies to create visually appealing combinations. \n              One popular method is the <strong className=\"text-blue-600\">monochromatic palette</strong>, which uses different \n              shades and tints of a single color — perfect for minimalist designs. <strong className=\"text-blue-600\">Analogous palettes</strong>, \n              which combine neighboring colors on the color wheel (like blue, blue-green, and green), \n              offer smooth transitions and natural aesthetics.\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-8\">\n              <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 p-5 rounded-lg border border-blue-200\">\n                <h3 className=\"text-xl font-semibold text-blue-700 mb-3\">Monochromatic</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses variations in lightness and saturation of a single color. \n                  Perfect for clean, minimal interfaces where you want subtle distinction without distraction.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-blue-900\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-700\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-300\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-100\"></div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-green-50 to-blue-100 p-5 rounded-lg border border-green-200\">\n                <h3 className=\"text-xl font-semibold text-green-700 mb-3\">Analogous</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses colors adjacent to each other on the color wheel.\n                  Creates harmonious, comfortable designs that work well for nature-inspired themes.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-blue-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-teal-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-green-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-lime-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-yellow-500\"></div>\n                </div>\n              </div>\n            </div>\n\n            <p className=\"text-gray-700\">\n              Need contrast? Go for a <strong className=\"text-blue-600\">complementary palette</strong>, which pairs colors from opposite \n              sides of the wheel — like purple and yellow. For a more dynamic twist, try a <strong className=\"text-blue-600\">split-complementary palette</strong>: \n              one base color and two adjacent to its complement. It's vibrant but more forgiving than direct complements.\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-8\">\n              <div className=\"bg-gradient-to-br from-purple-50 to-yellow-100 p-5 rounded-lg border border-purple-200\">\n                <h3 className=\"text-xl font-semibold text-purple-700 mb-3\">Complementary</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses colors from opposite sides of the color wheel.\n                  Creates strong contrast and impact – ideal for call-to-action buttons or focal points.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-purple-600\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-purple-400\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-gray-300\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-yellow-400\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-yellow-600\"></div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-blue-50 to-red-100 p-5 rounded-lg border border-blue-200\">\n                <h3 className=\"text-xl font-semibold text-blue-700 mb-3\">Split-Complementary</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses a base color and two colors adjacent to its complement.\n                  Provides vibrant contrast while being more balanced than complementary schemes.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-blue-600\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-400\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-gray-300\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-red-400\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-amber-400\"></div>\n                </div>\n              </div>\n            </div>\n\n            <p className=\"text-gray-700\">\n              <strong className=\"text-blue-600\">Triadic and tetradic palettes</strong> use three or four evenly spaced colors on the wheel, \n              giving balanced contrast and variety. These are ideal for bold branding or creative projects.\n            </p>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-8\">\n              <div className=\"bg-gradient-to-br from-red-50 to-blue-100 p-5 rounded-lg border border-red-200\">\n                <h3 className=\"text-xl font-semibold text-red-700 mb-3\">Triadic</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses three colors equally spaced around the color wheel.\n                  Creates balanced, vibrant color schemes perfect for playful, energetic designs.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-red-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-yellow-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-500\"></div>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-br from-purple-50 to-green-100 p-5 rounded-lg border border-purple-200\">\n                <h3 className=\"text-xl font-semibold text-purple-700 mb-3\">Tetradic</h3>\n                <p className=\"text-gray-700 text-sm\">\n                  Uses four colors arranged into two complementary pairs.\n                  Rich color scheme offering many possibilities for variation and accent colors.\n                </p>\n                <div className=\"mt-3 flex space-x-2\">\n                  <div className=\"h-6 w-6 rounded-full bg-purple-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-green-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-red-500\"></div>\n                  <div className=\"h-6 w-6 rounded-full bg-blue-500\"></div>\n                </div>\n              </div>\n            </div>\n\n            <p className=\"text-gray-700\">\n              At Coolors.in, you can experiment with all these rules using our easy palette generator. \n              Not sure where to start? Just pick a base color and choose a rule — we'll handle the rest.\n            </p>\n\n            <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white p-6 rounded-lg text-center my-8\">\n              <h3 className=\"text-xl font-bold mb-2\">Start exploring colors like a pro!</h3>\n              <p className=\"mb-4\">Bring your design ideas to life with the perfect palette</p>\n              <div\n                className=\"inline-block bg-white text-blue-600 px-6 py-2 rounded-lg font-medium hover:bg-blue-50 transition-colors cursor-pointer\"\n                onClick={() => window.location.href = '/'}\n              >\n                Try Our Color Generator\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":11150},"client/src/pages/faq.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft, Mail } from 'lucide-react';\nimport Footer from '@/components/Footer';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function FAQPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <Helmet>\n        <title>Frequently Asked Questions | Coolors.in</title>\n        <meta name=\"description\" content=\"Find answers to common questions about Coolors.in color palette generator. Learn how to use our tool effectively and get the most out of your design process.\" />\n        <meta name=\"keywords\" content=\"FAQ, color palette generator, coolors help, design tools FAQ\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/faq\" />\n        {/* Dynamic structured data for the FAQ page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"FAQPage\",\n            \"mainEntity\": [\n              {\n                \"@type\": \"Question\",\n                \"name\": \"What is Coolors.in?\",\n                \"acceptedAnswer\": {\n                  \"@type\": \"Answer\",\n                  \"text\": \"Coolors.in is a free online color palette generator that helps you create aesthetic color combinations for your design projects.\"\n                }\n              },\n              {\n                \"@type\": \"Question\",\n                \"name\": \"Do I need to create an account?\",\n                \"acceptedAnswer\": {\n                  \"@type\": \"Answer\",\n                  \"text\": \"No, you can use the tool right away without any sign-up or login.\"\n                }\n              },\n              {\n                \"@type\": \"Question\",\n                \"name\": \"Can I use the palettes for commercial use?\",\n                \"acceptedAnswer\": {\n                  \"@type\": \"Answer\",\n                  \"text\": \"Yes, all palettes are free to use for personal or commercial projects.\"\n                }\n              }\n            ]\n          })}\n        </script>\n      </Helmet>\n      <div className=\"max-w-3xl mx-auto bg-white rounded-xl shadow-md p-6 md:p-8 mb-6 flex-grow\">\n        <header className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n              Frequently Asked Questions\n            </h1>\n            <div \n              className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors cursor-pointer\"\n              onClick={() => window.location.href = '/'}\n            >\n              <ArrowLeft className=\"mr-1\" size={20} />\n              Back to Home\n            </div>\n          </div>\n        </header>\n\n        <div className=\"space-y-6\">\n          <div className=\"border-b border-gray-200 pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">1. What is Coolors.in?</h2>\n            <p className=\"text-gray-600\">\n              Coolors.in is a free online color palette generator that helps you create aesthetic color combinations for your design projects.\n            </p>\n          </div>\n          \n          <div className=\"border-b border-gray-200 pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">2. Do I need to create an account?</h2>\n            <p className=\"text-gray-600\">\n              No, you can use the tool right away without any sign-up or login.\n            </p>\n          </div>\n          \n          <div className=\"border-b border-gray-200 pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">3. Can I copy or download the color palettes?</h2>\n            <p className=\"text-gray-600\">\n              Yes, you can copy hex codes and soon we'll offer options to export palettes as images or JSON files.\n            </p>\n          </div>\n          \n          <div className=\"border-b border-gray-200 pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">4. Can I use the palettes for commercial use?</h2>\n            <p className=\"text-gray-600\">\n              Yes, all palettes are free to use for personal or commercial projects.\n            </p>\n          </div>\n          \n          <div className=\"border-b border-gray-200 pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">5. Does Coolors.in store my data?</h2>\n            <p className=\"text-gray-600\">\n              No personal data is stored. We use anonymous tracking through cookies and analytics tools. Read our <span className=\"text-blue-600 hover:underline cursor-pointer\" onClick={() => window.location.href = '/privacy-policy'}>Privacy Policy</span> for details.\n            </p>\n          </div>\n          \n          <div className=\"pb-5\">\n            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">6. I have a suggestion or feedback. How can I reach you?</h2>\n            <p className=\"text-gray-600 flex items-center\">\n              Email us anytime at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:underline mx-1 flex items-center\"><Mail size={16} className=\"mr-1\" /> coolors.in@gmail.com</a> — we'd love to hear from you!\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":5363},"client/src/pages/image-palette.tsx":{"content":"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Color } from '@/types/Color';\nimport { Upload, Image as ImageIcon, ArrowLeft, RefreshCw, X, Info, ChevronLeft } from 'lucide-react';\nimport { usePalette } from '@/contexts/PaletteContext';\nimport { hexToRgb, getColorName, rgbToHex } from '@/lib/colorUtils';\nimport { useToast } from '@/hooks/use-toast';\nimport Footer from '@/components/Footer';\nimport { Helmet } from 'react-helmet-async';\n\nexport default function ImagePalette() {\n  const { setPalette } = usePalette();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  \n  const [uploadedImage, setUploadedImage] = useState<string | null>(null);\n  const [extractedPalette, setExtractedPalette] = useState<Color[]>([]);\n  const [isExtracting, setIsExtracting] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showInstructions, setShowInstructions] = useState<boolean>(false);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Show instructions popup when component loads\n  useEffect(() => {\n    // Check if this is the first visit to this page\n    const hasSeenInstructions = localStorage.getItem('hasSeenImagePaletteInstructions');\n    \n    if (!hasSeenInstructions) {\n      setShowInstructions(true);\n      localStorage.setItem('hasSeenImagePaletteInstructions', 'true');\n    } else {\n      // Show a toast notification anyway as a brief reminder\n      toast({\n        title: \"Image to Palette Generator\",\n        description: \"Upload an image to extract a color palette from its dominant colors!\",\n        action: (\n          <div className=\"flex items-center gap-2\">\n            <Info size={16} />\n          </div>\n        )\n      });\n    }\n  }, [toast]);\n  \n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setError(null);\n    const file = e.target.files?.[0];\n    if (!file) return;\n    \n    // Check if file is an image\n    if (!file.type.startsWith('image/')) {\n      setError('Please upload an image file (JPEG, PNG, etc.)');\n      return;\n    }\n    \n    const reader = new FileReader();\n    reader.onload = (event) => {\n      setUploadedImage(event.target?.result as string);\n      setExtractedPalette([]);\n    };\n    reader.onerror = () => {\n      setError('Failed to read the image file. Please try again.');\n    };\n    reader.readAsDataURL(file);\n  };\n  \n  const extractColors = useCallback(() => {\n    if (!uploadedImage || !canvasRef.current) return;\n    \n    setIsExtracting(true);\n    setError(null);\n    \n    const img = new Image();\n    img.crossOrigin = 'Anonymous';\n    \n    img.onload = () => {\n      const canvas = canvasRef.current!;\n      const ctx = canvas.getContext('2d');\n      \n      if (!ctx) {\n        setError('Canvas context not supported in your browser.');\n        setIsExtracting(false);\n        return;\n      }\n      \n      // Set canvas dimensions to match image\n      canvas.width = img.width;\n      canvas.height = img.height;\n      \n      // Draw image to canvas\n      ctx.drawImage(img, 0, 0, img.width, img.height);\n      \n      try {\n        // Get pixel data from the canvas\n        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n        \n        // Sample pixels and create color map\n        const colorMap: { [key: string]: number } = {};\n        const pixelCount = imageData.length / 4;\n        const sampleRate = Math.max(1, Math.floor(pixelCount / 10000)); // Sample at most 10,000 pixels\n        \n        for (let i = 0; i < pixelCount; i += sampleRate) {\n          const offset = i * 4;\n          const r = imageData[offset];\n          const g = imageData[offset + 1];\n          const b = imageData[offset + 2];\n          \n          // Skip transparent pixels\n          if (imageData[offset + 3] < 128) continue;\n          \n          // Convert to hex\n          const hex = rgbToHex(r, g, b);\n          \n          // Quantize colors to reduce variations\n          const quantizedHex = quantizeColor(hex, 24); // Group similar colors together\n          \n          if (colorMap[quantizedHex]) {\n            colorMap[quantizedHex]++;\n          } else {\n            colorMap[quantizedHex] = 1;\n          }\n        }\n        \n        // Sort colors by frequency and take the top 5\n        const sortedColors = Object.entries(colorMap)\n          .sort((a, b) => b[1] - a[1])\n          .map(([hex]) => hex)\n          .slice(0, 5);\n        \n        // Create Color objects\n        const palette: Color[] = sortedColors.map(hex => {\n          const rgb = hexToRgb(hex) || { r: 0, g: 0, b: 0 };\n          const name = getColorName(hex);\n          return {\n            hex,\n            rgb,\n            locked: false,\n            name\n          };\n        });\n        \n        setExtractedPalette(palette);\n      } catch (err) {\n        console.error('Error extracting colors:', err);\n        setError('Failed to extract colors from the image.');\n      }\n      \n      setIsExtracting(false);\n    };\n    \n    img.onerror = () => {\n      setError('Failed to load the image. Please try another one.');\n      setIsExtracting(false);\n    };\n    \n    img.src = uploadedImage;\n  }, [uploadedImage]);\n  \n  const useExtractedPalette = () => {\n    if (extractedPalette.length > 0) {\n      setPalette(extractedPalette);\n      \n      // Show success toast\n      toast({\n        title: \"Palette Applied!\",\n        description: \"The extracted colors have been applied to your palette\",\n        variant: \"default\"\n      });\n      \n      // Use wouter navigation instead of window.location\n      setLocation('/');\n    }\n  };\n  \n  // Using imported rgbToHex function from colorUtils.ts\n  \n  // Helper function to quantize colors (reduce color space)\n  const quantizeColor = (hex: string, levels: number): string => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    \n    const factor = 255 / (levels - 1);\n    \n    const qr = Math.round(Math.round(r / factor) * factor);\n    const qg = Math.round(Math.round(g / factor) * factor);\n    const qb = Math.round(Math.round(b / factor) * factor);\n    \n    return rgbToHex(qr, qg, qb);\n  };\n  \n  const triggerFileInput = () => {\n    if (fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <Helmet>\n        <title>Image to Palette Generator | Coolors.in</title>\n        <meta name=\"description\" content=\"Extract color palettes from your images. Upload any image and automatically generate a harmonious color palette based on the dominant colors.\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/image-palette\" />\n        {/* Structured data for tool page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebApplication\",\n            \"name\": \"Image to Palette Generator\",\n            \"applicationCategory\": \"DesignApplication\",\n            \"operatingSystem\": \"Web\",\n            \"description\": \"Extract color palettes from your images. Upload any image and automatically generate a harmonious color palette based on the dominant colors.\",\n            \"offers\": {\n              \"@type\": \"Offer\",\n              \"price\": \"0\",\n              \"priceCurrency\": \"USD\"\n            },\n            \"featureList\": [\n              \"Extract color palettes from images\",\n              \"Identify dominant colors\",\n              \"Transfer extracted colors to palette generator\",\n              \"Export color palettes in various formats\"\n            ]\n          })}\n        </script>\n      </Helmet>\n      <header className=\"mb-4 sm:mb-8\">\n        <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2 sm:gap-0\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n            Image to Palette\n          </h1>\n          <div\n            className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors text-sm sm:text-base cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1\" size={18} />\n            Back to Home\n          </div>\n        </div>\n        <p className=\"text-xs sm:text-sm text-gray-600 mt-1 sm:mt-2\">\n          Upload an image to extract a color palette from its dominant colors.\n        </p>\n      </header>\n      \n      <div className=\"bg-white rounded-xl shadow-lg p-4 sm:p-6 mb-6 sm:mb-8\">\n        <div className=\"flex flex-col items-center\">\n          <input \n            type=\"file\" \n            ref={fileInputRef}\n            className=\"hidden\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n          />\n          \n          <button\n            onClick={triggerFileInput}\n            className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow-lg hover:shadow-xl transition-all flex items-center gap-1 sm:gap-2 mb-4 sm:mb-6 text-sm sm:text-base\"\n          >\n            <Upload size={16} className=\"sm:w-[20px] sm:h-[20px]\" />\n            {uploadedImage ? 'Upload Different Image' : 'Upload Image'}\n          </button>\n          \n          {error && (\n            <div className=\"bg-red-50 text-red-600 p-3 sm:p-4 rounded-lg mb-4 sm:mb-6 w-full text-xs sm:text-sm\">\n              {error}\n            </div>\n          )}\n          \n          {uploadedImage && (\n            <div className=\"w-full max-w-2xl mx-auto mb-6\">\n              <div className=\"relative rounded-lg overflow-hidden mb-4\">\n                <img \n                  src={uploadedImage} \n                  alt=\"Uploaded\" \n                  className=\"w-full object-contain max-h-[400px]\" \n                />\n              </div>\n              \n              <button\n                onClick={extractColors}\n                disabled={isExtracting}\n                className=\"bg-white text-gray-800 border border-gray-300 px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow hover:shadow-md transition-all flex items-center gap-1 sm:gap-2 mx-auto text-sm sm:text-base\"\n              >\n                {isExtracting ? (\n                  <>\n                    <RefreshCw size={16} className=\"sm:w-[18px] sm:h-[18px] animate-spin\" />\n                    <span>Extracting...</span>\n                  </>\n                ) : (\n                  <>\n                    <ImageIcon size={16} className=\"sm:w-[18px] sm:h-[18px]\" />\n                    <span>Extract Colors</span>\n                  </>\n                )}\n              </button>\n            </div>\n          )}\n          \n          {extractedPalette.length > 0 && (\n            <div className=\"w-full\">\n              <h2 className=\"text-lg sm:text-xl font-bold text-gray-800 mb-3 sm:mb-4\">Extracted Palette</h2>\n              \n              <div className=\"flex h-16 sm:h-24 mb-4 sm:mb-6 rounded-lg overflow-hidden shadow-md\">\n                {extractedPalette.map((color, index) => (\n                  <div \n                    key={index} \n                    className=\"flex-1\" \n                    style={{ backgroundColor: color.hex }}\n                  >\n                    <div className=\"h-full flex items-end justify-center p-1 sm:p-2\">\n                      <div className=\"text-center\">\n                        <span \n                          className={`text-[10px] sm:text-xs font-medium px-1.5 sm:px-2 py-0.5 sm:py-1 rounded bg-white bg-opacity-30 ${\n                            parseInt(color.hex.slice(1), 16) > 0xFFFFFF / 2 ? 'text-gray-800' : 'text-white'\n                          }`}\n                        >\n                          {color.hex}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <button\n                onClick={useExtractedPalette}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white px-4 sm:px-6 py-2 sm:py-3 rounded-lg shadow-lg hover:shadow-xl transition-all flex items-center gap-1 sm:gap-2 mx-auto text-sm sm:text-base\"\n              >\n                Use This Palette\n              </button>\n            </div>\n          )}\n          \n          {/* Hidden canvas for image processing */}\n          <canvas ref={canvasRef} className=\"hidden\" />\n        </div>\n      </div>\n      \n      {/* Footer */}\n      <Footer />\n      \n      {/* Instructions Modal */}\n      {showInstructions && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-xl shadow-xl max-w-md w-full p-4 sm:p-6 relative\">\n            <button \n              onClick={() => setShowInstructions(false)}\n              className=\"absolute top-2 sm:top-4 right-2 sm:right-4 text-gray-500 hover:text-gray-700\"\n              aria-label=\"Close\"\n            >\n              <X size={18} className=\"sm:w-[20px] sm:h-[20px]\" />\n            </button>\n            \n            <h2 className=\"text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4\">How to Use Image to Palette</h2>\n            \n            <div className=\"space-y-3 sm:space-y-4 text-gray-600 text-xs sm:text-sm\">\n              <div className=\"flex items-start gap-2 sm:gap-3\">\n                <div className=\"bg-blue-100 p-1.5 sm:p-2 rounded-full flex-shrink-0\">\n                  <Upload size={16} className=\"text-blue-600 sm:w-[18px] sm:h-[18px]\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-gray-800 text-sm sm:text-base\">1. Upload an Image</h3>\n                  <p>Click the upload button and select any image from your device.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-2 sm:gap-3\">\n                <div className=\"bg-indigo-100 p-1.5 sm:p-2 rounded-full flex-shrink-0\">\n                  <ImageIcon size={16} className=\"text-indigo-600 sm:w-[18px] sm:h-[18px]\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-gray-800 text-sm sm:text-base\">2. Extract Colors</h3>\n                  <p>Click \"Extract Colors\" to analyze your image and find its dominant colors.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-2 sm:gap-3\">\n                <div className=\"bg-green-100 p-1.5 sm:p-2 rounded-full flex-shrink-0\">\n                  <div className=\"flex -space-x-1\">\n                    <div className=\"w-3 h-3 sm:w-4 sm:h-4 rounded-full bg-red-500\"></div>\n                    <div className=\"w-3 h-3 sm:w-4 sm:h-4 rounded-full bg-blue-500\"></div>\n                    <div className=\"w-3 h-3 sm:w-4 sm:h-4 rounded-full bg-green-500\"></div>\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-gray-800 text-sm sm:text-base\">3. Review Your Palette</h3>\n                  <p>The tool will extract up to 5 dominant colors from your image.</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-2 sm:gap-3\">\n                <div className=\"bg-emerald-100 p-1.5 sm:p-2 rounded-full flex-shrink-0\">\n                  <ArrowLeft size={16} className=\"text-emerald-600 sm:w-[18px] sm:h-[18px]\" />\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-gray-800 text-sm sm:text-base\">4. Use Your Palette</h3>\n                  <p>Click \"Use This Palette\" to apply these colors to the main generator.</p>\n                </div>\n              </div>\n            </div>\n            \n            <button \n              onClick={() => setShowInstructions(false)}\n              className=\"w-full mt-4 sm:mt-6 bg-gradient-to-r from-purple-600 to-blue-500 text-white py-1.5 sm:py-2 rounded-lg font-medium text-sm sm:text-base\"\n            >\n              Got it!\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":16320},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, ChevronLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600 mb-6\">\n            The page you're looking for doesn't exist.\n          </p>\n          \n          <div\n            className=\"cursor-pointer\" \n            onClick={() => window.location.href = '/'}\n          >\n            <Button className=\"w-full flex items-center justify-center\">\n              <ChevronLeft className=\"mr-1 h-4 w-4\" />\n              Back to Home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1102},"client/src/pages/palette-visualizer-new.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft, Layout, Monitor, PieChart, MessageSquare, Calendar, ArrowRight, Check } from 'lucide-react';\nimport { usePalette } from '@/contexts/PaletteContext';\nimport { Color } from '@/types/Color';\nimport { cn } from '@/lib/utils';\nimport Footer from '@/components/Footer';\nimport { isLightColor } from '@/lib/colorUtils';\nimport { Helmet } from 'react-helmet-async';\nimport html2canvas from 'html2canvas';\n\n// Template types\ntype TemplateType = 'dashboard' | 'landing' | 'analytics' | 'chat' | 'calendar';\n\nexport default function PaletteVisualizer() {\n  const paletteContext = usePalette();\n  const { palette: contextPalette, setPalette } = paletteContext;\n  const [activeTemplate, setActiveTemplate] = useState<TemplateType>('dashboard');\n  const [showExportToast, setShowExportToast] = useState(false);\n  const [colorIndicators, setColorIndicators] = useState(false);\n  const [localPalette, setLocalPalette] = useState<Color[]>(contextPalette);\n  \n  // Load palette from localStorage if available\n  useEffect(() => {\n    try {\n      // Check localStorage for palette data\n      const savedPaletteStr = localStorage.getItem('currentPalette');\n      if (savedPaletteStr) {\n        const savedPalette = JSON.parse(savedPaletteStr);\n        if (Array.isArray(savedPalette) && savedPalette.length > 0) {\n          console.log('Loaded palette from localStorage:', savedPalette);\n          setLocalPalette(savedPalette);\n          // Also update the context palette\n          setPalette(savedPalette);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading palette from localStorage:', err);\n    }\n  }, [setPalette]);\n\n  // Helper to get a specific color from palette by index\n  const getColor = (index: number): string => {\n    if (localPalette.length <= index) {\n      return '#ffffff';\n    }\n    return localPalette[index].hex;\n  };\n\n  // Helper to get text color based on background for contrast\n  const getTextColor = (bgColor: string): string => {\n    return isLightColor(bgColor) ? '#1f2937' : '#ffffff';\n  };\n\n  // Export current template as PNG\n  const exportAsPNG = async () => {\n    const visualizerEl = document.getElementById('template-visualizer');\n    if (!visualizerEl) return;\n    \n    try {\n      const canvas = await html2canvas(visualizerEl, {\n        backgroundColor: null,\n        scale: 2 // Higher resolution\n      });\n      \n      const image = canvas.toDataURL('image/png');\n      const link = document.createElement('a');\n      link.href = image;\n      link.download = `${activeTemplate}-template-${new Date().getTime()}.png`;\n      link.click();\n      \n      // Show success toast\n      setShowExportToast(true);\n      setTimeout(() => setShowExportToast(false), 3000);\n    } catch (err) {\n      console.error('Error exporting template:', err);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <Helmet>\n        <title>Palette Visualizer | See Your Colors in Real UI Templates - Coolors.in</title>\n        <meta name=\"description\" content=\"Visualize your color palette in real UI templates. See how your colors work together in dashboards, landing pages, and app interfaces.\" />\n        <meta name=\"keywords\" content=\"palette visualizer, color combinations, UI templates, color schemes in action\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/visualize\" />\n        {/* Dynamic structured data for the visualizer page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebPage\",\n            \"name\": \"Palette Visualizer | Coolors.in\",\n            \"url\": \"https://coolors.in/visualize\",\n            \"description\": \"Visualize your color palette in real UI templates with Coolors.in's Palette Visualizer\",\n            \"isPartOf\": {\n              \"@type\": \"WebApplication\",\n              \"name\": \"Coolors.in\"\n            }\n          })}\n        </script>\n      </Helmet>\n      <header className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n            Palette Visualizer\n          </h1>\n          <Link href=\"/\" className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors\">\n            <ArrowLeft className=\"mr-1\" size={20} />\n            Back to Generator\n          </Link>\n        </div>\n        <p className=\"text-gray-600 mt-2\">\n          See how your color palette would look in different UI templates\n        </p>\n      </header>\n\n      {/* Top action bar */}\n      <div className=\"bg-white rounded-lg shadow-md p-4 mb-4\">\n        <div className=\"flex flex-wrap justify-between items-center\">\n          <div className=\"flex flex-wrap gap-2\">\n            <TemplateButton \n              active={activeTemplate === 'dashboard'} \n              onClick={() => setActiveTemplate('dashboard')}\n              icon={<Layout size={18} />}\n              label=\"Dashboard\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'landing'} \n              onClick={() => setActiveTemplate('landing')}\n              icon={<Monitor size={18} />}\n              label=\"Landing Page\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'analytics'} \n              onClick={() => setActiveTemplate('analytics')}\n              icon={<PieChart size={18} />}\n              label=\"Analytics\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'chat'} \n              onClick={() => setActiveTemplate('chat')}\n              icon={<MessageSquare size={18} />}\n              label=\"Chat App\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'calendar'} \n              onClick={() => setActiveTemplate('calendar')}\n              icon={<Calendar size={18} />}\n              label=\"Calendar\"\n            />\n          </div>\n          <div className=\"flex items-center gap-3 mt-3 sm:mt-0\">\n            <div className=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"color-indicators\" \n                className=\"mr-2\"\n                checked={colorIndicators}\n                onChange={() => setColorIndicators(!colorIndicators)} \n              />\n              <label htmlFor=\"color-indicators\" className=\"text-sm text-gray-600\">Show color indicators</label>\n            </div>\n            <button \n              onClick={exportAsPNG} \n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-1\"\n            >\n              <ArrowRight size={16} />\n              Export as PNG\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Template visualization */}\n      <div \n        id=\"template-visualizer\" \n        className=\"bg-white rounded-xl shadow-lg overflow-hidden flex-1 mb-6 relative\"\n      >\n        {activeTemplate === 'dashboard' && (\n          <DashboardTemplate palette={localPalette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'landing' && (\n          <LandingTemplate palette={localPalette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'analytics' && (\n          <AnalyticsTemplate palette={localPalette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'chat' && (\n          <ChatTemplate palette={localPalette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'calendar' && (\n          <CalendarTemplate palette={localPalette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n      </div>\n\n      {/* Color palette reference */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-medium mb-2\">Your Palette</h3>\n        <div className=\"flex h-12 rounded-md overflow-hidden\">\n          {localPalette.map((color, index) => (\n            <div \n              key={index} \n              className=\"flex-1\" \n              style={{ backgroundColor: color.hex }}\n            >\n              <div className=\"h-full flex items-center justify-center\">\n                <span className={`text-xs font-medium ${isLightColor(color.hex) ? 'text-gray-800' : 'text-white'}`}>\n                  {color.hex}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Export success toast */}\n      {showExportToast && (\n        <div className=\"fixed bottom-4 right-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-md flex items-center\">\n          <Check size={20} className=\"mr-2\" />\n          <span>Template exported successfully!</span>\n        </div>\n      )}\n      \n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n\n// Template button component\ninterface TemplateButtonProps {\n  active: boolean;\n  onClick: () => void;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction TemplateButton({ active, onClick, icon, label }: TemplateButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        \"px-4 py-2 rounded-md font-medium flex items-center gap-2 transition-colors\",\n        active \n          ? \"bg-gradient-to-r from-purple-600 to-blue-500 text-white\" \n          : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n      )}\n    >\n      {icon}\n      {label}\n    </button>\n  );\n}\n\n// Color indicator component\ninterface ColorIndicatorProps {\n  color: string;\n  index: number;\n  showIndicators: boolean;\n}\n\nfunction ColorIndicator({ color, index, showIndicators }: { color: string; index: number; showIndicators: boolean; }) {\n  if (!showIndicators) return null;\n  \n  return (\n    <div \n      className=\"absolute top-0 right-0 px-2 py-1 text-xs font-bold rounded-bl-md z-10\"\n      style={{ \n        backgroundColor: color,\n        color: isLightColor(color) ? '#000' : '#fff'\n      }}\n    >\n      Color {index + 1}\n    </div>\n  );\n}\n\n// Dashboard Template\nfunction DashboardTemplate({ \n  palette, \n  getTextColor, \n  showIndicators \n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] flex flex-col\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc' }}>\n      {/* Sidebar */}\n      <div className=\"flex h-full\">\n        <div \n          className=\"w-56 h-full p-4 flex flex-col relative\" \n          style={{ \n            backgroundColor: palette[0]?.hex || '#1e293b',\n            color: getTextColor(palette[0]?.hex || '#1e293b')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n          <div className=\"font-bold text-xl mb-6\">App Name</div>\n          \n          <div className=\"space-y-1\">\n            <div className=\"p-2 rounded flex items-center gap-2 font-medium relative\" style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}>\n              {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n              <Layout size={16} /> Dashboard\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <PieChart size={16} /> Analytics\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <MessageSquare size={16} /> Messages\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <Calendar size={16} /> Calendar\n            </div>\n          </div>\n\n          <div className=\"mt-auto\">\n            <div className=\"p-2 rounded\">Settings</div>\n            <div className=\"p-2 rounded\">Help</div>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Dashboard</h1>\n            <div \n              className=\"px-4 py-2 rounded relative\"  \n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n              + New Item\n            </div>\n          </div>\n\n          {/* Stats cards */}\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div \n              className=\"p-4 rounded-lg shadow relative\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n              <div className=\"text-sm opacity-80\">Total Users</div>\n              <div className=\"text-2xl font-bold\">4,927</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 12% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Revenue</div>\n              <div className=\"text-2xl font-bold\">$24,438</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 8% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Active Projects</div>\n              <div className=\"text-2xl font-bold\">23</div>\n              <div className=\"text-xs mt-2 text-red-500\">↓ 2 from last month</div>\n            </div>\n          </div>\n\n          {/* Main panel */}\n          <div \n            className=\"rounded-lg shadow p-4 relative\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"font-bold\">Recent Activity</h2>\n              <div className=\"text-sm\">View All</div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"py-2 border-b last:border-0 flex justify-between\">\n                  <div>User #{i} completed Task #{i}</div>\n                  <div className=\"text-sm opacity-70\">Just now</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Landing Template\nfunction LandingTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] overflow-auto relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Navigation */}\n      <header \n        className=\"px-6 py-4 flex justify-between items-center sticky top-0 relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"font-bold text-xl\">Landing Page</div>\n        <nav className=\"flex items-center gap-6\">\n          <div>Features</div>\n          <div>Pricing</div>\n          <div>About</div>\n          <div \n            className=\"px-4 py-2 rounded relative\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n            Get Started\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <div \n        className=\"px-6 py-16 flex gap-8 justify-between relative\" \n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n        <div className=\"max-w-md\">\n          <h1 className=\"text-4xl font-bold mb-4\">Welcome to Our Platform</h1>\n          <p className=\"mb-6 opacity-90\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisi vel consectetur interdum.</p>\n          <div className=\"flex gap-4\">\n            <div \n              className=\"px-4 py-2 rounded font-medium relative\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Get Started\n            </div>\n            <div \n              className=\"px-4 py-2 rounded font-medium border\"\n              style={{ \n                borderColor: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Learn More\n            </div>\n          </div>\n        </div>\n        <div \n          className=\"w-80 h-48 rounded flex items-center justify-center relative\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n          <span className=\"text-center\">Hero Image</span>\n        </div>\n      </div>\n\n      {/* Features */}\n      <div className=\"px-6 py-12\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Features</h2>\n        <div className=\"grid grid-cols-3 gap-6\">\n          {[1, 2, 3].map(i => (\n            <div \n              key={i} \n              className=\"p-4 rounded-lg text-center relative\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div \n                className=\"w-12 h-12 rounded-full mx-auto mb-4 flex items-center justify-center relative\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {i}\n              </div>\n              <h3 className=\"font-bold mb-2\">Feature {i}</h3>\n              <p className=\"text-sm opacity-80\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Analytics Template\nfunction AnalyticsTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  // Placeholder for analytics charts\n  return (\n    <div className=\"h-[500px] overflow-auto relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      <header className=\"p-4 border-b flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">Analytics Dashboard</h1>\n        <div className=\"flex items-center gap-4\">\n          <div>Last 7 Days ▼</div>\n          <div \n            className=\"px-3 py-1 rounded text-sm relative\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n            Export\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div \n            className=\"p-4 rounded-lg relative\"\n            style={{ \n              backgroundColor: palette[0]?.hex || '#1e293b',\n              color: getTextColor(palette[0]?.hex || '#1e293b')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n            <h3 className=\"font-medium mb-2\">Page Views</h3>\n            <div className=\"text-3xl font-bold\">42,856</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"absolute bottom-0 left-0 w-full\">\n                <div className=\"flex justify-between h-40\">\n                  {[1, 2, 3, 4, 5, 6, 7].map(i => (\n                    <div \n                      key={i} \n                      className=\"w-8 mx-1 rounded-t\"\n                      style={{ \n                        height: `${Math.random() * 100}%`,\n                        backgroundColor: palette[2]?.hex || '#3b82f6' \n                      }}\n                    ></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div \n            className=\"p-4 rounded-lg relative\"\n            style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n            <h3 className=\"font-medium mb-2\">Conversion Rate</h3>\n            <div className=\"text-3xl font-bold\">8.42%</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <div \n                  className=\"w-32 h-32 rounded-full border-8 flex items-center justify-center\"\n                  style={{ borderColor: palette[2]?.hex || '#3b82f6' }}\n                >\n                  <span className=\"text-2xl font-bold\">8.4%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 rounded-lg mb-6 relative\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n          <h3 className=\"font-medium mb-4\">Traffic Sources</h3>\n          <div className=\"space-y-3\">\n            {['Organic Search', 'Direct', 'Social Media', 'Email', 'Referral'].map((source, i) => (\n              <div key={i} className=\"flex items-center\">\n                <div className=\"w-24\">{source}</div>\n                <div className=\"flex-1 h-6 bg-gray-200 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full\"\n                    style={{ \n                      width: `${Math.floor(Math.random() * 70) + 10}%`,\n                      backgroundColor: i % 2 === 0 ? palette[0]?.hex : palette[2]?.hex \n                    }}\n                  ></div>\n                </div>\n                <div className=\"w-16 text-right\">{`${Math.floor(Math.random() * 70) + 10}%`}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Chat Template\nfunction ChatTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] flex relative\" style={{ backgroundColor: palette[3]?.hex || '#ffffff' }}>\n      {/* Sidebar */}\n      <div \n        className=\"w-64 h-full border-r flex flex-col relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b'),\n          borderColor: 'rgba(255,255,255,0.1)'\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"p-4 border-b\" style={{ borderColor: 'rgba(255,255,255,0.1)' }}>\n          <h2 className=\"font-bold text-lg\">Messages</h2>\n        </div>\n        <div className=\"p-3\">\n          <div \n            className=\"mb-3 p-2 rounded flex items-center gap-2 relative\"\n            style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155') \n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n            <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n            <div>\n              <div className=\"font-medium\">Alice Smith</div>\n              <div className=\"text-xs opacity-80\">Hey there!</div>\n            </div>\n          </div>\n          {['Bob Johnson', 'Catherine Lee', 'David Miller'].map((name, i) => (\n            <div key={i} className=\"mb-3 p-2 rounded flex items-center gap-2\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n              <div>\n                <div className=\"font-medium\">{name}</div>\n                <div className=\"text-xs opacity-80\">Last message...</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat area */}\n      <div className=\"flex-1 flex flex-col relative\">\n        {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n        <div \n          className=\"p-4 border-b flex items-center gap-3 relative\"\n          style={{ \n            color: getTextColor(palette[3]?.hex || '#ffffff') \n          }}\n        >\n          <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n          <div>\n            <div className=\"font-medium\">Alice Smith</div>\n            <div className=\"text-xs\">Online</div>\n          </div>\n        </div>\n\n        <div className=\"flex-1 p-4 overflow-auto\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-start\">\n              <div \n                className=\"max-w-xs rounded-lg p-3 relative\"\n                style={{ \n                  backgroundColor: palette[4]?.hex || '#f1f5f9',\n                  color: getTextColor(palette[4]?.hex || '#f1f5f9')\n                }}\n              >\n                {showIndicators && <ColorIndicator color={palette[4]?.hex || '#f1f5f9'} index={4} showIndicators={showIndicators} />}\n                <p>Hey there! How are you doing today?</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:32 AM</div>\n              </div>\n            </div>\n            <div className=\"flex justify-end\">\n              <div \n                className=\"max-w-xs rounded-lg p-3 relative\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n                <p>I'm doing great! Just finished working on that project we discussed.</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:34 AM</div>\n              </div>\n            </div>\n            <div className=\"flex justify-start\">\n              <div \n                className=\"max-w-xs rounded-lg p-3\"\n                style={{ \n                  backgroundColor: palette[4]?.hex || '#f1f5f9',\n                  color: getTextColor(palette[4]?.hex || '#f1f5f9')\n                }}\n              >\n                <p>That's awesome! Can you share the details?</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:36 AM</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 border-t flex items-center gap-2\"\n          style={{ \n            color: getTextColor(palette[3]?.hex || '#ffffff') \n          }}\n        >\n          <input \n            type=\"text\" \n            placeholder=\"Type a message...\" \n            className=\"flex-1 p-3 rounded-lg\"\n            style={{ \n              backgroundColor: palette[4]?.hex || '#f1f5f9',\n              color: getTextColor(palette[4]?.hex || '#f1f5f9')\n            }}\n          />\n          <button \n            className=\"p-3 rounded-lg\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Calendar Template\nfunction CalendarTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const currentDay = 15; // Just for demonstration\n  \n  return (\n    <div className=\"h-[500px] flex flex-col relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {showIndicators && <ColorIndicator color={palette[4]?.hex || '#f8fafc'} index={4} showIndicators={showIndicators} />}\n      {/* Header */}\n      <div \n        className=\"p-4 flex justify-between items-center relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"font-bold text-lg\">May 2023</div>\n        <div className=\"flex gap-2\">\n          <button className=\"p-2 rounded-lg\">◀</button>\n          <button className=\"p-2 rounded-lg\">Today</button>\n          <button className=\"p-2 rounded-lg\">▶</button>\n        </div>\n        <div className=\"flex gap-2\">\n          <button className=\"p-2 rounded-lg\">Month</button>\n          <button className=\"p-2 rounded-lg\">Week</button>\n          <button className=\"p-2 rounded-lg\">Day</button>\n        </div>\n      </div>\n\n      {/* Weekdays header */}\n      <div \n        className=\"grid grid-cols-7 text-center py-2 border-b relative\"\n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n        {weekdays.map(day => (\n          <div key={day} className=\"font-medium\">{day}</div>\n        ))}\n      </div>\n\n      {/* Calendar grid */}\n      <div className=\"flex-1 grid grid-cols-7 grid-rows-5 border-b\">\n        {Array.from({ length: 35 }, (_, i) => {\n          const day = i - 3; // Offset to start month from correct weekday\n          const isCurrentMonth = day > 0 && day <= 31;\n          const isToday = day === currentDay;\n          \n          return (\n            <div \n              key={i} \n              className={`border-r border-b p-1 flex flex-col ${isCurrentMonth ? '' : 'opacity-40'}`}\n              style={{ \n                backgroundColor: isToday ? palette[3]?.hex : 'transparent',\n                color: isToday ? getTextColor(palette[3]?.hex || '#ffffff') : getTextColor(palette[4]?.hex || '#f8fafc')\n              }}\n            >\n              {isToday && showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n              <div className=\"text-right mb-1\">{isCurrentMonth ? day : (day <= 0 ? 31 + day : day - 31)}</div>\n              \n              {/* Calendar events */}\n              {isCurrentMonth && Math.random() > 0.7 && (\n                <div \n                  className=\"text-xs p-1 rounded mb-1 truncate relative\"\n                  style={{ \n                    backgroundColor: palette[2]?.hex || '#3b82f6',\n                    color: getTextColor(palette[2]?.hex || '#3b82f6')\n                  }}\n                >\n                  {day === 15 && showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n                  Meeting\n                </div>\n              )}\n              \n              {isCurrentMonth && Math.random() > 0.8 && (\n                <div \n                  className=\"text-xs p-1 rounded truncate\"\n                  style={{ \n                    backgroundColor: palette[0]?.hex || '#1e293b',\n                    color: getTextColor(palette[0]?.hex || '#1e293b')\n                  }}\n                >\n                  Call\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":34898},"client/src/pages/palette-visualizer.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft, Layout, Monitor, PieChart, MessageSquare, Calendar } from 'lucide-react';\nimport { usePalette } from '@/contexts/PaletteContext';\nimport { Color } from '@/types/Color';\nimport { cn } from '@/lib/utils';\nimport Footer from '@/components/Footer';\nimport { isLightColor } from '@/lib/colorUtils';\nimport { Helmet } from 'react-helmet-async';\n\n// Template types\ntype TemplateType = 'dashboard' | 'landing' | 'analytics' | 'chat' | 'calendar';\n\nexport default function PaletteVisualizer() {\n  const { palette } = usePalette();\n  const [activeTemplate, setActiveTemplate] = useState<TemplateType>('dashboard');\n\n  // Helper to get a specific color from palette by index\n  const getColor = (index: number): string => {\n    if (palette.length <= index) {\n      return '#ffffff';\n    }\n    return palette[index].hex;\n  };\n\n  // Helper to get text color based on background for contrast\n  const getTextColor = (bgColor: string): string => {\n    return isLightColor(bgColor) ? '#1f2937' : '#ffffff';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <Helmet>\n        <title>Palette Visualizer | See Your Colors in Real UI Templates - Coolors.in</title>\n        <meta name=\"description\" content=\"Visualize your color palette in real UI templates. See how your colors work together in dashboards, landing pages, and app interfaces.\" />\n        <meta name=\"keywords\" content=\"palette visualizer, color combinations, UI templates, color schemes in action\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/visualize\" />\n        {/* Dynamic structured data for the visualizer page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebPage\",\n            \"name\": \"Palette Visualizer | Coolors.in\",\n            \"url\": \"https://coolors.in/visualize\",\n            \"description\": \"Visualize your color palette in real UI templates with Coolors.in's Palette Visualizer\",\n            \"isPartOf\": {\n              \"@type\": \"WebApplication\",\n              \"name\": \"Coolors.in\"\n            }\n          })}\n        </script>\n      </Helmet>\n      <header className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n            Palette Visualizer\n          </h1>\n          <Link href=\"/\" className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors\">\n            <ArrowLeft className=\"mr-1\" size={20} />\n            Back to Generator\n          </Link>\n        </div>\n        <p className=\"text-gray-600 mt-2\">\n          See how your color palette would look in different UI templates\n        </p>\n      </header>\n\n      {/* Template selector */}\n      <div className=\"bg-white rounded-lg shadow-md p-4 mb-8\">\n        <div className=\"flex flex-wrap gap-2\">\n          <TemplateButton \n            active={activeTemplate === 'dashboard'} \n            onClick={() => setActiveTemplate('dashboard')}\n            icon={<Layout size={18} />}\n            label=\"Dashboard\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'landing'} \n            onClick={() => setActiveTemplate('landing')}\n            icon={<Monitor size={18} />}\n            label=\"Landing Page\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'analytics'} \n            onClick={() => setActiveTemplate('analytics')}\n            icon={<PieChart size={18} />}\n            label=\"Analytics\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'chat'} \n            onClick={() => setActiveTemplate('chat')}\n            icon={<MessageSquare size={18} />}\n            label=\"Chat App\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'calendar'} \n            onClick={() => setActiveTemplate('calendar')}\n            icon={<Calendar size={18} />}\n            label=\"Calendar\"\n          />\n        </div>\n      </div>\n\n      {/* Template visualization */}\n      <div className=\"bg-white rounded-xl shadow-lg overflow-hidden flex-1 mb-6\">\n        {activeTemplate === 'dashboard' && (\n          <DashboardTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'landing' && (\n          <LandingTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'analytics' && (\n          <AnalyticsTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'chat' && (\n          <ChatTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'calendar' && (\n          <CalendarTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n      </div>\n\n      {/* Color palette reference */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-medium mb-2\">Your Palette</h3>\n        <div className=\"flex h-12 rounded-md overflow-hidden\">\n          {palette.map((color, index) => (\n            <div \n              key={index} \n              className=\"flex-1\" \n              style={{ backgroundColor: color.hex }}\n            >\n              <div className=\"h-full flex items-center justify-center\">\n                <span className={`text-xs font-medium ${isLightColor(color.hex) ? 'text-gray-800' : 'text-white'}`}>\n                  {color.hex}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n}\n\n// Template button component\ninterface TemplateButtonProps {\n  active: boolean;\n  onClick: () => void;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction TemplateButton({ active, onClick, icon, label }: TemplateButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        \"px-4 py-2 rounded-md font-medium flex items-center gap-2 transition-colors\",\n        active \n          ? \"bg-gradient-to-r from-purple-600 to-blue-500 text-white\" \n          : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n      )}\n    >\n      {icon}\n      {label}\n    </button>\n  );\n}\n\n// Dashboard Template\nfunction DashboardTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] flex flex-col\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc' }}>\n      {/* Sidebar */}\n      <div className=\"flex h-full\">\n        <div \n          className=\"w-56 h-full p-4 flex flex-col\" \n          style={{ \n            backgroundColor: palette[0]?.hex || '#1e293b',\n            color: getTextColor(palette[0]?.hex || '#1e293b')\n          }}\n        >\n          <div className=\"font-bold text-xl mb-6\">App Name</div>\n          \n          <div className=\"space-y-1\">\n            <div className=\"p-2 rounded flex items-center gap-2 font-medium\" style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}>\n              <Layout size={16} /> Dashboard\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <PieChart size={16} /> Analytics\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <MessageSquare size={16} /> Messages\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <Calendar size={16} /> Calendar\n            </div>\n          </div>\n\n          <div className=\"mt-auto\">\n            <div className=\"p-2 rounded\">Settings</div>\n            <div className=\"p-2 rounded\">Help</div>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Dashboard</h1>\n            <div \n              className=\"px-4 py-2 rounded\"  \n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              + New Item\n            </div>\n          </div>\n\n          {/* Stats cards */}\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Total Users</div>\n              <div className=\"text-2xl font-bold\">4,927</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 12% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Revenue</div>\n              <div className=\"text-2xl font-bold\">$24,438</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 8% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Active Projects</div>\n              <div className=\"text-2xl font-bold\">23</div>\n              <div className=\"text-xs mt-2 text-red-500\">↓ 2 from last month</div>\n            </div>\n          </div>\n\n          {/* Main panel */}\n          <div \n            className=\"rounded-lg shadow p-4\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"font-bold\">Recent Activity</h2>\n              <div className=\"text-sm\">View All</div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"py-2 border-b last:border-0 flex justify-between\">\n                  <div>User #{i} completed Task #{i}</div>\n                  <div className=\"text-sm opacity-70\">Just now</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Landing Template\nfunction LandingTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] overflow-auto\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Navigation */}\n      <header \n        className=\"px-6 py-4 flex justify-between items-center sticky top-0\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        <div className=\"font-bold text-xl\">Landing Page</div>\n        <nav className=\"flex items-center gap-6\">\n          <div>Features</div>\n          <div>Pricing</div>\n          <div>About</div>\n          <div \n            className=\"px-4 py-2 rounded\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Get Started\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <div \n        className=\"px-6 py-16 flex gap-8 justify-between\" \n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        <div className=\"max-w-md\">\n          <h1 className=\"text-4xl font-bold mb-4\">Welcome to Our Platform</h1>\n          <p className=\"mb-6 opacity-90\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisi vel consectetur interdum.</p>\n          <div className=\"flex gap-4\">\n            <div \n              className=\"px-4 py-2 rounded font-medium\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Get Started\n            </div>\n            <div \n              className=\"px-4 py-2 rounded font-medium border\"\n              style={{ \n                borderColor: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Learn More\n            </div>\n          </div>\n        </div>\n        <div \n          className=\"w-80 h-48 rounded flex items-center justify-center\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <span className=\"text-center\">Hero Image</span>\n        </div>\n      </div>\n\n      {/* Features */}\n      <div className=\"px-6 py-12\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\">Features</h2>\n        <div className=\"grid grid-cols-3 gap-6\">\n          {[1, 2, 3].map(i => (\n            <div \n              key={i} \n              className=\"p-4 rounded-lg text-center\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div \n                className=\"w-12 h-12 rounded-full mx-auto mb-4 flex items-center justify-center\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {i}\n              </div>\n              <h3 className=\"font-bold mb-2\">Feature {i}</h3>\n              <p className=\"text-sm opacity-80\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Analytics Template\nfunction AnalyticsTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Placeholder for analytics charts\n  return (\n    <div className=\"h-[500px] overflow-auto\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      <header className=\"p-4 border-b flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">Analytics Dashboard</h1>\n        <div className=\"flex items-center gap-4\">\n          <div>Last 7 Days ▼</div>\n          <div \n            className=\"px-3 py-1 rounded text-sm\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Export\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div \n            className=\"p-4 rounded-lg\"\n            style={{ \n              backgroundColor: palette[0]?.hex || '#1e293b',\n              color: getTextColor(palette[0]?.hex || '#1e293b')\n            }}\n          >\n            <h3 className=\"font-medium mb-2\">Page Views</h3>\n            <div className=\"text-3xl font-bold\">42,856</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"absolute bottom-0 left-0 right-0 flex items-end justify-between h-32\">\n                {[30, 45, 25, 60, 35, 70, 50].map((h, i) => (\n                  <div \n                    key={i}\n                    className=\"w-8 rounded-t\"\n                    style={{ \n                      height: `${h}%`,\n                      backgroundColor: palette[1]?.hex || '#334155'\n                    }}\n                  ></div>\n                ))}\n              </div>\n              <div className=\"absolute bottom-0 left-0 right-0 flex justify-between text-xs pt-2 border-t\">\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day, i) => (\n                  <div key={i} className=\"w-8 text-center\">{day}</div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div \n            className=\"p-4 rounded-lg\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <h3 className=\"font-medium mb-2\">Conversions</h3>\n            <div className=\"text-3xl font-bold\">1,286</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Donut chart placeholder */}\n              <div className=\"flex justify-center items-center h-full\">\n                <div \n                  className=\"w-32 h-32 rounded-full flex items-center justify-center relative\"\n                  style={{ \n                    background: `conic-gradient(${palette[2]?.hex || '#3b82f6'} 0% 65%, ${palette[1]?.hex || '#334155'} 65% 100%)`,\n                    boxShadow: 'inset 0 0 0 5px white'\n                  }}\n                >\n                  <div className=\"w-16 h-16 rounded-full bg-white flex items-center justify-center text-lg font-bold\">65%</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 rounded-lg mb-4\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <h3 className=\"font-medium mb-4\">Traffic Sources</h3>\n          <div className=\"space-y-3\">\n            {[\n              { name: 'Direct', value: 42 },\n              { name: 'Organic Search', value: 28 },\n              { name: 'Referral', value: 18 },\n              { name: 'Social Media', value: 12 },\n            ].map((source, i) => (\n              <div key={i}>\n                <div className=\"flex justify-between mb-1\">\n                  <span>{source.name}</span>\n                  <span>{source.value}%</span>\n                </div>\n                <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full\" \n                    style={{\n                      width: `${source.value}%`,\n                      backgroundColor: palette[i % 2 ? 2 : 1]?.hex || '#3b82f6',\n                    }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Chat Template\nfunction ChatTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] flex\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Sidebar */}\n      <div \n        className=\"w-64 h-full p-4 flex flex-col border-r\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        <h2 className=\"font-bold text-xl mb-4\">Chats</h2>\n        <div \n          className=\"mb-4 px-3 py-2 rounded-md\"\n          style={{ \n            backgroundColor: 'rgba(255, 255, 255, 0.1)'\n          }}\n        >\n          <input \n            type=\"text\" \n            placeholder=\"Search...\" \n            className=\"w-full bg-transparent outline-none\" \n            style={{ color: getTextColor(palette[0]?.hex || '#1e293b') }}\n          />\n        </div>\n        \n        <div className=\"flex-1 overflow-auto space-y-2\">\n          {/* Chat list */}\n          {[1, 2, 3, 4, 5].map(i => {\n            const isActive = i === 1;\n            return (\n              <div \n                key={i}\n                className=\"p-2 rounded-md flex gap-3\"\n                style={{\n                  backgroundColor: isActive \n                    ? palette[1]?.hex || '#334155' \n                    : 'transparent',\n                  color: isActive \n                    ? getTextColor(palette[1]?.hex || '#334155')\n                    : getTextColor(palette[0]?.hex || '#1e293b')\n                }}\n              >\n                <div \n                  className=\"w-10 h-10 rounded-full flex items-center justify-center\"\n                  style={{ \n                    backgroundColor: palette[3]?.hex || '#ffffff',\n                    color: getTextColor(palette[3]?.hex || '#ffffff')\n                  }}\n                >\n                  U{i}\n                </div>\n                <div>\n                  <div className=\"font-medium\">User {i}</div>\n                  <div className=\"text-xs opacity-75 truncate\">Latest message here...</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Chat area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat header */}\n        <div \n          className=\"p-4 border-b flex justify-between items-center\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <div className=\"flex items-center gap-3\">\n            <div \n              className=\"w-10 h-10 rounded-full flex items-center justify-center\"\n              style={{ \n                backgroundColor: palette[1]?.hex || '#334155',\n                color: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              U1\n            </div>\n            <div>\n              <div className=\"font-medium\">User 1</div>\n              <div className=\"text-xs opacity-75\">Online</div>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <button className=\"p-2 rounded-full hover:bg-gray-100\">\n              <PieChart size={18} />\n            </button>\n            <button className=\"p-2 rounded-full hover:bg-gray-100\">\n              <MessageSquare size={18} />\n            </button>\n          </div>\n        </div>\n        \n        {/* Chat messages */}\n        <div \n          className=\"flex-1 p-4 overflow-auto\"\n          style={{ \n            backgroundColor: palette[4]?.hex || '#f8fafc',\n            color: getTextColor(palette[4]?.hex || '#f8fafc')\n          }}\n        >\n          {/* User 1 message */}\n          <div className=\"flex gap-3 mb-4\">\n            <div \n              className=\"w-8 h-8 rounded-full flex items-center justify-center shrink-0\"\n              style={{ \n                backgroundColor: palette[1]?.hex || '#334155',\n                color: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              U1\n            </div>\n            <div \n              className=\"px-3 py-2 rounded-lg max-w-[80%]\"\n              style={{ \n                backgroundColor: palette[0]?.hex || '#1e293b',\n                color: getTextColor(palette[0]?.hex || '#1e293b')\n              }}\n            >\n              <p>Hey there! How's it going?</p>\n              <div className=\"text-xs opacity-75 mt-1\">10:30 AM</div>\n            </div>\n          </div>\n          \n          {/* Current user message */}\n          <div className=\"flex flex-row-reverse gap-3 mb-4\">\n            <div \n              className=\"w-8 h-8 rounded-full flex items-center justify-center shrink-0\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              Me\n            </div>\n            <div \n              className=\"px-3 py-2 rounded-lg max-w-[80%]\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              <p>I'm doing well, thanks for asking! Just working on a new design.</p>\n              <div className=\"text-xs opacity-75 mt-1\">10:32 AM</div>\n            </div>\n          </div>\n          \n          {/* User 1 message */}\n          <div className=\"flex gap-3\">\n            <div \n              className=\"w-8 h-8 rounded-full flex items-center justify-center shrink-0\"\n              style={{ \n                backgroundColor: palette[1]?.hex || '#334155',\n                color: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              U1\n            </div>\n            <div \n              className=\"px-3 py-2 rounded-lg max-w-[80%]\"\n              style={{ \n                backgroundColor: palette[0]?.hex || '#1e293b',\n                color: getTextColor(palette[0]?.hex || '#1e293b')\n              }}\n            >\n              <p>That sounds awesome! Can't wait to see it. Let me know if you need any feedback.</p>\n              <div className=\"text-xs opacity-75 mt-1\">10:34 AM</div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Message input */}\n        <div \n          className=\"p-4 border-t\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <div className=\"flex gap-2\">\n            <input \n              type=\"text\" \n              placeholder=\"Type a message...\" \n              className=\"flex-1 px-4 py-2 rounded-full border outline-none\"\n              style={{ \n                borderColor: getTextColor(palette[3]?.hex || '#ffffff') + '20',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            />\n            <button \n              className=\"px-4 py-2 rounded-full\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Calendar Template\nfunction CalendarTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] flex\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Sidebar */}\n      <div \n        className=\"w-64 h-full p-4 flex flex-col border-r\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        <h2 className=\"font-bold text-xl mb-6\">Calendar</h2>\n        \n        <div \n          className=\"mb-6 rounded-lg p-4\"\n          style={{ \n            backgroundColor: palette[1]?.hex || '#334155',\n            color: getTextColor(palette[1]?.hex || '#334155')\n          }}\n        >\n          <div className=\"font-bold mb-2\">April 2025</div>\n          <div className=\"grid grid-cols-7 text-center text-xs gap-1\">\n            {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (\n              <div key={day} className=\"text-center font-medium py-2\">{day}</div>\n            ))}\n            {/* Placeholders for empty days */}\n            {[...Array(3)].map((_, i) => (\n              <div key={`empty-${i}`} className=\"aspect-square\"></div>\n            ))}\n            {/* Days of month */}\n            {[...Array(30)].map((_, i) => {\n              const day = i + 1;\n              const isToday = day === 20;\n              const hasEvent = [5, 12, 20, 25].includes(day);\n              \n              return (\n                <div \n                  key={day} \n                  className=\"aspect-square flex items-center justify-center relative rounded-full text-xs\"\n                  style={{\n                    backgroundColor: isToday ? palette[2]?.hex || '#3b82f6' : 'transparent',\n                    color: isToday ? getTextColor(palette[2]?.hex || '#3b82f6') : 'inherit'\n                  }}\n                >\n                  <div className=\"text-sm font-medium\">{day}</div>\n                  {hasEvent && !isToday && (\n                    <div \n                      className=\"absolute bottom-1 w-1 h-1 rounded-full\"\n                      style={{ backgroundColor: palette[2]?.hex || '#3b82f6' }}\n                    ></div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        \n        <div>\n          <h3 className=\"font-medium mb-3\">Upcoming Events</h3>\n          <div className=\"space-y-3\">\n            <div \n              className=\"p-3 rounded-lg\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              <div className=\"font-medium\">Today - Birthday Party</div>\n              <div className=\"text-sm\">3:00 PM - 6:00 PM</div>\n            </div>\n            \n            <div \n              className=\"p-3 rounded-lg\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"font-medium\">Tomorrow - Team Meeting</div>\n              <div className=\"text-sm\">10:00 AM - 11:30 AM</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main calendar */}\n      <div className=\"flex-1 p-4 flex flex-col\">\n        <header className=\"flex justify-between items-center mb-6\">\n          <h1 className=\"text-2xl font-bold\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n            April 2025\n          </h1>\n          <div className=\"flex gap-2\">\n            <button \n              className=\"px-3 py-1 rounded\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              Today\n            </button>\n            <button \n              className=\"px-3 py-1 rounded\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              + New Event\n            </button>\n          </div>\n        </header>\n        \n        {/* Week view */}\n        <div \n          className=\"flex-1 rounded-lg overflow-hidden border\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff'),\n            borderColor: getTextColor(palette[3]?.hex || '#ffffff') + '20'\n          }}\n        >\n          <div className=\"grid grid-cols-7 border-b\">\n            {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(day => (\n              <div \n                key={day} \n                className=\"p-2 text-center border-r last:border-r-0\"\n                style={{ borderColor: getTextColor(palette[3]?.hex || '#ffffff') + '20' }}\n              >\n                <div className=\"font-medium\">{day}</div>\n                <div className=\"text-sm opacity-75\">April {[19, 20, 21, 22, 23, 24, 25][day.indexOf(day) % 7]}</div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 h-full\">\n            {/* Days of the week */}\n            {[19, 20, 21, 22, 23, 24, 25].map((date, i) => {\n              const isToday = date === 20;\n              return (\n                <div \n                  key={date} \n                  className=\"border-r last:border-r-0 relative\"\n                  style={{ \n                    borderColor: getTextColor(palette[3]?.hex || '#ffffff') + '20',\n                    backgroundColor: isToday ? getTextColor(palette[3]?.hex || '#ffffff') + '05' : 'transparent'\n                  }}\n                >\n                  {/* Events on the day */}\n                  {date === 20 && (\n                    <div \n                      className=\"absolute top-2 left-1 right-1 p-2 rounded\"\n                      style={{ \n                        backgroundColor: palette[2]?.hex || '#3b82f6',\n                        color: getTextColor(palette[2]?.hex || '#3b82f6')\n                      }}\n                    >\n                      <div className=\"text-xs font-medium\">Birthday Party</div>\n                      <div className=\"text-xs\">3:00 PM - 6:00 PM</div>\n                    </div>\n                  )}\n                  \n                  {date === 21 && (\n                    <div \n                      className=\"absolute top-2 left-1 right-1 p-2 rounded\"\n                      style={{ \n                        backgroundColor: palette[1]?.hex || '#334155',\n                        color: getTextColor(palette[1]?.hex || '#334155')\n                      }}\n                    >\n                      <div className=\"text-xs font-medium\">Team Meeting</div>\n                      <div className=\"text-xs\">10:00 AM - 11:30 AM</div>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":33810},"client/src/pages/pricing.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { \n  Check, \n  X, \n  Palette, \n  Eye, \n  Save, \n  Crown, \n  Shirt,\n  ArrowLeft,\n  CreditCard\n} from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\nimport Footer from '@/components/Footer';\nimport PayPalButton from '@/components/PayPalButton';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/use-auth';\nimport { updateUserSubscription } from '@/lib/localStorageService';\n\nexport default function Pricing() {\n  const { user } = useAuth();\n  const [selectedCountry, setSelectedCountry] = useState('US');\n  const [userInfo, setUserInfo] = useState({\n    email: user?.email || '',\n    firstName: '',\n    lastName: ''\n  });\n  const [showPayment, setShowPayment] = useState(false);\n  const { toast } = useToast();\n\n  const plans = {\n    free: {\n      name: 'Free',\n      price: { USD: '$0', INR: '₹0' },\n      period: 'forever',\n      features: [\n        'Generate up to 7 color palettes',\n        'Basic color theory tools',\n        'Export as PNG/JSON',\n        'Access to FAQ and guides'\n      ],\n      limitations: [\n        'No palette saving',\n        'No visualizer access',\n        'Limited to 7 palettes',\n        'No professional palettes',\n        'No cloth color matching'\n      ]\n    },\n    premium: {\n      name: 'Premium',\n      price: { USD: '$1', INR: '₹100' },\n      period: 'per month',\n      features: [\n        'Unlimited color palette generation',\n        'Save and organize palettes',\n        'Full visualizer access',\n        'Premium professional palettes',\n        'Cloth color palette for your style',\n        'Dashboard and product color schemes',\n        'Priority support',\n        'Export in all formats'\n      ],\n      limitations: []\n    }\n  };\n\n  const handleSubscriptionSuccess = async (orderId: string) => {\n    if (user) {\n      try {\n        // Update user subscription status in localStorage\n        updateUserSubscription(user.id, {\n          subscriptionStatus: 'active',\n          subscriptionId: orderId,\n          subscriptionPlan: 'premium',\n          subscriptionCountry: selectedCountry\n        });\n\n        toast({\n          title: \"Subscription successful!\",\n          description: \"Welcome to Coolors.in Premium! You now have access to all premium features.\",\n        });\n        \n        // Redirect to generator with premium access\n        setTimeout(() => {\n          window.location.href = '/generate';\n        }, 2000);\n      } catch (error) {\n        console.error('Failed to update subscription:', error);\n        toast({\n          title: \"Subscription processed\",\n          description: \"Your payment was successful. Please refresh the page.\",\n        });\n      }\n    } else {\n      toast({\n        title: \"Payment successful\",\n        description: \"Please log in to access your premium features.\",\n      });\n    }\n  };\n\n  const handleSubscriptionError = (error: any) => {\n    toast({\n      title: \"Subscription failed\",\n      description: \"There was an issue processing your payment. Please try again.\",\n      variant: \"destructive\",\n    });\n  };\n\n  const handleSubscriptionCancel = () => {\n    toast({\n      title: \"Subscription cancelled\",\n      description: \"You cancelled the subscription process.\",\n    });\n  };\n\n  const startSubscription = () => {\n    if (!userInfo.email) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter your email address to continue.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowPayment(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Helmet>\n        <title>Pricing - Coolors.in Premium Features</title>\n        <meta name=\"description\" content=\"Upgrade to Coolors.in Premium for unlimited palettes, visualizer access, and professional color schemes. Just $1/month or ₹100/month.\" />\n        <meta name=\"keywords\" content=\"color palette subscription, premium features, pricing, unlimited palettes\" />\n      </Helmet>\n\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\">\n              <div className=\"flex items-center space-x-3 cursor-pointer\">\n                <div className=\"w-10 h-10 bg-blue-600 rounded-xl flex items-center justify-center\">\n                  <Palette className=\"w-6 h-6 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold text-gray-900\">Coolors.in</span>\n              </div>\n            </Link>\n            <Link href=\"/\">\n              <a className=\"flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors\">\n                <ArrowLeft className=\"w-5 h-5\" />\n                Back to Home\n              </a>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6\">\n              Choose Your Plan\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Start with our free plan or upgrade to Premium for unlimited access to all features\n            </p>\n          </div>\n\n          {/* Country Selection */}\n          <div className=\"flex justify-center mb-12\">\n            <div className=\"bg-white rounded-lg p-1 shadow-md border\">\n              <button\n                onClick={() => setSelectedCountry('US')}\n                className={`px-6 py-2 rounded-md font-medium transition-colors ${\n                  selectedCountry === 'US' \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                United States (USD)\n              </button>\n              <button\n                onClick={() => setSelectedCountry('IN')}\n                className={`px-6 py-2 rounded-md font-medium transition-colors ${\n                  selectedCountry === 'IN' \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                India (INR)\n              </button>\n            </div>\n          </div>\n\n          {/* Pricing Cards */}\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto mb-16\">\n            {/* Free Plan */}\n            <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200\">\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plans.free.name}</h3>\n                <div className=\"text-4xl font-bold text-gray-900 mb-2\">\n                  {plans.free.price[selectedCountry as keyof typeof plans.free.price]}\n                </div>\n                <p className=\"text-gray-600\">{plans.free.period}</p>\n              </div>\n\n              <div className=\"space-y-4 mb-8\">\n                {plans.free.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <Check className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n                {plans.free.limitations.map((limitation, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <X className=\"w-5 h-5 text-red-500 flex-shrink-0\" />\n                    <span className=\"text-gray-500\">{limitation}</span>\n                  </div>\n                ))}\n              </div>\n\n              <Link href=\"/generate\">\n                <button className=\"w-full bg-gray-100 text-gray-700 py-3 rounded-lg font-medium hover:bg-gray-200 transition-colors\">\n                  Get Started Free\n                </button>\n              </Link>\n            </div>\n\n            {/* Premium Plan */}\n            <div className=\"bg-white rounded-2xl p-8 shadow-2xl border-2 border-blue-600 relative\">\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                <div className=\"bg-blue-600 text-white px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2\">\n                  <Crown className=\"w-4 h-4\" />\n                  Most Popular\n                </div>\n              </div>\n\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{plans.premium.name}</h3>\n                <div className=\"text-4xl font-bold text-blue-600 mb-2\">\n                  {plans.premium.price[selectedCountry as keyof typeof plans.premium.price]}\n                </div>\n                <p className=\"text-gray-600\">{plans.premium.period}</p>\n              </div>\n\n              <div className=\"space-y-4 mb-8\">\n                {plans.premium.features.map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <Check className=\"w-5 h-5 text-green-600 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n\n              {user?.subscriptionStatus === 'active' ? (\n                <div className=\"space-y-4 text-center\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n                    <Check className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-gray-900\">You're already premium!</h3>\n                  <p className=\"text-gray-600\">You have access to all premium features.</p>\n                  <Link href=\"/generate\">\n                    <button className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors\">\n                      Go to Generator\n                    </button>\n                  </Link>\n                </div>\n              ) : !showPayment ? (\n                <div className=\"space-y-4\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={userInfo.email}\n                    onChange={(e) => setUserInfo({...userInfo, email: e.target.value})}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    required\n                  />\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      value={userInfo.firstName}\n                      onChange={(e) => setUserInfo({...userInfo, firstName: e.target.value})}\n                      className=\"px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Last name\"\n                      value={userInfo.lastName}\n                      onChange={(e) => setUserInfo({...userInfo, lastName: e.target.value})}\n                      className=\"px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                  </div>\n                  <button\n                    onClick={startSubscription}\n                    className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors flex items-center justify-center gap-2\"\n                  >\n                    <CreditCard className=\"w-5 h-5\" />\n                    Subscribe Now\n                  </button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  <PayPalButton\n                    country={selectedCountry}\n                    userInfo={userInfo}\n                    onSuccess={handleSubscriptionSuccess}\n                    onError={handleSubscriptionError}\n                    onCancel={handleSubscriptionCancel}\n                  />\n                  <button\n                    onClick={() => setShowPayment(false)}\n                    className=\"w-full text-gray-600 py-2 text-sm hover:text-gray-800 transition-colors\"\n                  >\n                    ← Back to form\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Premium Features Showcase */}\n          <div className=\"bg-white rounded-2xl p-8 shadow-lg border border-gray-200\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-8 text-center\">\n              Premium Features\n            </h2>\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <Eye className=\"w-8 h-8 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Visualizer Access</h3>\n                <p className=\"text-gray-600\">Preview your palettes in real website mockups and UI components</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <Save className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Save Palettes</h3>\n                <p className=\"text-gray-600\">Save unlimited color palettes and organize your collections</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <Shirt className=\"w-8 h-8 text-purple-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Cloth Color Matching</h3>\n                <p className=\"text-gray-600\">Get personalized clothing color palettes based on your facial tone and hair color</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Payment Security */}\n          <div className=\"text-center mt-12\">\n            <p className=\"text-gray-600 mb-4\">\n              Secure payments processed by PayPal. Cancel anytime.\n            </p>\n            <div className=\"flex justify-center items-center gap-4 text-sm text-gray-500\">\n              <span>✓ 256-bit SSL encryption</span>\n              <span>✓ PCI DSS compliant</span>\n              <span>✓ No hidden fees</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15016},"client/src/pages/privacy-policy.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft } from 'lucide-react';\nimport { Helmet } from 'react-helmet-async';\nimport Footer from '@/components/Footer';\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8\">\n      <Helmet>\n        <title>Privacy Policy | Coolors.in</title>\n        <meta name=\"description\" content=\"Learn about how Coolors.in collects, uses, and protects your information when using our color palette generator tool.\" />\n        <meta name=\"robots\" content=\"noindex, follow\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/privacy-policy\" />\n        {/* Structured data for legal page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebPage\",\n            \"name\": \"Privacy Policy | Coolors.in\",\n            \"description\": \"Learn about how Coolors.in collects, uses, and protects your information.\",\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\"\n            },\n            \"license\": \"https://coolors.in/privacy-policy\"\n          })}\n        </script>\n      </Helmet>\n      <div className=\"max-w-3xl mx-auto bg-white rounded-xl shadow-md p-6 md:p-8\">\n        <header className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-800\">Privacy Policy</h1>\n            <div \n              className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors cursor-pointer\"\n              onClick={() => window.location.href = '/'}\n            >\n              <ArrowLeft className=\"mr-1\" size={20} />\n              Back to Home\n            </div>\n          </div>\n          <p className=\"text-gray-500\">Effective date: April 20, 2025</p>\n        </header>\n\n        <div className=\"prose max-w-none\">\n          <p className=\"mb-6\">\n            At Coolors.in, your privacy is important to us. This Privacy Policy explains how we collect, use, \n            and protect your information when you use our website.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Information We Collect:</h2>\n          <ul className=\"list-disc pl-6 mb-6\">\n            <li className=\"mb-2\">\n              <span className=\"font-medium\">Usage Data:</span> We collect anonymous data such as browser type, \n              device information, pages visited, and interaction time.\n            </li>\n            <li className=\"mb-2\">\n              <span className=\"font-medium\">Cookies:</span> We use cookies to improve user experience, analyze traffic, \n              and serve personalized ads via services like Google AdSense.\n            </li>\n          </ul>\n\n          <h2 className=\"text-xl font-semibold mb-3\">How We Use Your Information:</h2>\n          <ul className=\"list-disc pl-6 mb-6\">\n            <li className=\"mb-2\">To improve website functionality</li>\n            <li className=\"mb-2\">To understand user preferences and behaviors</li>\n            <li className=\"mb-2\">To serve relevant ads via Google AdSense</li>\n          </ul>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Third-Party Services:</h2>\n          <p className=\"mb-6\">\n            We use services such as Google Analytics and AdSense. These services may collect and use cookies \n            or identifiers. Learn more about how Google uses your data.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Managing Cookies:</h2>\n          <p className=\"mb-6\">\n            You can disable cookies in your browser settings, but some site features may not work properly.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Data Security:</h2>\n          <p className=\"mb-6\">\n            We don't collect any personal information such as names or email addresses. \n            All usage is anonymous.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Children's Privacy:</h2>\n          <p className=\"mb-6\">\n            Coolors.in does not knowingly collect information from children under the age of 13.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Policy Updates:</h2>\n          <p className=\"mb-6\">\n            We may update this policy from time to time. Changes will be posted with a new effective date.\n          </p>\n\n          <h2 className=\"text-xl font-semibold mb-3\">Contact:</h2>\n          <p className=\"mb-6\">\n            If you have questions, email us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:underline\">coolors.in@gmail.com</a>\n          </p>\n        </div>\n      </div>\n      <div className=\"mt-8\">\n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":4798},"client/src/pages/saved-palettes.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Palette } from \"../types/Palette\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trash2, Loader2, ChevronLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { getPalettes, getUserPalettes, deletePalette } from \"../lib/localStorageService\";\nimport { Helmet } from \"react-helmet-async\";\nimport Footer from \"@/components/Footer\";\n\nexport default function SavedPalettes() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [palettes, setPalettes] = useState<Palette[]>([]);\n  const [deletingId, setDeletingId] = useState<string | null>(null);\n\n  // Load palettes from local storage\n  useEffect(() => {\n    try {\n      if (user) {\n        const userPalettes = getUserPalettes(user.id);\n        setPalettes(userPalettes);\n      } else {\n        setPalettes([]);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to load palettes'));\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  // Handle delete palette\n  const handleDelete = (palette: Palette) => {\n    if (confirm(\"Are you sure you want to delete this palette?\")) {\n      try {\n        setDeletingId(palette.id);\n        deletePalette(palette.id);\n        \n        // Update the state\n        setPalettes(prev => prev.filter(p => p.id !== palette.id));\n        \n        // Show success message\n        toast({\n          title: \"Palette deleted\",\n          description: \"The palette has been deleted successfully.\",\n        });\n      } catch (err) {\n        toast({\n          title: \"Delete failed\",\n          description: err instanceof Error ? err.message : \"An error occurred\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setDeletingId(null);\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen p-4\">\n        <h1 className=\"text-2xl font-bold mb-4\">Error Loading Palettes</h1>\n        <p className=\"text-muted-foreground mb-6\">{error.message}</p>\n        <Link href=\"/\">\n          <Button>Go Home</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <Helmet>\n        <title>My Saved Palettes | Coolors.in</title>\n        <meta name=\"description\" content=\"Access your saved color palettes. View, manage, and load previously created color schemes for your design projects.\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/saved-palettes\" />\n        {/* Structured data for collection page */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"CollectionPage\",\n            \"name\": \"My Saved Palettes | Coolors.in\",\n            \"description\": \"Access your saved color palettes and previously created color schemes.\",\n            \"numberOfItems\": palettes.length,\n            \"itemListElement\": palettes.map((palette, index) => ({\n              \"@type\": \"ListItem\",\n              \"position\": index + 1,\n              \"item\": {\n                \"@type\": \"CreativeWork\",\n                \"name\": palette.name,\n                \"dateCreated\": palette.createdAt instanceof Date \n                  ? palette.createdAt.toISOString() \n                  : new Date(palette.createdAt as any).toISOString()\n              }\n            }))\n          })}\n        </script>\n      </Helmet>\n      <header className=\"mb-8\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div \n            className=\"cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <Button variant=\"outline\" size=\"icon\">\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <h1 className=\"text-3xl font-bold\">Saved Palettes</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          {palettes.length\n            ? `You have ${palettes.length} saved palette${palettes.length !== 1 ? \"s\" : \"\"}.`\n            : \"You don't have any saved palettes yet.\"}\n        </p>\n      </header>\n\n      {palettes.length === 0 ? (\n        <div className=\"text-center py-12 border rounded-lg bg-muted/30\">\n          <h2 className=\"text-xl font-medium mb-2\">No saved palettes</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Create and save palettes from the home page to see them here.\n          </p>\n          <div\n            className=\"cursor-pointer\" \n            onClick={() => window.location.href = '/'}\n          >\n            <Button>Create New Palette</Button>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {palettes.map((palette) => (\n            <Card key={palette.id} className=\"overflow-hidden\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex justify-between items-start\">\n                  <CardTitle>{palette.name}</CardTitle>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => handleDelete(palette)}\n                    disabled={deletingId === palette.id}\n                  >\n                    {deletingId === palette.id ? (\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                    ) : (\n                      <Trash2 className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n                <CardDescription>\n                  {palette.createdAt instanceof Date \n                    ? palette.createdAt.toLocaleDateString() \n                    : new Date(palette.createdAt as any).toLocaleDateString()}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"pb-3\">\n                <div className=\"flex h-20 rounded overflow-hidden\">\n                  {palette.colors.map((color, i) => (\n                    <div\n                      key={i}\n                      className=\"flex-1\"\n                      style={{ backgroundColor: color.hex }}\n                    ></div>\n                  ))}\n                </div>\n              </CardContent>\n              <CardFooter>\n                <div\n                  className=\"cursor-pointer\"\n                  onClick={() => window.location.href = `/?palette=${palette.id}`}\n                >\n                  <Button variant=\"outline\" className=\"w-full\">\n                    Load Palette\n                  </Button>\n                </div>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n      <div className=\"mt-12\">\n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":7359},"client/src/pages/temp.tsx":{"content":"import React, { useState } from 'react';\nimport { Link } from 'wouter';\nimport { ArrowLeft, Layout, Monitor, PieChart, MessageSquare, Calendar } from 'lucide-react';\nimport { usePalette } from '@/contexts/PaletteContext';\nimport { Color } from '@/types/Color';\nimport { cn } from '@/lib/utils';\nimport Footer from '@/components/Footer';\n// Import isLightColor or define it here\nimport { isLightColor } from '@/lib/colorUtils';\n\n// Template types\ntype TemplateType = 'dashboard' | 'landing' | 'analytics' | 'chat' | 'calendar';\n\nexport default function PaletteVisualizer() {\n  const { palette } = usePalette();\n  const [activeTemplate, setActiveTemplate] = useState<TemplateType>('dashboard');\n\n  // Helper to get a specific color from palette by index\n  const getColor = (index: number): string => {\n    if (palette.length <= index) {\n      return '#ffffff';\n    }\n    return palette[index].hex;\n  };\n\n  // Helper to get text color based on background for contrast\n  const getTextColor = (bgColor: string): string => {\n    return isLightColor(bgColor) ? '#1f2937' : '#ffffff';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <Footer />\n      <header className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n            Palette Visualizer\n          </h1>\n          <Link href=\"/\" className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors\">\n            <ArrowLeft className=\"mr-1\" size={20} />\n            Back to Generator\n          </Link>\n        </div>\n        <p className=\"text-gray-600 mt-2\">\n          See how your color palette would look in different UI templates\n        </p>\n      </header>\n\n      {/* Template selector */}\n      <div className=\"bg-white rounded-lg shadow-md p-4 mb-8\">\n        <div className=\"flex flex-wrap gap-2\">\n          <TemplateButton \n            active={activeTemplate === 'dashboard'} \n            onClick={() => setActiveTemplate('dashboard')}\n            icon={<Layout size={18} />}\n            label=\"Dashboard\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'landing'} \n            onClick={() => setActiveTemplate('landing')}\n            icon={<Monitor size={18} />}\n            label=\"Landing Page\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'analytics'} \n            onClick={() => setActiveTemplate('analytics')}\n            icon={<PieChart size={18} />}\n            label=\"Analytics\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'chat'} \n            onClick={() => setActiveTemplate('chat')}\n            icon={<MessageSquare size={18} />}\n            label=\"Chat App\"\n          />\n          <TemplateButton \n            active={activeTemplate === 'calendar'} \n            onClick={() => setActiveTemplate('calendar')}\n            icon={<Calendar size={18} />}\n            label=\"Calendar\"\n          />\n        </div>\n      </div>\n\n      {/* Template visualization */}\n      <div className=\"bg-white rounded-xl shadow-lg overflow-hidden flex-1 mb-6\">\n        {activeTemplate === 'dashboard' && (\n          <DashboardTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'landing' && (\n          <LandingTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'analytics' && (\n          <AnalyticsTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'chat' && (\n          <ChatTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n        {activeTemplate === 'calendar' && (\n          <CalendarTemplate palette={palette} getTextColor={getTextColor} />\n        )}\n      </div>\n\n      {/* Color palette reference */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-medium mb-2\">Your Palette</h3>\n        <div className=\"flex h-12 rounded-md overflow-hidden\">\n          {palette.map((color, index) => (\n            <div \n              key={index} \n              className=\"flex-1\" \n              style={{ backgroundColor: color.hex }}\n            >\n              <div className=\"h-full flex items-center justify-center\">\n                <span className={`text-xs font-medium ${isLightColor(color.hex) ? 'text-gray-800' : 'text-white'}`}>\n                  {color.hex}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Template button component\ninterface TemplateButtonProps {\n  active: boolean;\n  onClick: () => void;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction TemplateButton({ active, onClick, icon, label }: TemplateButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={cn(\n        \"px-4 py-2 rounded-md font-medium flex items-center gap-2 transition-colors\",\n        active \n          ? \"bg-gradient-to-r from-purple-600 to-blue-500 text-white\" \n          : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n      )}\n    >\n      {icon}\n      {label}\n    </button>\n  );\n}\n\n// Dashboard Template\nfunction DashboardTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] flex flex-col\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc' }}>\n      {/* Sidebar */}\n      <div className=\"flex h-full\">\n        <div \n          className=\"w-56 h-full p-4 flex flex-col\" \n          style={{ \n            backgroundColor: palette[0]?.hex || '#1e293b',\n            color: getTextColor(palette[0]?.hex || '#1e293b')\n          }}\n        >\n          <div className=\"font-bold text-xl mb-6\">App Name</div>\n          \n          <div className=\"space-y-1\">\n            <div className=\"p-2 rounded flex items-center gap-2 font-medium\" style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}>\n              <Layout size={16} /> Dashboard\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <PieChart size={16} /> Analytics\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <MessageSquare size={16} /> Messages\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <Calendar size={16} /> Calendar\n            </div>\n          </div>\n\n          <div className=\"mt-auto\">\n            <div className=\"p-2 rounded\">Settings</div>\n            <div className=\"p-2 rounded\">Help</div>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Dashboard</h1>\n            <div \n              className=\"px-4 py-2 rounded\"  \n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              + New Item\n            </div>\n          </div>\n\n          {/* Stats cards */}\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Total Users</div>\n              <div className=\"text-2xl font-bold\">4,927</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 12% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Revenue</div>\n              <div className=\"text-2xl font-bold\">$24,438</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 8% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Active Projects</div>\n              <div className=\"text-2xl font-bold\">23</div>\n              <div className=\"text-xs mt-2 text-red-500\">↓ 2 from last month</div>\n            </div>\n          </div>\n\n          {/* Main panel */}\n          <div \n            className=\"rounded-lg shadow p-4\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"font-bold\">Recent Activity</h2>\n              <div className=\"text-sm\">View All</div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"py-2 border-b last:border-0 flex justify-between\">\n                  <div>User #{i} completed Task #{i}</div>\n                  <div className=\"text-sm opacity-70\">Just now</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Landing Template\nfunction LandingTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] overflow-auto\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Navigation */}\n      <header \n        className=\"px-6 py-4 flex justify-between items-center sticky top-0\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        <div className=\"font-bold text-xl\">Landing Page</div>\n        <nav className=\"flex items-center gap-6\">\n          <div>Features</div>\n          <div>Pricing</div>\n          <div>About</div>\n          <div \n            className=\"px-4 py-2 rounded\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Get Started\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <div \n        className=\"px-6 py-16 flex gap-8 justify-between\" \n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        <div className=\"max-w-md\">\n          <h1 className=\"text-4xl font-bold mb-4\">Welcome to Our Platform</h1>\n          <p className=\"mb-6 opacity-90\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisi vel consectetur interdum.</p>\n          <div className=\"flex gap-4\">\n            <div \n              className=\"px-4 py-2 rounded font-medium\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Get Started\n            </div>\n            <div \n              className=\"px-4 py-2 rounded font-medium border\"\n              style={{ \n                borderColor: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Learn More\n            </div>\n          </div>\n        </div>\n        <div \n          className=\"w-80 h-48 rounded flex items-center justify-center\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <span className=\"text-center\">Hero Image</span>\n        </div>\n      </div>\n\n      {/* Features */}\n      <div className=\"px-6 py-12\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\">Features</h2>\n        <div className=\"grid grid-cols-3 gap-6\">\n          {[1, 2, 3].map(i => (\n            <div \n              key={i} \n              className=\"p-4 rounded-lg text-center\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div \n                className=\"w-12 h-12 rounded-full mx-auto mb-4 flex items-center justify-center\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {i}\n              </div>\n              <h3 className=\"font-bold mb-2\">Feature {i}</h3>\n              <p className=\"text-sm opacity-80\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Analytics Template\nfunction AnalyticsTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Placeholder for analytics charts\n  return (\n    <div className=\"h-[500px] overflow-auto\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      <header className=\"p-4 border-b flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">Analytics Dashboard</h1>\n        <div className=\"flex items-center gap-4\">\n          <div>Last 7 Days ▼</div>\n          <div \n            className=\"px-3 py-1 rounded text-sm\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Export\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div \n            className=\"p-4 rounded-lg\"\n            style={{ \n              backgroundColor: palette[0]?.hex || '#1e293b',\n              color: getTextColor(palette[0]?.hex || '#1e293b')\n            }}\n          >\n            <h3 className=\"font-medium mb-2\">Page Views</h3>\n            <div className=\"text-3xl font-bold\">42,856</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"absolute bottom-0 left-0 right-0 flex items-end justify-between h-32\">\n                {[30, 45, 25, 60, 35, 70, 50].map((h, i) => (\n                  <div \n                    key={i}\n                    className=\"w-8 rounded-t\"\n                    style={{ \n                      height: `${h}%`,\n                      backgroundColor: palette[1]?.hex || '#334155'\n                    }}\n                  ></div>\n                ))}\n              </div>\n              <div className=\"absolute bottom-0 left-0 right-0 flex justify-between text-xs pt-2 border-t\">\n                {['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'].map((day, i) => (\n                  <div key={i} className=\"w-8 text-center\">{day}</div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div \n            className=\"p-4 rounded-lg\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <h3 className=\"font-medium mb-2\">Conversions</h3>\n            <div className=\"text-3xl font-bold\">1,286</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Donut chart placeholder */}\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"relative w-32 h-32 rounded-full border-8 flex items-center justify-center\"\n                  style={{ borderColor: palette[2]?.hex || '#3b82f6' }}\n                >\n                  <div className=\"absolute top-0 right-0 bottom-0 left-0 rounded-full border-8\"\n                    style={{ \n                      borderColor: palette[1]?.hex || '#334155',\n                      clipPath: 'polygon(50% 0, 100% 0, 100% 100%, 50% 100%)'\n                    }}\n                  ></div>\n                  <div className=\"text-2xl font-bold\">68%</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 rounded-lg\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <h3 className=\"font-medium mb-4\">Traffic Sources</h3>\n          <div className=\"space-y-3\">\n            {[\n              { label: 'Direct', value: 42 },\n              { label: 'Social', value: 28 },\n              { label: 'Organic', value: 18 },\n              { label: 'Referral', value: 12 },\n            ].map((item, i) => (\n              <div key={i} className=\"space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <div>{item.label}</div>\n                  <div>{item.value}%</div>\n                </div>\n                <div className=\"w-full h-2 bg-gray-200 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full\"\n                    style={{ \n                      width: `${item.value}%`,\n                      backgroundColor: [palette[0]?.hex, palette[1]?.hex, palette[2]?.hex, palette[4]?.hex][i % 4] || '#3b82f6'\n                    }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Chat Template\nfunction ChatTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  return (\n    <div className=\"h-[500px] flex\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Sidebar */}\n      <div \n        className=\"w-64 flex flex-col border-r\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        <div className=\"p-4 border-b\">\n          <div className=\"font-bold text-lg\">Chats</div>\n        </div>\n        \n        <div className=\"p-2\">\n          <div \n            className=\"p-2 mb-2 rounded\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            <div className=\"font-medium\">Sarah Johnson</div>\n            <div className=\"text-xs opacity-90\">Hey, how's it going?</div>\n          </div>\n          \n          {['Mike Smith', 'Team Chat', 'Jane Doe', 'Support'].map((name, i) => (\n            <div key={i} className=\"p-2 mb-2 rounded hover:bg-opacity-10 hover:bg-white\">\n              <div className=\"font-medium\">{name}</div>\n              <div className=\"text-xs opacity-90\">Last message...</div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat header */}\n        <div \n          className=\"p-4 border-b flex justify-between items-center\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <div className=\"font-bold\">Sarah Johnson</div>\n          <div className=\"flex gap-2\">\n            <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n              📞\n            </div>\n            <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n              📹\n            </div>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <div \n          className=\"flex-1 p-4 overflow-auto\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          {/* Their message */}\n          <div className=\"flex mb-4\">\n            <div \n              className=\"max-w-[80%] p-3 rounded-lg rounded-tl-none\"\n              style={{ \n                backgroundColor: palette[1]?.hex || '#334155',\n                color: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Hey, how's it going? I was wondering if you had time to catch up today?\n            </div>\n          </div>\n\n          {/* My message */}\n          <div className=\"flex justify-end mb-4\">\n            <div \n              className=\"max-w-[80%] p-3 rounded-lg rounded-tr-none\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Hi Sarah! Yes, I'm free around 2pm if that works for you?\n            </div>\n          </div>\n\n          {/* Their message */}\n          <div className=\"flex mb-4\">\n            <div \n              className=\"max-w-[80%] p-3 rounded-lg rounded-tl-none\"\n              style={{ \n                backgroundColor: palette[1]?.hex || '#334155',\n                color: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Perfect! I'll see you at the coffee shop at 2pm.\n            </div>\n          </div>\n        </div>\n\n        {/* Message input */}\n        <div \n          className=\"p-3 border-t flex gap-2\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          <input \n            type=\"text\" \n            placeholder=\"Type a message...\" \n            className=\"flex-1 p-2 rounded-full border bg-transparent outline-none\"\n          />\n          <button \n            className=\"w-10 h-10 rounded-full flex items-center justify-center\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            →\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Calendar Template\nfunction CalendarTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  \n  // Generate calendar grid\n  const calendarDays = Array.from({ length: 30 }, (_, i) => i + 1);\n  \n  return (\n    <div className=\"h-[500px] overflow-auto\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      <header \n        className=\"p-4 flex justify-between items-center\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b'),\n          '--ring-color': palette[2]?.hex || '#3b82f6'\n        } as React.CSSProperties}\n      >\n        <div className=\"font-bold text-xl\">April 2025</div>\n        <div className=\"flex gap-2\">\n          <button className=\"w-8 h-8 flex items-center justify-center rounded-full hover:bg-opacity-10 hover:bg-white\">\n            &lt;\n          </button>\n          <button className=\"w-8 h-8 flex items-center justify-center rounded-full hover:bg-opacity-10 hover:bg-white\">\n            &gt;\n          </button>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        {/* Calendar header */}\n        <div className=\"grid grid-cols-7 mb-2\">\n          {days.map(day => (\n            <div key={day} className=\"text-center font-medium py-2\">{day}</div>\n          ))}\n        </div>\n\n        {/* Calendar grid */}\n        <div className=\"grid grid-cols-7 gap-1\">\n          {/* Empty cells for days before the 1st */}\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={`empty-${i}`} className=\"aspect-square\"></div>\n          ))}\n\n          {/* Calendar days */}\n          {calendarDays.map(day => (\n            <div \n              key={day} \n              className={`aspect-square p-1 rounded-md ${day === 15 ? 'ring-2 ring-opacity-100 ring-color' : ''}`}\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff'),\n                '--ring-color': palette[2]?.hex || '#3b82f6'\n              } as React.CSSProperties}\n            >\n              <div className=\"h-full flex flex-col\">\n                <div className=\"text-sm font-medium\">{day}</div>\n                \n                {/* Show events on specific days */}\n                {day === 10 && (\n                  <div \n                    className=\"mt-1 text-xs p-1 rounded-sm\"\n                    style={{ \n                      backgroundColor: palette[1]?.hex || '#334155',\n                      color: getTextColor(palette[1]?.hex || '#334155')\n                    }}\n                  >\n                    Meeting\n                  </div>\n                )}\n                \n                {day === 15 && (\n                  <div \n                    className=\"mt-1 text-xs p-1 rounded-sm\"\n                    style={{ \n                      backgroundColor: palette[2]?.hex || '#3b82f6',\n                      color: getTextColor(palette[2]?.hex || '#3b82f6')\n                    }}\n                  >\n                    Birthday\n                  </div>\n                )}\n                \n                {day === 22 && (\n                  <div \n                    className=\"mt-1 text-xs p-1 rounded-sm\"\n                    style={{ \n                      backgroundColor: palette[1]?.hex || '#334155',\n                      color: getTextColor(palette[1]?.hex || '#334155')\n                    }}\n                  >\n                    Deadline\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Upcoming events */}\n        <div className=\"mt-6\">\n          <h3 className=\"font-bold mb-2\">Upcoming Events</h3>\n          <div \n            className=\"p-3 rounded-lg mb-2\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            <div className=\"font-medium\">Today - Birthday Party</div>\n            <div className=\"text-sm\">3:00 PM - 6:00 PM</div>\n          </div>\n          \n          <div \n            className=\"p-3 rounded-lg\"\n            style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}\n          >\n            <div className=\"font-medium\">Tomorrow - Team Meeting</div>\n            <div className=\"text-sm\">10:00 AM - 11:30 AM</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":27510},"client/src/types/Color.ts":{"content":"export type Color = {\n  hex: string;\n  rgb: {\n    r: number;\n    g: number;\n    b: number;\n  };\n  locked: boolean;\n  name?: string; // Optional color name property\n};","size_bytes":166},"client/src/types/Palette.ts":{"content":"import { Color } from './Color';\n\nexport type Palette = {\n  id: string;\n  name: string;\n  colors: Color[];\n  userId?: string;\n  createdAt?: Date;\n};","size_bytes":148},"client/src/types/User.ts":{"content":"import { z } from \"zod\";\n\nexport type User = {\n  id: number;\n  username: string;\n  password: string;\n};\n\nexport const insertUserSchema = z.object({\n  username: z.string().min(3),\n  password: z.string().min(6),\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;","size_bytes":273},"client/src/components/modals/AdjustColorModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Color } from \"../../types/Color\";\nimport { hexToRgb, rgbToHex } from \"@/lib/colorUtils\";\n\ninterface AdjustColorModalProps {\n  color: Color;\n  onClose: () => void;\n  onApply: (color: Color) => void;\n}\n\nexport default function AdjustColorModal({ color, onClose, onApply }: AdjustColorModalProps) {\n  const [hexValue, setHexValue] = useState(color.hex);\n  const [redValue, setRedValue] = useState(color.rgb.r);\n  const [greenValue, setGreenValue] = useState(color.rgb.g);\n  const [blueValue, setBlueValue] = useState(color.rgb.b);\n  \n  // Update RGB values when hex changes\n  useEffect(() => {\n    const rgb = hexToRgb(hexValue);\n    if (rgb) {\n      setRedValue(rgb.r);\n      setGreenValue(rgb.g);\n      setBlueValue(rgb.b);\n    }\n  }, [hexValue]);\n  \n  // Handle hex input change\n  const handleHexChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let value = e.target.value;\n    \n    // Always make sure it starts with #\n    if (!value.startsWith(\"#\")) {\n      value = \"#\" + value;\n    }\n    \n    // Validate hex format\n    if (/^#[0-9A-F]{0,6}$/i.test(value)) {\n      setHexValue(value);\n    }\n  };\n  \n  // Handle RGB slider/input changes\n  const handleRedChange = (value: number) => {\n    const validValue = Math.min(255, Math.max(0, value));\n    setRedValue(validValue);\n    updateHexFromRgb(validValue, greenValue, blueValue);\n  };\n  \n  const handleGreenChange = (value: number) => {\n    const validValue = Math.min(255, Math.max(0, value));\n    setGreenValue(validValue);\n    updateHexFromRgb(redValue, validValue, blueValue);\n  };\n  \n  const handleBlueChange = (value: number) => {\n    const validValue = Math.min(255, Math.max(0, value));\n    setBlueValue(validValue);\n    updateHexFromRgb(redValue, greenValue, validValue);\n  };\n  \n  const updateHexFromRgb = (r: number, g: number, b: number) => {\n    setHexValue(rgbToHex(r, g, b));\n  };\n  \n  const handleApply = () => {\n    // Ensure hex is a valid 7-character hex code\n    let finalHex = hexValue;\n    if (finalHex.length < 7) {\n      // Pad with zeros if necessary\n      finalHex = finalHex + \"0\".repeat(7 - finalHex.length);\n    }\n    \n    const updatedColor: Color = {\n      hex: finalHex,\n      rgb: { r: redValue, g: greenValue, b: blueValue },\n      locked: color.locked\n    };\n    \n    onApply(updatedColor);\n  };\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-3 sm:p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full p-4 sm:p-6\">\n        <div className=\"flex justify-between items-center mb-3 sm:mb-4\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-800\">Adjust Color</h2>\n          <button \n            className=\"text-gray-500 hover:text-gray-700\"\n            onClick={onClose}\n            aria-label=\"Close\"\n          >\n            <i className=\"fas fa-times\"></i>\n          </button>\n        </div>\n        \n        <div className=\"mb-4 sm:mb-6 space-y-3 sm:space-y-4\">\n          <div \n            className=\"h-16 sm:h-20 rounded-lg\"\n            style={{ backgroundColor: hexValue.length === 7 ? hexValue : color.hex }}\n            id=\"adjustColorPreview\"\n          ></div>\n          \n          <div>\n            <label htmlFor=\"hexInput\" className=\"block text-gray-700 text-sm font-medium mb-1 sm:mb-2\">Hex</label>\n            <input \n              type=\"text\" \n              id=\"hexInput\"\n              value={hexValue}\n              onChange={handleHexChange}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-1.5 sm:py-2 text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n            />\n          </div>\n          \n          {/* Mobile View: Stack RGB controls vertically */}\n          <div className=\"grid grid-cols-1 gap-3 sm:hidden\">\n            <div>\n              <label htmlFor=\"redSliderMobile\" className=\"block text-gray-700 text-sm font-medium mb-1\">Red</label>\n              <div className=\"flex items-center gap-2\">\n                <input \n                  type=\"range\" \n                  id=\"redSliderMobile\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={redValue}\n                  onChange={(e) => handleRedChange(parseInt(e.target.value))}\n                  className=\"flex-1\"\n                />\n                <input \n                  type=\"number\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={redValue}\n                  onChange={(e) => handleRedChange(parseInt(e.target.value) || 0)}\n                  className=\"w-14 border border-gray-300 rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-primary\"\n                />\n              </div>\n            </div>\n            <div>\n              <label htmlFor=\"greenSliderMobile\" className=\"block text-gray-700 text-sm font-medium mb-1\">Green</label>\n              <div className=\"flex items-center gap-2\">\n                <input \n                  type=\"range\" \n                  id=\"greenSliderMobile\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={greenValue}\n                  onChange={(e) => handleGreenChange(parseInt(e.target.value))}\n                  className=\"flex-1\"\n                />\n                <input \n                  type=\"number\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={greenValue}\n                  onChange={(e) => handleGreenChange(parseInt(e.target.value) || 0)}\n                  className=\"w-14 border border-gray-300 rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-primary\"\n                />\n              </div>\n            </div>\n            <div>\n              <label htmlFor=\"blueSliderMobile\" className=\"block text-gray-700 text-sm font-medium mb-1\">Blue</label>\n              <div className=\"flex items-center gap-2\">\n                <input \n                  type=\"range\" \n                  id=\"blueSliderMobile\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={blueValue}\n                  onChange={(e) => handleBlueChange(parseInt(e.target.value))}\n                  className=\"flex-1\"\n                />\n                <input \n                  type=\"number\" \n                  min=\"0\" \n                  max=\"255\" \n                  value={blueValue}\n                  onChange={(e) => handleBlueChange(parseInt(e.target.value) || 0)}\n                  className=\"w-14 border border-gray-300 rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-primary\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          {/* Desktop View: RGB controls in 3 columns */}\n          <div className=\"hidden sm:grid grid-cols-3 gap-4\">\n            <div>\n              <label htmlFor=\"redSlider\" className=\"block text-gray-700 text-sm font-medium mb-2\">Red</label>\n              <input \n                type=\"range\" \n                id=\"redSlider\" \n                min=\"0\" \n                max=\"255\" \n                value={redValue}\n                onChange={(e) => handleRedChange(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n              <input \n                type=\"number\" \n                min=\"0\" \n                max=\"255\" \n                value={redValue}\n                onChange={(e) => handleRedChange(parseInt(e.target.value) || 0)}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-1 mt-1 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"greenSlider\" className=\"block text-gray-700 text-sm font-medium mb-2\">Green</label>\n              <input \n                type=\"range\" \n                id=\"greenSlider\" \n                min=\"0\" \n                max=\"255\" \n                value={greenValue}\n                onChange={(e) => handleGreenChange(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n              <input \n                type=\"number\" \n                min=\"0\" \n                max=\"255\" \n                value={greenValue}\n                onChange={(e) => handleGreenChange(parseInt(e.target.value) || 0)}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-1 mt-1 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"blueSlider\" className=\"block text-gray-700 text-sm font-medium mb-2\">Blue</label>\n              <input \n                type=\"range\" \n                id=\"blueSlider\" \n                min=\"0\" \n                max=\"255\" \n                value={blueValue}\n                onChange={(e) => handleBlueChange(parseInt(e.target.value))}\n                className=\"w-full\"\n              />\n              <input \n                type=\"number\" \n                min=\"0\" \n                max=\"255\" \n                value={blueValue}\n                onChange={(e) => handleBlueChange(parseInt(e.target.value) || 0)}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-1 mt-1 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end space-x-2 sm:space-x-3\">\n          <button \n            className=\"border border-gray-300 hover:bg-gray-100 text-gray-700 px-3 sm:px-4 py-1.5 sm:py-2 rounded-md text-sm sm:text-base\"\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n          <button \n            className=\"bg-primary hover:bg-blue-600 text-white px-4 sm:px-5 py-1.5 sm:py-2 rounded-md text-sm sm:text-base\"\n            onClick={handleApply}\n          >\n            Apply\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10003},"client/src/components/modals/ExportModal.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport { Color } from \"../../types/Color\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport html2canvas from \"html2canvas\";\n\ninterface ExportModalProps {\n  palette: Color[];\n  onClose: () => void;\n}\n\nexport default function ExportModal({ palette, onClose }: ExportModalProps) {\n  const [exportFormat, setExportFormat] = useState<\"png\" | \"json\" | \"txt\">(\"png\");\n  const [showHex, setShowHex] = useState(true);\n  const [showRGB, setShowRGB] = useState(false);\n  const paletteRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  \n  const handleDownload = async () => {\n    try {\n      if (exportFormat === \"png\") {\n        // Create a PNG using html2canvas\n        if (paletteRef.current) {\n          const canvas = await html2canvas(paletteRef.current);\n          const dataUrl = canvas.toDataURL(\"image/png\");\n          \n          // Create a download link\n          const link = document.createElement(\"a\");\n          link.href = dataUrl;\n          link.download = `palette-${new Date().getTime()}.png`;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n        }\n      } else if (exportFormat === \"json\") {\n        // Export as JSON\n        const data = JSON.stringify(palette.map(color => ({\n          hex: color.hex,\n          rgb: color.rgb\n        })), null, 2);\n        \n        const blob = new Blob([data], { type: \"application/json\" });\n        const url = URL.createObjectURL(blob);\n        \n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `palette-${new Date().getTime()}.json`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      } else if (exportFormat === \"txt\") {\n        // Export as TXT\n        let content = \"\";\n        palette.forEach((color, index) => {\n          content += `Color ${index + 1}:\\n`;\n          content += `Hex: ${color.hex}\\n`;\n          content += `RGB: ${color.rgb.r}, ${color.rgb.g}, ${color.rgb.b}\\n\\n`;\n        });\n        \n        const blob = new Blob([content], { type: \"text/plain\" });\n        const url = URL.createObjectURL(blob);\n        \n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = `palette-${new Date().getTime()}.txt`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      }\n      \n      toast({\n        title: \"Downloaded successfully!\",\n        description: `Palette exported as ${exportFormat.toUpperCase()}`,\n        duration: 2000,\n      });\n      \n      onClose();\n    } catch (error) {\n      console.error(\"Export error:\", error);\n      toast({\n        title: \"Export failed\",\n        description: \"There was an error exporting your palette\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    }\n  };\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-3 sm:p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full p-4 sm:p-6\">\n        <div className=\"flex justify-between items-center mb-3 sm:mb-4\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-800\">Export Palette</h2>\n          <button \n            className=\"text-gray-500 hover:text-gray-700\"\n            onClick={onClose}\n            aria-label=\"Close\"\n          >\n            <i className=\"fas fa-times\"></i>\n          </button>\n        </div>\n        \n        <div className=\"mb-4 sm:mb-6\">\n          <div \n            ref={paletteRef}\n            className=\"flex space-x-1 h-14 sm:h-16 mb-3 sm:mb-4 rounded overflow-hidden\"\n          >\n            {palette.map((color, index) => (\n              <div \n                key={index}\n                className=\"flex-1 relative\"\n                style={{ backgroundColor: color.hex }}\n              >\n                {showHex && (\n                  <div className=\"absolute bottom-1 left-0 right-0 text-center text-[10px] sm:text-xs\" style={{ color: isLightColor(color.hex) ? '#000' : '#fff' }}>\n                    {color.hex}\n                  </div>\n                )}\n                {showRGB && (\n                  <div className=\"absolute top-1 left-0 right-0 text-center text-[10px] sm:text-xs\" style={{ color: isLightColor(color.hex) ? '#000' : '#fff' }}>\n                    {color.rgb.r},{color.rgb.g},{color.rgb.b}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"space-y-3 sm:space-y-4\">\n            <div>\n              <label className=\"block text-gray-700 text-sm font-medium mb-1 sm:mb-2\">Export Format</label>\n              {/* Mobile view */}\n              <div className=\"flex flex-wrap sm:hidden gap-3\">\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatPNGMobile\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"png\"}\n                    onChange={() => setExportFormat(\"png\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatPNGMobile\" className=\"ml-2 text-xs text-gray-700\">PNG Image</label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatJSONMobile\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"json\"}\n                    onChange={() => setExportFormat(\"json\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatJSONMobile\" className=\"ml-2 text-xs text-gray-700\">JSON</label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatTXTMobile\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"txt\"}\n                    onChange={() => setExportFormat(\"txt\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatTXTMobile\" className=\"ml-2 text-xs text-gray-700\">Text</label>\n                </div>\n              </div>\n              \n              {/* Desktop view */}\n              <div className=\"hidden sm:flex space-x-3\">\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatPNG\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"png\"}\n                    onChange={() => setExportFormat(\"png\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatPNG\" className=\"ml-2 text-sm text-gray-700\">PNG Image</label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatJSON\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"json\"}\n                    onChange={() => setExportFormat(\"json\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatJSON\" className=\"ml-2 text-sm text-gray-700\">JSON</label>\n                </div>\n                <div className=\"flex items-center\">\n                  <input \n                    type=\"radio\" \n                    id=\"formatTXT\" \n                    name=\"exportFormat\" \n                    checked={exportFormat === \"txt\"}\n                    onChange={() => setExportFormat(\"txt\")}\n                    className=\"h-4 w-4 text-primary\"\n                  />\n                  <label htmlFor=\"formatTXT\" className=\"ml-2 text-sm text-gray-700\">Text</label>\n                </div>\n              </div>\n            </div>\n            \n            {exportFormat === \"png\" && (\n              <div>\n                <label className=\"block text-gray-700 text-sm font-medium mb-1 sm:mb-2\">Image Options</label>\n                <div className=\"flex flex-wrap sm:flex-nowrap gap-3 sm:space-x-3\">\n                  <div className=\"flex items-center\">\n                    <input \n                      type=\"checkbox\" \n                      id=\"showHex\" \n                      checked={showHex}\n                      onChange={() => setShowHex(!showHex)}\n                      className=\"h-4 w-4 text-primary\"\n                    />\n                    <label htmlFor=\"showHex\" className=\"ml-2 text-xs sm:text-sm text-gray-700\">Show Hex Codes</label>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <input \n                      type=\"checkbox\" \n                      id=\"showRGB\" \n                      checked={showRGB}\n                      onChange={() => setShowRGB(!showRGB)}\n                      className=\"h-4 w-4 text-primary\"\n                    />\n                    <label htmlFor=\"showRGB\" className=\"ml-2 text-xs sm:text-sm text-gray-700\">Show RGB Values</label>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex justify-end\">\n          <button \n            className=\"bg-primary hover:bg-blue-600 text-white px-4 sm:px-5 py-1.5 sm:py-2 rounded-md flex items-center space-x-1.5 sm:space-x-2 text-sm sm:text-base\"\n            onClick={handleDownload}\n          >\n            <i className=\"fas fa-download\"></i>\n            <span>Download</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Helper function to determine if a color is light or dark\nfunction isLightColor(hexColor: string) {\n  const r = parseInt(hexColor.slice(1, 3), 16);\n  const g = parseInt(hexColor.slice(3, 5), 16);\n  const b = parseInt(hexColor.slice(5, 7), 16);\n  \n  // Calculate perceived brightness (YIQ formula)\n  const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;\n  return yiq >= 128;\n}\n","size_bytes":10231},"client/src/components/modals/OnboardingTour.tsx":{"content":"import React from \"react\";\n\ninterface OnboardingTourProps {\n  onClose: () => void;\n}\n\nexport default function OnboardingTour({ onClose }: OnboardingTourProps) {\n  const handleStartTour = () => {\n    // In a real implementation, we would use react-joyride to start the tour\n    // For now, we'll just close the modal\n    onClose();\n  };\n  \n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-3 sm:p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full p-4 sm:p-6\">\n        <div className=\"flex justify-between items-center mb-3 sm:mb-4\">\n          <h2 className=\"text-xl sm:text-2xl font-bold text-gray-800\">Welcome to Coolors.in!</h2>\n          <button \n            className=\"text-gray-500 hover:text-gray-700\" \n            onClick={onClose}\n            aria-label=\"Close\"\n          >\n            <i className=\"fas fa-times\"></i>\n          </button>\n        </div>\n        \n        <div className=\"mb-4 sm:mb-6\">\n          <p className=\"text-gray-600 text-sm sm:text-base mb-3 sm:mb-4\">Let's take a quick tour to show you how to use this color palette generator.</p>\n          \n          <div className=\"space-y-3 sm:space-y-4\">\n            <div className=\"flex items-start space-x-2 sm:space-x-3\">\n              <div className=\"bg-primary text-white rounded-full w-6 h-6 sm:w-7 sm:h-7 flex items-center justify-center flex-shrink-0 mt-0.5 text-sm\">1</div>\n              <div>\n                <h3 className=\"font-semibold text-gray-800 text-sm sm:text-base\">Generate Colors</h3>\n                <p className=\"text-gray-600 text-xs sm:text-sm\">Press the spacebar or click the \"Generate\" button to create a random color palette.</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-2 sm:space-x-3\">\n              <div className=\"bg-primary text-white rounded-full w-6 h-6 sm:w-7 sm:h-7 flex items-center justify-center flex-shrink-0 mt-0.5 text-sm\">2</div>\n              <div>\n                <h3 className=\"font-semibold text-gray-800 text-sm sm:text-base\">Lock Colors</h3>\n                <p className=\"text-gray-600 text-xs sm:text-sm\">Click the lock icon to keep a color when generating new palettes.</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-2 sm:space-x-3\">\n              <div className=\"bg-primary text-white rounded-full w-6 h-6 sm:w-7 sm:h-7 flex items-center justify-center flex-shrink-0 mt-0.5 text-sm\">3</div>\n              <div>\n                <h3 className=\"font-semibold text-gray-800 text-sm sm:text-base\">Copy Color Codes</h3>\n                <p className=\"text-gray-600 text-xs sm:text-sm\">Click on any color's hex code to copy it to your clipboard.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex justify-between items-center\">\n          <button \n            className=\"text-gray-600 hover:text-gray-800 text-xs sm:text-sm\" \n            onClick={onClose}\n          >\n            Skip tour\n          </button>\n          <button \n            className=\"bg-primary hover:bg-blue-600 text-white px-4 sm:px-5 py-1.5 sm:py-2 rounded-md text-xs sm:text-sm\"\n            onClick={handleStartTour}\n          >\n            Start Tour\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3374},"client/src/components/modals/WelcomeModal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Palette, Lock, Unlock, Mouse, Sliders, Download } from \"lucide-react\";\n\nexport default function WelcomeModal() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    // Check if the user has seen the welcome modal before\n    const hasSeenWelcome = localStorage.getItem(\"hasSeenWelcomeModal\");\n    \n    if (!hasSeenWelcome) {\n      // Show the modal if the user hasn't seen it yet\n      setIsOpen(true);\n      // Mark that the user has seen the welcome modal\n      localStorage.setItem(\"hasSeenWelcomeModal\", \"true\");\n    }\n  }, []);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-2xl\">\n            <Palette className=\"mr-2 h-6 w-6 text-primary\" />\n            Welcome to Color Palette Generator!\n          </DialogTitle>\n          <DialogDescription>\n            A simple guide to help you get started\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 py-4\">\n          <div className=\"flex items-start gap-2\">\n            <div className=\"bg-primary/10 p-2 rounded-full\">\n              <Palette className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Generate Colors</h3>\n              <p className=\"text-sm text-muted-foreground\">Press the spacebar or click the \"Generate\" button to create a new color palette.</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start gap-2\">\n            <div className=\"bg-primary/10 p-2 rounded-full\">\n              <Lock className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Lock Colors</h3>\n              <p className=\"text-sm text-muted-foreground\">Click the lock icon on any color to keep it when generating new palettes.</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start gap-2\">\n            <div className=\"bg-primary/10 p-2 rounded-full\">\n              <Mouse className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Copy Color Codes</h3>\n              <p className=\"text-sm text-muted-foreground\">Click on a color's hex code to copy it to your clipboard.</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start gap-2\">\n            <div className=\"bg-primary/10 p-2 rounded-full\">\n              <Sliders className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Adjust Colors</h3>\n              <p className=\"text-sm text-muted-foreground\">Use the adjustment icon to fine-tune colors with RGB sliders.</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start gap-2\">\n            <div className=\"bg-primary/10 p-2 rounded-full\">\n              <Download className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-medium\">Export Palette</h3>\n              <p className=\"text-sm text-muted-foreground\">Save your palette as PNG or JSON for later use in your projects.</p>\n            </div>\n          </div>\n        </div>\n        \n        <DialogFooter className=\"flex justify-end gap-2\">\n          <Button onClick={() => setIsOpen(false)}>\n            Got it!\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3784},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"pages/api/paypal/setup.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { loadPaypalDefault } from '../../../server/paypal';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'GET') {\n    return loadPaypalDefault(req as any, res as any);\n  } else {\n    res.setHeader('Allow', ['GET']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}","size_bytes":398},"pages/api/subscription/capture/[orderId].ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { captureSubscription } from '../../../../server/paypal';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    return captureSubscription(req as any, res as any);\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}","size_bytes":407},"pages/api/subscription/create.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { createSubscription } from '../../../server/paypal';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    return createSubscription(req as any, res as any);\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}","size_bytes":402},"pages/api/user/subscription.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    // Update user subscription status after successful payment\n    const { userId, subscriptionStatus, subscriptionId, subscriptionPlan, subscriptionCountry } = req.body;\n    \n    try {\n      // Here we would update the user in the database\n      // For now, we'll return success as the system is using localStorage\n      res.status(200).json({ \n        message: 'Subscription updated successfully',\n        user: {\n          id: userId,\n          subscriptionStatus,\n          subscriptionId,\n          subscriptionPlan,\n          subscriptionCountry\n        }\n      });\n    } catch (error) {\n      console.error('Failed to update subscription:', error);\n      res.status(500).json({ error: 'Failed to update subscription' });\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}","size_bytes":1021},"client/src/components/ProfessionalPalettes.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Crown, RefreshCw, Palette as PaletteIcon } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Palette } from '@/types/Palette';\nimport { Color } from '@/types/Color';\nimport { usePalette } from '@/contexts/PaletteContext';\nimport { isLightColor } from '@/lib/colorUtils';\n\ninterface ProfessionalPalettesProps {\n  onSelectPalette?: (colors: Color[]) => void;\n}\n\nexport default function ProfessionalPalettes({ onSelectPalette }: ProfessionalPalettesProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { setPalette } = usePalette();\n  const [palettes, setPalettes] = useState<Palette[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const isPremium = true; // All features are now free\n\n  const fetchProfessionalPalettes = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/professional-palettes');\n      if (response.ok) {\n        const data = await response.json();\n        setPalettes(data);\n      } else {\n        throw new Error('Failed to fetch professional palettes');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to load professional palettes.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelectPalette = (palette: Palette) => {\n    if (onSelectPalette) {\n      onSelectPalette(palette.colors);\n    } else {\n      setPalette(palette.colors);\n    }\n    \n    toast({\n      title: \"Palette applied\",\n      description: `\"${palette.name}\" palette has been applied.`,\n    });\n  };\n\n  if (!isPremium) {\n    return (\n      <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 border border-purple-200 rounded-xl p-6 mb-8\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center\">\n            <Crown className=\"w-6 h-6 text-purple-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n              Professional Color Palettes\n            </h3>\n            <p className=\"text-gray-600 mb-3\">\n              Access curated professional palettes designed by experts for branding, web design, and marketing.\n            </p>\n            <button \n              onClick={() => window.location.href = '/pricing'}\n              className=\"bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-colors font-medium\"\n            >\n              Upgrade to Premium\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-xl p-6 mb-8 shadow-md border border-gray-100\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div className=\"flex items-center gap-3\">\n          <PaletteIcon className=\"w-6 h-6 text-blue-600\" />\n          <h2 className=\"text-xl font-semibold text-gray-800\">Professional Palettes</h2>\n        </div>\n        <button\n          onClick={fetchProfessionalPalettes}\n          disabled={loading}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50\"\n        >\n          <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n          {loading ? 'Loading...' : 'Load Palettes'}\n        </button>\n      </div>\n\n      {palettes.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {palettes.map((palette) => (\n            <div \n              key={palette.id}\n              className=\"border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={() => handleSelectPalette(palette)}\n            >\n              <div className=\"flex h-24\">\n                {palette.colors.map((color, index) => {\n                  const textColor = isLightColor(color.hex) ? 'text-gray-800' : 'text-white';\n                  return (\n                    <div\n                      key={index}\n                      className=\"flex-1 relative group\"\n                      style={{ backgroundColor: color.hex }}\n                    >\n                      <div className={`absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity ${textColor}`}>\n                        <span className=\"text-xs font-mono\">{color.hex}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"p-3\">\n                <h3 className=\"font-medium text-gray-900 mb-1\">{palette.name}</h3>\n                <p className=\"text-sm text-gray-500\">Click to apply this palette</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {palettes.length === 0 && !loading && (\n        <div className=\"text-center py-8 text-gray-500\">\n          <Crown className=\"w-12 h-12 mx-auto mb-3 text-gray-400\" />\n          <p>Click \"Load Palettes\" to view professional color combinations</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5273},"client/src/pages/cloth-color.tsx":{"content":"import React, { useState } from 'react';\nimport { Crown, Camera, Palette, Upload, ArrowRight, Sparkles } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Link } from 'wouter';\nimport { hexToRgb } from '@/lib/colorUtils';\nimport { Color } from '@/types/Color';\n\n// Color recommendations based on skin tone and hair color\nconst COLOR_RECOMMENDATIONS = {\n  skinTone: {\n    fair: {\n      warm: ['#FFF5E1', '#FFE5B4', '#FFC48C', '#FF8A65', '#A8E6CF'],\n      cool: ['#F8F8FF', '#E6E6FA', '#DDA0DD', '#B19CD9', '#87CEEB'],\n      neutral: ['#F5F5DC', '#E6E6E6', '#D3D3D3', '#C0C0C0', '#A9A9A9']\n    },\n    medium: {\n      warm: ['#F4A460', '#DEB887', '#CD853F', '#D2691E', '#FF6347'],\n      cool: ['#4682B4', '#5F9EA0', '#6495ED', '#7B68EE', '#9370DB'],\n      neutral: ['#BC8F8F', '#F0E68C', '#DAA520', '#B8860B', '#CD853F']\n    },\n    dark: {\n      warm: ['#8B4513', '#A0522D', '#CD853F', '#D2B48C', '#F0E68C'],\n      cool: ['#2F4F4F', '#483D8B', '#4B0082', '#6A5ACD', '#7B68EE'],\n      neutral: ['#696969', '#808080', '#A9A9A9', '#C0C0C0', '#D3D3D3']\n    }\n  },\n  hairColor: {\n    blonde: ['#FFE135', '#F4D03F', '#F7DC6F', '#FCDC00', '#FFD700'],\n    brown: ['#8B4513', '#A0522D', '#CD853F', '#D2691E', '#BC8F8F'],\n    black: ['#000000', '#2F2F2F', '#4A4A4A', '#696969', '#808080'],\n    red: ['#DC143C', '#B22222', '#CD5C5C', '#F08080', '#FF6347'],\n    gray: ['#808080', '#A9A9A9', '#C0C0C0', '#D3D3D3', '#DCDCDC']\n  }\n};\n\nexport default function ClothColorPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedSkinTone, setSelectedSkinTone] = useState<string>('');\n  const [selectedUndertone, setSelectedUndertone] = useState<string>('');\n  const [selectedHairColor, setSelectedHairColor] = useState<string>('');\n  const [generatedPalette, setGeneratedPalette] = useState<Color[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const isPremium = true; // All features are now free\n\n  const generateClothPalette = () => {\n    if (!selectedSkinTone || !selectedUndertone || !selectedHairColor) {\n      toast({\n        title: \"Missing Selection\",\n        description: \"Please select your skin tone, undertone, and hair color.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n\n    // Simulate AI processing\n    setTimeout(() => {\n      const skinColors = COLOR_RECOMMENDATIONS.skinTone[selectedSkinTone as keyof typeof COLOR_RECOMMENDATIONS.skinTone][selectedUndertone as keyof typeof COLOR_RECOMMENDATIONS.skinTone.fair];\n      const hairColors = COLOR_RECOMMENDATIONS.hairColor[selectedHairColor as keyof typeof COLOR_RECOMMENDATIONS.hairColor];\n      \n      // Combine and select best colors\n      const combinedColors = [...skinColors.slice(0, 3), ...hairColors.slice(0, 2)];\n      \n      const palette: Color[] = combinedColors.map(hex => ({\n        hex,\n        rgb: hexToRgb(hex) || { r: 0, g: 0, b: 0 },\n        locked: false,\n        name: getColorName(hex)\n      }));\n\n      setGeneratedPalette(palette);\n      setLoading(false);\n\n      toast({\n        title: \"Palette Generated!\",\n        description: \"Your personalized cloth color palette is ready.\",\n      });\n    }, 2000);\n  };\n\n  const getColorName = (hex: string): string => {\n    const colorNames: { [key: string]: string } = {\n      '#FFF5E1': 'Cream',\n      '#FFE5B4': 'Peach',\n      '#F4A460': 'Sandy Brown',\n      '#8B4513': 'Saddle Brown',\n      '#FFE135': 'Golden Yellow',\n      '#DC143C': 'Crimson',\n      '#000000': 'Black',\n      '#808080': 'Gray'\n    };\n    return colorNames[hex] || 'Color';\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <Link href=\"/\">\n            <button className=\"text-blue-600 hover:text-blue-800 mb-4\">← Back to Generator</button>\n          </Link>\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-4\">\n            Cloth Color Recommendations\n          </h1>\n          <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n            Get personalized color recommendations based on your skin tone and hair color.\n          </p>\n        </div>\n\n        {/* Selection Form */}\n        <div className=\"bg-white rounded-xl p-6 mb-8 shadow-md\">\n          <h2 className=\"text-xl font-semibold mb-6\">Tell us about yourself</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Skin Tone */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Skin Tone</label>\n              <select\n                value={selectedSkinTone}\n                onChange={(e) => setSelectedSkinTone(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">Select skin tone</option>\n                <option value=\"fair\">Fair</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"dark\">Dark</option>\n              </select>\n            </div>\n\n            {/* Undertone */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Undertone</label>\n              <select\n                value={selectedUndertone}\n                onChange={(e) => setSelectedUndertone(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">Select undertone</option>\n                <option value=\"warm\">Warm</option>\n                <option value=\"cool\">Cool</option>\n                <option value=\"neutral\">Neutral</option>\n              </select>\n            </div>\n\n            {/* Hair Color */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Hair Color</label>\n              <select\n                value={selectedHairColor}\n                onChange={(e) => setSelectedHairColor(e.target.value)}\n                className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"\">Select hair color</option>\n                <option value=\"blonde\">Blonde</option>\n                <option value=\"brown\">Brown</option>\n                <option value=\"black\">Black</option>\n                <option value=\"red\">Red</option>\n                <option value=\"gray\">Gray/Silver</option>\n              </select>\n            </div>\n          </div>\n\n          <button\n            onClick={generateClothPalette}\n            disabled={loading || !selectedSkinTone || !selectedUndertone || !selectedHairColor}\n            className=\"mt-6 w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n          >\n            {loading ? (\n              <>\n                <div className=\"animate-spin w-5 h-5 border-2 border-white border-t-transparent rounded-full\"></div>\n                Analyzing your features...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"w-5 h-5\" />\n                Generate My Palette\n              </>\n            )}\n          </button>\n        </div>\n\n        {/* Generated Palette */}\n        {generatedPalette.length > 0 && (\n          <div className=\"bg-white rounded-xl p-6 shadow-md\">\n            <h2 className=\"text-xl font-semibold mb-4\">Your Personalized Cloth Colors</h2>\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              {generatedPalette.map((color, index) => (\n                <div key={index} className=\"text-center\">\n                  <div\n                    className=\"w-full h-24 rounded-lg border border-gray-200 mb-2\"\n                    style={{ backgroundColor: color.hex }}\n                  ></div>\n                  <p className=\"text-sm font-medium text-gray-900\">{color.name}</p>\n                  <p className=\"text-xs text-gray-500\">{color.hex}</p>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n              <h3 className=\"font-semibold text-blue-900 mb-2\">Styling Tips:</h3>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>• Use these colors as your foundation pieces</li>\n                <li>• Mix and match within this palette for coordinated looks</li>\n                <li>• Add neutral colors like white, black, or gray as accents</li>\n                <li>• These colors will enhance your natural beauty and skin tone</li>\n              </ul>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9004},"pages/api/professional-palettes.ts":{"content":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { hexToRgb } from '../../client/src/lib/colorUtils';\nimport { Color } from '../../client/src/types/Color';\nimport { Palette } from '../../client/src/types/Palette';\n\n// Professional palettes for premium users\nconst PROFESSIONAL_PALETTES: Palette[] = [\n  {\n    id: 'pro-1',\n    name: 'Corporate Blue',\n    colors: [\n      { hex: '#003366', rgb: hexToRgb('#003366') || { r: 0, g: 51, b: 102 }, locked: false, name: 'Navy' },\n      { hex: '#004488', rgb: hexToRgb('#004488') || { r: 0, g: 68, b: 136 }, locked: false, name: 'Royal Blue' },\n      { hex: '#0066CC', rgb: hexToRgb('#0066CC') || { r: 0, g: 102, b: 204 }, locked: false, name: 'Blue' },\n      { hex: '#E6F2FF', rgb: hexToRgb('#E6F2FF') || { r: 230, g: 242, b: 255 }, locked: false, name: 'Light Blue' },\n      { hex: '#F8FBFF', rgb: hexToRgb('#F8FBFF') || { r: 248, g: 251, b: 255 }, locked: false, name: 'Ice Blue' },\n    ]\n  },\n  {\n    id: 'pro-2',\n    name: 'Luxury Gold',\n    colors: [\n      { hex: '#2C1810', rgb: hexToRgb('#2C1810') || { r: 44, g: 24, b: 16 }, locked: false, name: 'Dark Brown' },\n      { hex: '#B8860B', rgb: hexToRgb('#B8860B') || { r: 184, g: 134, b: 11 }, locked: false, name: 'Dark Goldenrod' },\n      { hex: '#FFD700', rgb: hexToRgb('#FFD700') || { r: 255, g: 215, b: 0 }, locked: false, name: 'Gold' },\n      { hex: '#FFF8DC', rgb: hexToRgb('#FFF8DC') || { r: 255, g: 248, b: 220 }, locked: false, name: 'Cornsilk' },\n      { hex: '#FFFEF7', rgb: hexToRgb('#FFFEF7') || { r: 255, g: 254, b: 247 }, locked: false, name: 'Ivory' },\n    ]\n  },\n  {\n    id: 'pro-3',\n    name: 'Modern Neutral',\n    colors: [\n      { hex: '#1A1A1A', rgb: hexToRgb('#1A1A1A') || { r: 26, g: 26, b: 26 }, locked: false, name: 'Charcoal' },\n      { hex: '#4A4A4A', rgb: hexToRgb('#4A4A4A') || { r: 74, g: 74, b: 74 }, locked: false, name: 'Dark Gray' },\n      { hex: '#8E8E93', rgb: hexToRgb('#8E8E93') || { r: 142, g: 142, b: 147 }, locked: false, name: 'Medium Gray' },\n      { hex: '#E5E5E7', rgb: hexToRgb('#E5E5E7') || { r: 229, g: 229, b: 231 }, locked: false, name: 'Light Gray' },\n      { hex: '#F2F2F7', rgb: hexToRgb('#F2F2F7') || { r: 242, g: 242, b: 247 }, locked: false, name: 'Off White' },\n    ]\n  },\n  {\n    id: 'pro-4',\n    name: 'Tech Green',\n    colors: [\n      { hex: '#0D1117', rgb: hexToRgb('#0D1117') || { r: 13, g: 17, b: 23 }, locked: false, name: 'GitHub Dark' },\n      { hex: '#238636', rgb: hexToRgb('#238636') || { r: 35, g: 134, b: 54 }, locked: false, name: 'GitHub Green' },\n      { hex: '#39D353', rgb: hexToRgb('#39D353') || { r: 57, g: 211, b: 83 }, locked: false, name: 'Success Green' },\n      { hex: '#DCFFE4', rgb: hexToRgb('#DCFFE4') || { r: 220, g: 255, b: 228 }, locked: false, name: 'Light Green' },\n      { hex: '#F6FFED', rgb: hexToRgb('#F6FFED') || { r: 246, g: 255, b: 237 }, locked: false, name: 'Mint' },\n    ]\n  },\n  {\n    id: 'pro-5',\n    name: 'Startup Orange',\n    colors: [\n      { hex: '#7C2D12', rgb: hexToRgb('#7C2D12') || { r: 124, g: 45, b: 18 }, locked: false, name: 'Dark Orange' },\n      { hex: '#EA580C', rgb: hexToRgb('#EA580C') || { r: 234, g: 88, b: 12 }, locked: false, name: 'Orange' },\n      { hex: '#FB923C', rgb: hexToRgb('#FB923C') || { r: 251, g: 146, b: 60 }, locked: false, name: 'Light Orange' },\n      { hex: '#FED7AA', rgb: hexToRgb('#FED7AA') || { r: 254, g: 215, b: 170 }, locked: false, name: 'Peach' },\n      { hex: '#FFF7ED', rgb: hexToRgb('#FFF7ED') || { r: 255, g: 247, b: 237 }, locked: false, name: 'Cream' },\n    ]\n  },\n  {\n    id: 'pro-6',\n    name: 'Purple Power',\n    colors: [\n      { hex: '#581C87', rgb: hexToRgb('#581C87') || { r: 88, g: 28, b: 135 }, locked: false, name: 'Dark Purple' },\n      { hex: '#7C3AED', rgb: hexToRgb('#7C3AED') || { r: 124, g: 58, b: 237 }, locked: false, name: 'Purple' },\n      { hex: '#A78BFA', rgb: hexToRgb('#A78BFA') || { r: 167, g: 139, b: 250 }, locked: false, name: 'Light Purple' },\n      { hex: '#E9D5FF', rgb: hexToRgb('#E9D5FF') || { r: 233, g: 213, b: 255 }, locked: false, name: 'Lavender' },\n      { hex: '#FAF5FF', rgb: hexToRgb('#FAF5FF') || { r: 250, g: 245, b: 255 }, locked: false, name: 'Purple White' },\n    ]\n  }\n];\n\ntype ErrorResponse = {\n  error: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Palette[] | ErrorResponse>\n) {\n  if (req.method === 'GET') {\n    // In a real app, you would check user subscription status here\n    // For now, we'll return the professional palettes\n    return res.status(200).json(PROFESSIONAL_PALETTES);\n  } else {\n    res.setHeader('Allow', ['GET']);\n    return res.status(405).json({ error: `Method ${req.method} Not Allowed` });\n  }\n}","size_bytes":4692},"client/src/hooks/use-palettes.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"./use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Palette, CreatePalette } from \"../../../shared/schema\";\n\nexport function usePalettes() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch user's palettes\n  const {\n    data: palettes = [],\n    isLoading,\n    error,\n  } = useQuery<Palette[]>({\n    queryKey: [\"/api/palettes\"],\n    enabled: !!user,\n    retry: false,\n  });\n\n  // Create palette mutation\n  const createPaletteMutation = useMutation({\n    mutationFn: async (paletteData: CreatePalette) => {\n      const response = await apiRequest(\"POST\", \"/api/palettes\", paletteData);\n      return await response.json();\n    },\n    onSuccess: (newPalette: Palette) => {\n      queryClient.setQueryData([\"/api/palettes\"], (old: Palette[] = []) => [...old, newPalette]);\n      toast({\n        title: \"Palette saved\",\n        description: `\"${newPalette.name}\" has been saved to your collection.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Save failed\",\n        description: error.message || \"Failed to save palette\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update palette mutation\n  const updatePaletteMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<CreatePalette> }) => {\n      const response = await apiRequest(\"PUT\", `/api/palettes/${id}`, data);\n      return await response.json();\n    },\n    onSuccess: (updatedPalette: Palette) => {\n      queryClient.setQueryData([\"/api/palettes\"], (old: Palette[] = []) =>\n        old.map(palette => palette.id === updatedPalette.id ? updatedPalette : palette)\n      );\n      toast({\n        title: \"Palette updated\",\n        description: `\"${updatedPalette.name}\" has been updated.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update palette\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete palette mutation\n  const deletePaletteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/palettes/${id}`);\n      return id;\n    },\n    onSuccess: (deletedId: number) => {\n      queryClient.setQueryData([\"/api/palettes\"], (old: Palette[] = []) =>\n        old.filter(palette => palette.id !== deletedId)\n      );\n      toast({\n        title: \"Palette deleted\",\n        description: \"Palette has been removed from your collection.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message || \"Failed to delete palette\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper function to save current palette\n  const savePalette = (name: string, colors: string[], description?: string, makePublic: boolean = false) => {\n    if (!user) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to save palettes.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createPaletteMutation.mutate({\n      name,\n      colors,\n      description,\n      isPublic: makePublic,\n    });\n  };\n\n  // Tracking functions\n  const trackPaletteSave = async (paletteId: number) => {\n    try {\n      await apiRequest(\"POST\", `/api/palettes/${paletteId}/track/save`);\n    } catch (error) {\n      // Silent fail for tracking\n      console.warn(\"Failed to track palette save:\", error);\n    }\n  };\n\n  const trackPaletteDownload = async (paletteId: number) => {\n    try {\n      await apiRequest(\"POST\", `/api/palettes/${paletteId}/track/download`);\n    } catch (error) {\n      // Silent fail for tracking\n      console.warn(\"Failed to track palette download:\", error);\n    }\n  };\n\n  const trackPaletteView = async (paletteId: number) => {\n    try {\n      await apiRequest(\"POST\", `/api/palettes/${paletteId}/track/view`);\n    } catch (error) {\n      // Silent fail for tracking\n      console.warn(\"Failed to track palette view:\", error);\n    }\n  };\n\n  return {\n    palettes,\n    isLoading,\n    error,\n    savePalette,\n    updatePalette: updatePaletteMutation.mutate,\n    deletePalette: deletePaletteMutation.mutate,\n    trackPaletteSave,\n    trackPaletteDownload,\n    trackPaletteView,\n    isSaving: createPaletteMutation.isPending,\n    isUpdating: updatePaletteMutation.isPending,\n    isDeleting: deletePaletteMutation.isPending,\n  };\n}","size_bytes":4586},"client/src/components/ThemeFilter.tsx":{"content":"import React from 'react';\nimport { Palette, Thermometer, Sun, Snowflake, Zap, Minus, Moon, Lightbulb, Shuffle } from 'lucide-react';\n\ninterface ThemeFilterProps {\n  selectedTheme: string;\n  onThemeChange: (theme: string) => void;\n}\n\nexport const COLOR_THEMES = [\n  { id: 'all', name: 'All Themes', icon: Shuffle, description: 'Show all palettes' },\n  { id: 'pastel', name: 'Pastel', icon: Palette, description: 'Soft, light colors' },\n  { id: 'warm', name: 'Warm', icon: Sun, description: 'Oranges, reds, yellows' },\n  { id: 'cold', name: 'Cool', icon: Snowflake, description: 'Blues, greens, purples' },\n  { id: 'vibrant', name: 'Vibrant', icon: Zap, description: 'Bold, saturated colors' },\n  { id: 'neutral', name: 'Neutral', icon: Minus, description: 'Grays, beiges, earth tones' },\n  { id: 'dark', name: 'Dark', icon: Moon, description: 'Deep, rich colors' },\n  { id: 'light', name: 'Light', icon: Lightbulb, description: 'Bright, airy colors' },\n];\n\nexport default function ThemeFilter({ selectedTheme, onThemeChange }: ThemeFilterProps) {\n  return (\n    <div className=\"mb-6\">\n      <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Filter by Theme</h3>\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-8 gap-2\">\n        {COLOR_THEMES.map((theme) => {\n          const Icon = theme.icon;\n          const isSelected = selectedTheme === theme.id;\n          \n          return (\n            <button\n              key={theme.id}\n              onClick={() => onThemeChange(theme.id)}\n              className={`\n                relative group flex flex-col items-center p-3 rounded-lg border-2 transition-all duration-200\n                ${isSelected \n                  ? 'border-blue-500 bg-blue-50 text-blue-700' \n                  : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'\n                }\n              `}\n              title={theme.description}\n            >\n              <Icon \n                size={20} \n                className={`mb-1 ${isSelected ? 'text-blue-600' : 'text-gray-500'}`} \n              />\n              <span className=\"text-xs font-medium text-center leading-tight\">\n                {theme.name}\n              </span>\n              \n              {/* Selection indicator */}\n              {isSelected && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full flex items-center justify-center\">\n                  <div className=\"w-1.5 h-1.5 bg-white rounded-full\"></div>\n                </div>\n              )}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":2615},"client/src/pages/clothing-palette-page.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Shirt, User, Palette, Info } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Color theory data for clothing recommendations\nconst SKIN_TONES = [\n  { id: 'very-fair', name: 'Very Fair', description: 'Porcelain, very light with pink or neutral undertones' },\n  { id: 'fair', name: 'Fair', description: 'Light skin that burns easily, light freckles possible' },\n  { id: 'light', name: 'Light', description: 'Light skin that tans gradually, may have freckles' },\n  { id: 'medium', name: 'Medium', description: 'Medium skin that tans well, rarely burns' },\n  { id: 'tan', name: 'Tan', description: 'Olive or golden medium skin that tans easily' },\n  { id: 'deep', name: 'Deep', description: 'Rich, deep skin tones with warm or cool undertones' },\n  { id: 'very-deep', name: 'Very Deep', description: 'Very deep, rich skin tones' },\n];\n\nconst HAIR_COLORS = [\n  { id: 'platinum', name: 'Platinum Blonde', hex: '#F5F5DC' },\n  { id: 'blonde', name: 'Blonde', hex: '#D4AF37' },\n  { id: 'light-brown', name: 'Light Brown', hex: '#8B4513' },\n  { id: 'medium-brown', name: 'Medium Brown', hex: '#654321' },\n  { id: 'dark-brown', name: 'Dark Brown', hex: '#3C2414' },\n  { id: 'black', name: 'Black', hex: '#1C1C1C' },\n  { id: 'auburn', name: 'Auburn', hex: '#A52A2A' },\n  { id: 'red', name: 'Red', hex: '#DC143C' },\n  { id: 'gray', name: 'Gray/Silver', hex: '#808080' },\n  { id: 'white', name: 'White', hex: '#F8F8FF' },\n];\n\nconst UNDERTONES = [\n  { id: 'warm', name: 'Warm', description: 'Golden, yellow, or peachy undertones. Veins appear greenish.' },\n  { id: 'cool', name: 'Cool', description: 'Pink, red, or blue undertones. Veins appear bluish.' },\n  { id: 'neutral', name: 'Neutral', description: 'Balance of warm and cool undertones. Veins appear blue-green.' },\n];\n\n// Color palette recommendations based on analysis\nconst COLOR_RECOMMENDATIONS = {\n  warm: {\n    excellent: ['#FF6B35', '#F7931E', '#FFD23F', '#8B4513', '#CD853F', '#DEB887', '#BC8F8F'],\n    good: ['#FF4500', '#FF8C00', '#DAA520', '#B8860B', '#A0522D', '#D2691E', '#F4A460'],\n    avoid: ['#4169E1', '#0000FF', '#8A2BE2', '#4B0082', '#6A5ACD', '#00CED1', '#20B2AA'],\n  },\n  cool: {\n    excellent: ['#4169E1', '#0000FF', '#8A2BE2', '#4B0082', '#6A5ACD', '#00CED1', '#20B2AA'],\n    good: ['#1E90FF', '#6495ED', '#7B68EE', '#9370DB', '#48D1CC', '#40E0D0', '#5F9EA0'],\n    avoid: ['#FF6B35', '#F7931E', '#FFD23F', '#FF4500', '#FF8C00', '#DAA520', '#B8860B'],\n  },\n  neutral: {\n    excellent: ['#708090', '#2F4F4F', '#696969', '#A9A9A9', '#DCDCDC', '#F5F5F5', '#FFFFFF'],\n    good: ['#8FBC8F', '#9ACD32', '#32CD32', '#228B22', '#006400', '#8B4513', '#A0522D'],\n    avoid: [],\n  },\n};\n\ninterface ClothingRecommendation {\n  category: string;\n  colors: string[];\n  tips: string[];\n}\n\nfunction generateClothingPalette(skinTone: string, hairColor: string, undertone: string): ClothingRecommendation[] {\n  const baseColors = COLOR_RECOMMENDATIONS[undertone as keyof typeof COLOR_RECOMMENDATIONS];\n  \n  const recommendations: ClothingRecommendation[] = [\n    {\n      category: 'Everyday Neutrals',\n      colors: undertone === 'warm' \n        ? ['#8B4513', '#DEB887', '#F5E6D3', '#CD853F', '#D2691E']\n        : undertone === 'cool'\n        ? ['#2F4F4F', '#708090', '#F8F8FF', '#B0C4DE', '#4682B4']\n        : ['#696969', '#A9A9A9', '#F5F5F5', '#DCDCDC', '#708090'],\n      tips: undertone === 'warm' \n        ? ['Choose warm beiges and camel', 'Opt for ivory over stark white', 'Brown-based grays work best']\n        : undertone === 'cool'\n        ? ['True white and cool grays', 'Navy and charcoal are perfect', 'Avoid yellow-based neutrals']\n        : ['Any neutral works for you', 'Mix warm and cool neutrals', 'Great foundation for colorful pieces'],\n    },\n    {\n      category: 'Bold Statement Colors',\n      colors: baseColors.excellent.slice(0, 5),\n      tips: undertone === 'warm'\n        ? ['Rich oranges and corals', 'Golden yellows and warm reds', 'Avoid cool blues and purples']\n        : undertone === 'cool'\n        ? ['True reds and berry tones', 'Royal blues and emerald greens', 'Avoid orange-based colors']\n        : ['You can wear most colors', 'Focus on saturation that suits your contrast', 'Mix warm and cool tones freely'],\n    },\n    {\n      category: 'Professional Palette',\n      colors: undertone === 'warm'\n        ? ['#8B4513', '#A0522D', '#CD853F', '#2F4F4F', '#F5E6D3']\n        : undertone === 'cool'\n        ? ['#2F4F4F', '#4682B4', '#708090', '#FFFFFF', '#B0C4DE']\n        : ['#2F4F4F', '#696969', '#8B4513', '#FFFFFF', '#A9A9A9'],\n      tips: undertone === 'warm'\n        ? ['Warm browns and navy', 'Cream shirts over stark white', 'Golden jewelry complements']\n        : undertone === 'cool'\n        ? ['Navy, charcoal, and true grays', 'Crisp white shirts', 'Silver jewelry works best']\n        : ['Any professional color works', 'Both gold and silver jewelry', 'Focus on fit and quality'],\n    },\n  ];\n\n  // Adjust recommendations based on hair color\n  if (hairColor === 'red' || hairColor === 'auburn') {\n    recommendations[1].tips.push('Avoid competing reds - choose complementary greens and blues');\n  }\n  \n  if (hairColor === 'gray' || hairColor === 'white') {\n    recommendations[0].tips.push('Embrace bold colors to create contrast with your beautiful hair');\n  }\n\n  return recommendations;\n}\n\nexport default function ClothingPalettePage() {\n  const [skinTone, setSkinTone] = useState('');\n  const [hairColor, setHairColor] = useState('');\n  const [undertone, setUndertone] = useState('');\n  const [showResults, setShowResults] = useState(false);\n  const [recommendations, setRecommendations] = useState<ClothingRecommendation[]>([]);\n\n  const handleAnalyze = () => {\n    if (skinTone && hairColor && undertone) {\n      const results = generateClothingPalette(skinTone, hairColor, undertone);\n      setRecommendations(results);\n      setShowResults(true);\n    }\n  };\n\n  const resetAnalysis = () => {\n    setSkinTone('');\n    setHairColor('');\n    setUndertone('');\n    setShowResults(false);\n    setRecommendations([]);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Shirt className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900\">Clothing Palette Generator</h1>\n            </div>\n            <p className=\"text-lg text-gray-600 max-w-3xl mx-auto\">\n              Discover your perfect clothing colors based on your skin tone, hair color, and undertone. \n              Get personalized recommendations that enhance your natural beauty.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {!showResults ? (\n          <div className=\"space-y-8\">\n            {/* Skin Tone Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>Step 1: Select Your Skin Tone</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {SKIN_TONES.map((tone) => (\n                    <button\n                      key={tone.id}\n                      onClick={() => setSkinTone(tone.id)}\n                      className={`text-left p-4 rounded-lg border-2 transition-all ${\n                        skinTone === tone.id\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"font-medium text-gray-900\">{tone.name}</div>\n                      <div className=\"text-sm text-gray-600 mt-1\">{tone.description}</div>\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Hair Color Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Step 2: Select Your Hair Color</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3\">\n                  {HAIR_COLORS.map((hair) => (\n                    <button\n                      key={hair.id}\n                      onClick={() => setHairColor(hair.id)}\n                      className={`p-4 rounded-lg border-2 transition-all ${\n                        hairColor === hair.id\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div \n                        className=\"w-full h-6 rounded mb-2\"\n                        style={{ backgroundColor: hair.hex }}\n                      />\n                      <div className=\"text-sm font-medium text-gray-900\">{hair.name}</div>\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Undertone Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Step 3: Determine Your Undertone</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 mb-6\">\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                      <div className=\"text-sm text-blue-800\">\n                        <strong>Quick tip:</strong> Look at your wrist veins in natural light. \n                        Green = warm, blue = cool, blue-green = neutral.\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                  {UNDERTONES.map((tone) => (\n                    <button\n                      key={tone.id}\n                      onClick={() => setUndertone(tone.id)}\n                      className={`text-left p-4 rounded-lg border-2 transition-all ${\n                        undertone === tone.id\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                    >\n                      <div className=\"font-medium text-gray-900 mb-2\">{tone.name}</div>\n                      <div className=\"text-sm text-gray-600\">{tone.description}</div>\n                    </button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Analyze Button */}\n            <div className=\"text-center\">\n              <Button\n                onClick={handleAnalyze}\n                disabled={!skinTone || !hairColor || !undertone}\n                size=\"lg\"\n                className=\"px-8 py-3\"\n              >\n                <Palette className=\"h-5 w-5 mr-2\" />\n                Generate My Clothing Palette\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"space-y-8\">\n            {/* Results Header */}\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Your Personal Clothing Palette</h2>\n              <p className=\"text-gray-600 mb-6\">\n                Based on your {SKIN_TONES.find(t => t.id === skinTone)?.name.toLowerCase()} skin tone, \n                {' '}{HAIR_COLORS.find(h => h.id === hairColor)?.name.toLowerCase()} hair, \n                and {undertone} undertone.\n              </p>\n              <Button onClick={resetAnalysis} variant=\"outline\">\n                Start Over\n              </Button>\n            </div>\n\n            {/* Color Recommendations */}\n            <div className=\"space-y-6\">\n              {recommendations.map((rec, index) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle>{rec.category}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-5 gap-3 mb-4\">\n                      {rec.colors.map((color, colorIndex) => (\n                        <div key={colorIndex} className=\"text-center\">\n                          <div \n                            className=\"w-full h-16 rounded-lg border border-gray-200 mb-2\"\n                            style={{ backgroundColor: color }}\n                          />\n                          <div className=\"text-xs text-gray-600 font-mono\">{color}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900\">Styling Tips:</h4>\n                      <ul className=\"space-y-1\">\n                        {rec.tips.map((tip, tipIndex) => (\n                          <li key={tipIndex} className=\"text-sm text-gray-600 flex items-start\">\n                            <span className=\"text-blue-500 mr-2\">•</span>\n                            {tip}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Additional Tips */}\n            <Card>\n              <CardHeader>\n                <CardTitle>General Styling Tips for You</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm text-gray-600\">\n                  <p><strong>Jewelry:</strong> {undertone === 'warm' ? 'Gold and warm metals' : undertone === 'cool' ? 'Silver and cool metals' : 'Both gold and silver work beautifully'} complement your undertone.</p>\n                  <p><strong>Makeup:</strong> Choose foundation and lipstick shades that match your {undertone} undertone for the most flattering look.</p>\n                  <p><strong>Patterns:</strong> When wearing patterns, ensure the dominant colors align with your recommended palette.</p>\n                  <p><strong>Contrast:</strong> {hairColor === 'black' || hairColor === 'dark-brown' ? 'Your dark hair creates beautiful contrast - you can wear bold colors confidently' : hairColor === 'blonde' || hairColor === 'platinum' ? 'Your light hair pairs beautifully with both soft and bold colors' : 'Experiment with different color intensities to find what makes you feel most confident'}.</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":15205},"client/src/pages/fonts-page.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Type, Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\n\ninterface Font {\n  name: string;\n  family: string;\n  category: 'serif' | 'sans-serif' | 'display' | 'handwriting' | 'monospace';\n  variants: string[];\n  popularity: number;\n}\n\nconst POPULAR_FONTS: Font[] = [\n  { name: 'Roboto', family: 'Roboto', category: 'sans-serif', variants: ['300', '400', '500', '700'], popularity: 100 },\n  { name: 'Open Sans', family: 'Open Sans', category: 'sans-serif', variants: ['300', '400', '600', '700'], popularity: 95 },\n  { name: 'Montserrat', family: 'Montserrat', category: 'sans-serif', variants: ['300', '400', '500', '600', '700'], popularity: 90 },\n  { name: 'Lato', family: 'Lato', category: 'sans-serif', variants: ['300', '400', '700'], popularity: 85 },\n  { name: 'Poppins', family: 'Poppins', category: 'sans-serif', variants: ['300', '400', '500', '600', '700'], popularity: 80 },\n  { name: 'Source Sans Pro', family: 'Source Sans Pro', category: 'sans-serif', variants: ['300', '400', '600', '700'], popularity: 75 },\n  { name: 'Inter', family: 'Inter', category: 'sans-serif', variants: ['300', '400', '500', '600', '700'], popularity: 70 },\n  { name: 'Nunito', family: 'Nunito', category: 'sans-serif', variants: ['300', '400', '600', '700'], popularity: 65 },\n  \n  // Serif fonts\n  { name: 'Playfair Display', family: 'Playfair Display', category: 'serif', variants: ['400', '500', '600', '700'], popularity: 60 },\n  { name: 'Merriweather', family: 'Merriweather', category: 'serif', variants: ['300', '400', '700'], popularity: 55 },\n  { name: 'Lora', family: 'Lora', category: 'serif', variants: ['400', '500', '600', '700'], popularity: 50 },\n  { name: 'PT Serif', family: 'PT Serif', category: 'serif', variants: ['400', '700'], popularity: 45 },\n  { name: 'Source Serif Pro', family: 'Source Serif Pro', category: 'serif', variants: ['400', '600', '700'], popularity: 40 },\n  { name: 'Crimson Text', family: 'Crimson Text', category: 'serif', variants: ['400', '600', '700'], popularity: 35 },\n  \n  // Display fonts\n  { name: 'Bebas Neue', family: 'Bebas Neue', category: 'display', variants: ['400'], popularity: 30 },\n  { name: 'Abril Fatface', family: 'Abril Fatface', category: 'display', variants: ['400'], popularity: 28 },\n  { name: 'Anton', family: 'Anton', category: 'display', variants: ['400'], popularity: 26 },\n  { name: 'Righteous', family: 'Righteous', category: 'display', variants: ['400'], popularity: 24 },\n  { name: 'Oswald', family: 'Oswald', category: 'display', variants: ['300', '400', '500', '600', '700'], popularity: 22 },\n  { name: 'Bangers', family: 'Bangers', category: 'display', variants: ['400'], popularity: 20 },\n  \n  // Handwriting fonts\n  { name: 'Dancing Script', family: 'Dancing Script', category: 'handwriting', variants: ['400', '500', '600', '700'], popularity: 18 },\n  { name: 'Pacifico', family: 'Pacifico', category: 'handwriting', variants: ['400'], popularity: 16 },\n  { name: 'Kaushan Script', family: 'Kaushan Script', category: 'handwriting', variants: ['400'], popularity: 14 },\n  { name: 'Great Vibes', family: 'Great Vibes', category: 'handwriting', variants: ['400'], popularity: 12 },\n  { name: 'Satisfy', family: 'Satisfy', category: 'handwriting', variants: ['400'], popularity: 10 },\n  { name: 'Allura', family: 'Allura', category: 'handwriting', variants: ['400'], popularity: 8 },\n  \n  // Monospace fonts\n  { name: 'Fira Code', family: 'Fira Code', category: 'monospace', variants: ['300', '400', '500', '600', '700'], popularity: 6 },\n  { name: 'Source Code Pro', family: 'Source Code Pro', category: 'monospace', variants: ['300', '400', '500', '600', '700'], popularity: 5 },\n  { name: 'JetBrains Mono', family: 'JetBrains Mono', category: 'monospace', variants: ['300', '400', '500', '600', '700'], popularity: 4 },\n  { name: 'Inconsolata', family: 'Inconsolata', category: 'monospace', variants: ['400', '700'], popularity: 3 },\n  { name: 'Space Mono', family: 'Space Mono', category: 'monospace', variants: ['400', '700'], popularity: 2 },\n  { name: 'Ubuntu Mono', family: 'Ubuntu Mono', category: 'monospace', variants: ['400', '700'], popularity: 1 },\n];\n\nconst FONT_CATEGORIES = [\n  { id: 'all', name: 'All Categories' },\n  { id: 'serif', name: 'Serif' },\n  { id: 'sans-serif', name: 'Sans Serif' },\n  { id: 'display', name: 'Display' },\n  { id: 'handwriting', name: 'Handwriting' },\n  { id: 'monospace', name: 'Monospace' },\n];\n\nconst SAMPLE_TEXT = \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt repellendus eaque doloribus labore quos velit iusto perferendis odio laudantium.\";\n\ninterface FontCardProps {\n  font: Font;\n}\n\nfunction FontCard({ font }: FontCardProps) {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    // Load Google Font dynamically\n    const loadFont = () => {\n      const link = document.createElement('link');\n      link.href = `https://fonts.googleapis.com/css2?family=${font.family.replace(' ', '+')}:wght@${font.variants.join(';')}&display=swap`;\n      link.rel = 'stylesheet';\n      document.head.appendChild(link);\n      \n      // Wait a bit for font to load\n      setTimeout(() => setIsLoaded(true), 100);\n    };\n\n    loadFont();\n  }, [font]);\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{font.name}</h3>\n        <span className=\"text-sm text-gray-500 capitalize\">{font.category.replace('-', ' ')}</span>\n      </div>\n      \n      <div \n        className=\"text-gray-700 leading-relaxed\"\n        style={{ \n          fontFamily: isLoaded ? `\"${font.family}\", sans-serif` : 'sans-serif',\n          fontSize: '16px'\n        }}\n      >\n        {SAMPLE_TEXT}\n      </div>\n      \n      <div className=\"mt-4 pt-4 border-t border-gray-100\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-xs text-gray-500\">\n            {font.variants.length} variant{font.variants.length > 1 ? 's' : ''}\n          </span>\n          <Button variant=\"outline\" size=\"sm\">\n            Use Font\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function FontsPage() {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFonts = POPULAR_FONTS.filter(font => {\n    const matchesCategory = selectedCategory === 'all' || font.category === selectedCategory;\n    const matchesSearch = font.name.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Type className=\"h-8 w-8 text-blue-600\" />\n              <h1 className=\"text-3xl sm:text-4xl font-bold text-gray-900\">Fonts</h1>\n            </div>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Browse hundreds of free fonts for your projects.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search and Filters */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search fonts...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Category Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            {FONT_CATEGORIES.map((category) => (\n              <Button\n                key={category.id}\n                variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category.id)}\n                className=\"rounded-full\"\n              >\n                {category.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Results Count */}\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-gray-600\">\n            Showing {filteredFonts.length} font{filteredFonts.length !== 1 ? 's' : ''}\n            {selectedCategory !== 'all' && (\n              <span> in {FONT_CATEGORIES.find(c => c.id === selectedCategory)?.name}</span>\n            )}\n            {searchQuery && (\n              <span> matching \"{searchQuery}\"</span>\n            )}\n          </p>\n        </div>\n\n        {/* Font Grid */}\n        {filteredFonts.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredFonts.map((font) => (\n              <FontCard key={font.name} font={font} />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Type className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No fonts found</h3>\n            <p className=\"text-gray-600\">\n              Try adjusting your search or selecting a different category.\n            </p>\n          </div>\n        )}\n\n        {/* Load More Button */}\n        {filteredFonts.length > 0 && filteredFonts.length >= 20 && (\n          <div className=\"text-center mt-12\">\n            <Button variant=\"outline\" size=\"lg\">\n              Load More Fonts\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10076},"client/src/pages/landing-page.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Palette, Download, Shirt } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header/Navigation */}\n      <header className=\"border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Palette className=\"h-8 w-8 text-blue-600\" />\n              <span className=\"text-xl font-bold text-gray-900\">Coolors</span>\n            </div>\n            \n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/generate\" className=\"text-gray-600 hover:text-gray-900\">Palette Generator</Link>\n              <Link href=\"/palettes\" className=\"text-gray-600 hover:text-gray-900\">Explore Palettes</Link>\n              <Link href=\"/image-picker\" className=\"text-gray-600 hover:text-gray-900\">Image Picker</Link>\n              <Link href=\"/fonts\" className=\"text-gray-600 hover:text-gray-900\">Fonts</Link>\n              <Link href=\"/clothing-palette\" className=\"text-gray-600 hover:text-gray-900\">Clothing Palette</Link>\n            </nav>\n\n            <div className=\"md:hidden\">\n              <Link href=\"/generate\">\n                <Button size=\"sm\">Start Creating</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"pt-16 pb-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold text-gray-900 mb-6\">\n            The super fast color palettes generator!\n          </h1>\n          <p className=\"text-lg sm:text-xl text-gray-600 mb-10 max-w-2xl mx-auto\">\n            Create the perfect palette or get inspired by thousands of beautiful color schemes.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n            <Link href=\"/generate\">\n              <Button size=\"lg\" className=\"w-full sm:w-auto px-8 py-3 text-lg\">\n                Start the generator!\n              </Button>\n            </Link>\n            <Link href=\"/palettes\">\n              <Button variant=\"outline\" size=\"lg\" className=\"w-full sm:w-auto px-8 py-3 text-lg\">\n                Explore trending palettes\n              </Button>\n            </Link>\n          </div>\n\n          {/* Quick Color Generator Preview */}\n          <div className=\"bg-gray-50 rounded-2xl p-8 mb-16\">\n            <div className=\"grid grid-cols-5 gap-2 max-w-md mx-auto\">\n              <div className=\"h-20 bg-blue-500 rounded-lg flex items-end justify-center pb-2\">\n                <span className=\"text-xs text-white font-medium\">#3B82F6</span>\n              </div>\n              <div className=\"h-20 bg-green-500 rounded-lg flex items-end justify-center pb-2\">\n                <span className=\"text-xs text-white font-medium\">#10B981</span>\n              </div>\n              <div className=\"h-20 bg-yellow-400 rounded-lg flex items-end justify-center pb-2\">\n                <span className=\"text-xs text-black font-medium\">#F59E0B</span>\n              </div>\n              <div className=\"h-20 bg-red-500 rounded-lg flex items-end justify-center pb-2\">\n                <span className=\"text-xs text-white font-medium\">#EF4444</span>\n              </div>\n              <div className=\"h-20 bg-purple-500 rounded-lg flex items-end justify-center pb-2\">\n                <span className=\"text-xs text-white font-medium\">#8B5CF6</span>\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-600 mt-4\">Press the spacebar to generate a new palette!</p>\n          </div>\n        </div>\n      </section>\n\n\n      {/* Social Proof Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">\n            Used by 5+ million designers and by top companies\n          </h2>\n          \n          <div className=\"flex flex-wrap justify-center items-center gap-8 mt-8 opacity-60\">\n            <div className=\"text-2xl font-bold text-gray-400\">Netflix</div>\n            <div className=\"text-2xl font-bold text-gray-400\">Microsoft</div>\n            <div className=\"text-2xl font-bold text-gray-400\">DreamWorks</div>\n            <div className=\"text-2xl font-bold text-gray-400\">Ubisoft</div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Everything you need for color exploration\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              From palette generation to color analysis, we've got all the tools you need to create beautiful designs.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                <Palette className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Palette Generator</h3>\n              <p className=\"text-gray-600\">Generate beautiful color palettes with a single click</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                <Download className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Image Picker</h3>\n              <p className=\"text-gray-600\">Extract colors from any image to create custom palettes</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-purple-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                <Palette className=\"h-8 w-8 text-purple-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Explore Palettes</h3>\n              <p className=\"text-gray-600\">Browse thousands of palettes created by the community</p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-orange-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                <Shirt className=\"h-8 w-8 text-orange-600\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Clothing Palette</h3>\n              <p className=\"text-gray-600\">Discover clothing colors that complement your skin tone</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <Palette className=\"h-6 w-6 text-blue-400\" />\n                <span className=\"text-lg font-bold\">Coolors</span>\n              </div>\n              <p className=\"text-gray-400 text-sm\">\n                The super fast color palettes generator for designers and developers.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Tools</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><Link href=\"/generate\" className=\"hover:text-white\">Palette Generator</Link></li>\n                <li><Link href=\"/palettes\" className=\"hover:text-white\">Explore Palettes</Link></li>\n                <li><Link href=\"/image-picker\" className=\"hover:text-white\">Image Picker</Link></li>\n                <li><Link href=\"/fonts\" className=\"hover:text-white\">Fonts</Link></li>\n                <li><Link href=\"/clothing-palette\" className=\"hover:text-white\">Clothing Palette</Link></li>\n              </ul>\n            </div>\n\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Account</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li><Link href=\"/generate\" className=\"hover:text-white\">Get Started</Link></li>\n                <li><a href=\"#\" className=\"hover:text-white\">Go Pro</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400\">\n            <p>&copy; 2025 Coolors. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":9081},"NEXT_MIGRATION.md":{"content":"# Coolors.in Next.js Migration Guide\n\nThis document outlines the ongoing migration of Coolors.in from a client-side React application to a server-rendered Next.js application.\n\n## Migration Goals\n\n- **Improved SEO**: Server-side rendering for better search engine indexing\n- **Faster initial page loads**: Pre-rendering critical HTML for improved Core Web Vitals\n- **Better social sharing**: Dynamic OpenGraph images and metadata\n- **Improved AdSense compliance**: Better content visibility and indexing\n- **Enhanced analytics**: More accurate tracking of page views and interactions\n- **Progressive enhancement**: Graceful degradation for users with JavaScript disabled\n\n## Migration Status\n\n| Feature | Status | Notes |\n|---------|--------|-------|\n| Core app structure | ✅ | Basic Next.js setup complete |\n| Home page | 🟡 | In progress |\n| Auth system | 🟡 | In progress |\n| Color palette generator | 🟡 | In progress |\n| Image-to-palette tool | 🟡 | Server-side extraction API created |\n| Palette visualizer | ✅ | Migrated |\n| Designer's guide | ✅ | Migrated with enhanced SEO |\n| FAQ page | ✅ | Migrated with structured data |\n| Privacy Policy | ✅ | Migrated |\n| SEO improvements | ✅ | Added sitemap, robots.txt |\n| AdSense integration | ✅ | Component-based implementation |\n| Analytics | ✅ | Using Next.js Script component |\n\n## Directory Structure\n\nThe application is currently in a hybrid state during the migration. Here's how the structure is organized:\n\n```\n/\n├── client/                # Original React app (Vite)\n│   ├── src/               # React components and logic\n│   └── ...\n├── pages/                 # Next.js pages\n│   ├── api/               # API routes (server-side only)\n│   ├── _app.tsx           # Next.js app wrapper\n│   ├── _document.tsx      # HTML document customization\n│   ├── index.tsx          # Home page\n│   └── ...                # Other pages\n├── components/            # Shared components for Next.js\n├── public/                # Static assets\n├── styles/                # Global styles\n├── shared/                # Shared types and utilities\n├── next.config.js         # Next.js configuration\n└── ...\n```\n\n## Migration Approach\n\nWe're taking a phased approach to migration:\n\n1. **Phase 1**: Set up Next.js alongside the existing React app\n2. **Phase 2**: Create server-side API endpoints for improved functionality\n3. **Phase 3**: Migrate static pages (FAQ, Privacy Policy, etc.)\n4. **Phase 4**: Migrate dynamic pages with SSR/SSG\n5. **Phase 5**: Complete the migration and remove legacy code\n\nDuring the migration period, both the original React app and the Next.js app will run simultaneously to ensure a smooth transition.\n\n## How to Run During Migration\n\n### Running both applications (development):\n\n```bash\n./start-all.sh\n```\n\nThis will start:\n- Vite development server on port 5000 (original app)\n- Next.js development server on port 3000 (new app)\n\n### Running only Next.js (development):\n\n```bash\n./start-all.sh --next-only\n```\n\nor\n\n```bash\n./start-next-dev.sh\n```\n\n## Development Guidelines\n\n### Adding New Pages\n\n1. Create the page in the `pages/` directory following Next.js conventions\n2. Use the `CommonHead` component for consistent SEO\n3. Implement both client-side and server-side data fetching as needed\n\n### API Routes\n\n- Place API routes in `pages/api/`\n- Use server-side processing for tasks like image analysis\n- Implement proper error handling and caching headers\n\n### Component Reuse\n\n- Components in `client/src/components` can be imported and used in Next.js pages\n- Where applicable, create wrapper components in `components/` that adapt React components for Next.js\n\n### SEO Best Practices\n\n- Use `CommonHead` component for consistent metadata\n- Implement JSON-LD structured data where appropriate\n- Ensure proper canonical URLs across all pages\n- Add appropriate OpenGraph and Twitter card metadata\n\n## AdSense Integration\n\nWe've implemented a component-based approach for AdSense:\n\n- `AdSenseSetup`: Include once in `_app.tsx` to initialize AdSense\n- `InArticleAd`: For in-content advertisements\n- `SidebarAd`: For sidebar advertisements\n- `BannerAd`: For top/bottom banner advertisements\n\n## Next Steps\n\n1. Complete the migration of the color palette generator\n2. Implement server-side rendering for the image-to-palette feature\n3. Migrate authentication system\n4. Implement API routes for palette saving and sharing\n5. Complete SEO optimizations\n6. Performance testing and optimization\n\n## References\n\n- [Next.js Documentation](https://nextjs.org/docs)\n- [React to Next.js Migration Guide](https://nextjs.org/docs/migrating/from-react)","size_bytes":4737},"VERCEL_DEPLOYMENT.md":{"content":"# Vercel Deployment Guide for Coolors.in\n\nThis document provides detailed instructions for deploying Coolors.in to Vercel.\n\n## Prerequisites\n\n- A [Vercel](https://vercel.com) account\n- Your project code pushed to a Git repository (GitHub, GitLab, or Bitbucket)\n\n## Deployment Steps\n\n### 1. Connect Your Repository\n\n1. Log in to your Vercel account\n2. Click \"Add New...\" → \"Project\"\n3. Import your Git repository\n4. Select the Coolors.in repository\n\n### 2. Configure Project\n\nVercel will automatically detect the project configuration from `vercel.json`, but you may need to adjust some settings:\n\n- **Framework Preset**: Vite (automatically detected)\n- **Build Command**: `cd client && node build-vercel.js` (defined in vercel.json)\n- **Output Directory**: `client/dist` (defined in vercel.json)\n- **Environment Variables**: Add the following environment variables:\n  - `NODE_ENV`: `production`\n  - `VITE_BASE_URL`: Your production URL (e.g., `https://coolors.vercel.app`)\n  - `VITE_GA_ID`: Your Google Analytics ID\n  - `SESSION_SECRET`: A secure random string for session encryption\n\n### 3. Deploy\n\nClick \"Deploy\" and wait for the build to complete.\n\n## Custom Domain Setup (Optional)\n\n1. Go to your project settings in Vercel\n2. Navigate to \"Domains\"\n3. Add your custom domain (e.g., `coolors.in`)\n4. Follow Vercel's instructions to configure DNS settings\n\n## Automatic Deployments\n\nBy default, Vercel will automatically deploy when you push changes to the main branch of your repository. You can configure this behavior in the \"Git\" section of your project settings.\n\n## Build Optimizations\n\nThe project is already optimized for Vercel with:\n\n- Enhanced cache headers for static assets\n- Optimized build process with chunk splitting\n- Security headers for improved protection\n- SEO improvements with robots.txt and sitemap.xml\n\n## Troubleshooting\n\nIf you encounter issues during deployment:\n\n1. Check the build logs in Vercel for specific errors\n2. Verify environment variables are set correctly\n3. Ensure all dependencies are properly listed in package.json\n4. Check that the build command and output directory are correctly configured\n\n## Monitoring\n\nAfter deployment, monitor your application's performance using:\n\n- Vercel Analytics\n- Google Analytics (configured in the app)\n- Vercel's deployment logs\n\n## Next.js Migration\n\nAs the project is being migrated to Next.js, future deployments will leverage Vercel's native Next.js support. See `NEXT_MIGRATION.md` for more details on the migration progress.","size_bytes":2513},"deploy-vercel.sh":{"content":"#!/bin/bash\n\n# Vercel deployment script for Coolors.in\n# This script helps to prepare and deploy the application to Vercel\n\necho \"🚀 Preparing Coolors.in for Vercel deployment...\"\n\n# Install dependencies if needed\nif [ ! -d \"node_modules\" ]; then\n  echo \"📦 Installing dependencies...\"\n  npm install\nfi\n\n# Run linting and type checking\necho \"🔍 Running type check...\"\nnpx tsc --noEmit\n\n# Make sure terser is installed\necho \"📦 Ensuring terser is installed...\"\nnpm list terser || npm install terser\n\n# Create production build for testing locally\necho \"🏗️ Creating production build for testing...\"\ncd client && npm run build\ncd ..\n\n# Check if the build was successful\nif [ ! -d \"client/dist\" ]; then\n  echo \"❌ Build failed! Please check the errors above.\"\n  exit 1\nfi\n\necho \"✅ Build successful!\"\n\n# Check if Vercel CLI is installed\nif ! command -v vercel &> /dev/null; then\n  echo \"🔄 Installing Vercel CLI...\"\n  npm install -g vercel\nfi\n\necho \"🌐 Ready to deploy to Vercel!\"\necho \"You can deploy now using one of these methods:\"\necho \"\"\necho \"1. Deploy with Vercel CLI:\"\necho \"   vercel\"\necho \"\"\necho \"2. Deploy via the Vercel dashboard:\"\necho \"   - Go to https://vercel.com/import\"\necho \"   - Connect to your Git repository\"\necho \"   - Follow the setup wizard\"\necho \"\"\necho \"Make sure to set the required environment variables in Vercel:\"\necho \"- NODE_ENV=production\"\necho \"- VITE_BASE_URL=https://your-domain.com\"\necho \"- VITE_GA_ID=your-google-analytics-id\"\necho \"- SESSION_SECRET=your-secure-session-secret\"\necho \"\"\necho \"For detailed instructions, see VERCEL_DEPLOYMENT.md\"\n\n# Ask if user wants to deploy via CLI right now\nread -p \"Do you want to deploy via Vercel CLI now? (y/n): \" deploy_now\n\nif [[ \"$deploy_now\" =~ ^[Yy]$ ]]; then\n  echo \"🚀 Deploying to Vercel...\"\n  vercel\nelse\n  echo \"📝 You can deploy later using 'vercel' command or via the Vercel dashboard.\"\nfi\n\necho \"Done! 🎉\"","size_bytes":1918},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"netlify.toml":{"content":"[build]\n  command = \"cd client && node build-vercel.js\"\n  publish = \"client/dist\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200","size_bytes":146},"next-env.d.ts":{"content":"/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.","size_bytes":200},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  images: {\n    domains: [],\n    // Optimize images for different devices\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n    // Image formats for better performance\n    formats: ['image/webp', 'image/avif'],\n    // Minimize image size in production\n    minimumCacheTTL: 60,\n  },\n  compiler: {\n    // Remove console.logs in production\n    removeConsole: process.env.NODE_ENV === 'production',\n  },\n  experimental: {\n    optimizeCss: true, // Enable CSS optimization\n    // Optimize font loading\n    fontLoaders: [\n      { loader: '@next/font/google', options: { subsets: ['latin'] } },\n    ],\n  },\n  i18n: {\n    locales: ['en'],\n    defaultLocale: 'en',\n  },\n  compress: true, // Enable gzip compression\n  poweredByHeader: false, // Remove X-Powered-By header for security\n  // Configure headers for better security and caching\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-XSS-Protection',\n            value: '1; mode=block',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'strict-origin-when-cross-origin',\n          },\n        ],\n      },\n      {\n        source: '/api/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=3600, s-maxage=86400',\n          },\n        ],\n      },\n      {\n        source: '/_next/image(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=31536000, immutable',\n          },\n        ],\n      },\n      {\n        source: '/icons/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=31536000, immutable',\n          },\n        ],\n      },\n    ];\n  },\n  // Redirects for better SEO\n  async redirects() {\n    return [\n      {\n        source: '/home',\n        destination: '/',\n        permanent: true,\n      },\n      {\n        source: '/guide',\n        destination: '/designers-guide',\n        permanent: true,\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;","size_bytes":2366},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"components/AdSense.tsx":{"content":"import React, { useEffect } from 'react';\nimport Script from 'next/script';\n\nexport const AdSenseSetup = () => {\n  return (\n    <Script\n      id=\"adsense-setup\"\n      strategy=\"lazyOnload\"\n      src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1234567890\"\n      crossOrigin=\"anonymous\"\n    />\n  );\n};\n\ninterface AdSenseProps {\n  adSlot: string; // The ad slot ID\n  style?: React.CSSProperties; // Optional custom styles\n  format?: 'auto' | 'fluid' | 'rectangle' | 'vertical'; // Ad format\n  responsive?: boolean; // Whether the ad should be responsive\n}\n\nexport const AdSense = ({ adSlot, style, format = 'auto', responsive = true }: AdSenseProps) => {\n  useEffect(() => {\n    try {\n      // Only push to adsbygoogle if it exists\n      if (typeof window !== 'undefined' && (window as any).adsbygoogle) {\n        (window as any).adsbygoogle.push({});\n      }\n    } catch (err) {\n      console.error('AdSense error:', err);\n    }\n  }, []);\n\n  return (\n    <div className=\"ad-container\" style={{ overflow: 'hidden', ...style }}>\n      <ins\n        className=\"adsbygoogle\"\n        style={{\n          display: 'block',\n          overflow: 'hidden',\n          width: responsive ? '100%' : undefined,\n          height: format === 'fluid' ? 'fluid' : undefined,\n        }}\n        data-ad-client=\"ca-pub-1234567890\"\n        data-ad-slot={adSlot}\n        data-ad-format={format}\n        data-full-width-responsive={responsive ? 'true' : 'false'}\n      />\n    </div>\n  );\n};\n\nexport const InArticleAd = ({ adSlot = '3825791378' }: { adSlot?: string }) => {\n  return (\n    <div className=\"my-8 text-center\">\n      <div className=\"text-xs text-gray-400 mb-1\">Advertisement</div>\n      <AdSense \n        adSlot={adSlot} \n        format=\"fluid\" \n        style={{ minHeight: 250 }}\n      />\n    </div>\n  );\n};\n\nexport const SidebarAd = ({ adSlot = '6781254986' }: { adSlot?: string }) => {\n  return (\n    <div className=\"sticky top-4\">\n      <div className=\"text-xs text-gray-400 mb-1\">Advertisement</div>\n      <AdSense \n        adSlot={adSlot} \n        format=\"vertical\" \n        style={{ minHeight: 600 }}\n      />\n    </div>\n  );\n};\n\nexport const BannerAd = ({ adSlot = '1234567890' }: { adSlot?: string }) => {\n  return (\n    <div className=\"py-4 w-full overflow-hidden\">\n      <div className=\"text-xs text-gray-400 mb-1\">Advertisement</div>\n      <AdSense \n        adSlot={adSlot} \n        format=\"rectangle\" \n        responsive={true}\n        style={{ minHeight: 90 }}\n      />\n    </div>\n  );\n};","size_bytes":2521},"components/Breadcrumbs.tsx":{"content":"import React from 'react';\nimport Link from 'next/link';\nimport { ChevronRight, Home } from 'lucide-react';\n\ninterface BreadcrumbItem {\n  name: string;\n  href: string;\n  current?: boolean;\n}\n\ninterface BreadcrumbsProps {\n  items: BreadcrumbItem[];\n  className?: string;\n}\n\n/**\n * Breadcrumb navigation component for better user experience and SEO\n * Follows schema.org structured data for breadcrumbs\n */\nconst Breadcrumbs: React.FC<BreadcrumbsProps> = ({ items, className = '' }) => {\n  return (\n    <nav aria-label=\"Breadcrumb\" className={`flex ${className}`}>\n      <ol className=\"flex items-center flex-wrap\">\n        <li className=\"flex items-center\">\n          <Link\n            href=\"/\"\n            className=\"text-gray-500 hover:text-gray-700 transition-colors text-sm flex items-center\"\n            aria-label=\"Home\"\n          >\n            <Home size={16} />\n            <span className=\"sr-only\">Home</span>\n          </Link>\n        </li>\n        \n        {items.map((item, index) => (\n          <li key={item.href} className=\"flex items-center\">\n            <ChevronRight size={16} className=\"mx-2 text-gray-400\" aria-hidden=\"true\" />\n            {item.current ? (\n              <span className=\"text-sm font-medium text-gray-700\" aria-current=\"page\">\n                {item.name}\n              </span>\n            ) : (\n              <Link\n                href={item.href}\n                className=\"text-sm text-gray-500 hover:text-gray-700 transition-colors\"\n              >\n                {item.name}\n              </Link>\n            )}\n          </li>\n        ))}\n      </ol>\n      \n      {/* Structured data for breadcrumbs (hidden from users, visible to search engines) */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{\n          __html: JSON.stringify({\n            '@context': 'https://schema.org',\n            '@type': 'BreadcrumbList',\n            'itemListElement': [\n              {\n                '@type': 'ListItem',\n                'position': 1,\n                'name': 'Home',\n                'item': 'https://coolors.in/'\n              },\n              ...items.map((item, index) => ({\n                '@type': 'ListItem',\n                'position': index + 2,\n                'name': item.name,\n                'item': `https://coolors.in${item.href}`\n              }))\n            ]\n          })\n        }}\n      />\n    </nav>\n  );\n};\n\nexport default Breadcrumbs;","size_bytes":2438},"components/CommonHead.tsx":{"content":"import React from 'react';\nimport Head from 'next/head';\n\ninterface CommonHeadProps {\n  title: string;\n  description: string;\n  keywords?: string;\n  ogImage?: string;\n  canonicalUrl?: string;\n  structuredData?: object;\n}\n\n/**\n * A reusable head component for consistent SEO across pages\n */\nexport const CommonHead = ({\n  title,\n  description,\n  keywords = \"color palette generator, color scheme, color combinations, design tools\",\n  ogImage = \"/og-default.jpg\",\n  canonicalUrl,\n  structuredData,\n}: CommonHeadProps) => {\n  const siteUrl = \"https://coolors.in\";\n  const fullTitle = title.includes(\"Coolors.in\") ? title : `${title} | Coolors.in`;\n  \n  return (\n    <Head>\n      {/* Core Meta Tags */}\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      {keywords && <meta name=\"keywords\" content={keywords} />}\n      \n      {/* Canonical URL */}\n      {canonicalUrl && <link rel=\"canonical\" href={canonicalUrl} />}\n      \n      {/* Open Graph / Facebook */}\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={`${siteUrl}${ogImage}`} />\n      {canonicalUrl && <meta property=\"og:url\" content={canonicalUrl} />}\n      \n      {/* Twitter Card */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={`${siteUrl}${ogImage}`} />\n      \n      {/* Structured Data */}\n      {structuredData && (\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify(structuredData)\n          }}\n        />\n      )}\n    </Head>\n  );\n};","size_bytes":1857},"components/Footer.tsx":{"content":"import React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\ninterface FooterProps {\n  className?: string;\n}\n\n/**\n * Semantic footer component with navigation and copyright information\n * Improves SEO with proper HTML5 semantic elements and site navigation\n */\nconst Footer: React.FC<FooterProps> = ({ className = '' }) => {\n  const router = useRouter();\n  const currentYear = new Date().getFullYear();\n  \n  // Check if the current path matches a link\n  const isActive = (path: string) => router.pathname === path;\n  \n  return (\n    <footer className={`bg-gray-800 text-white py-8 ${className}`}>\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Logo and description */}\n          <div className=\"md:col-span-1\">\n            <h2 className=\"text-xl font-bold\">Coolors.in</h2>\n            <p className=\"text-gray-400 mt-2\">\n              The super fast color palette generator for designers and developers.\n            </p>\n            <div className=\"mt-4\">\n              <p className=\"text-sm text-gray-300\">\n                Created by <span className=\"font-medium text-white\">Yash</span>\n              </p>\n              <a \n                href=\"mailto:rajyash73@gmail.com\" \n                className=\"text-blue-400 hover:text-blue-300 text-sm transition-colors\"\n              >\n                rajyash73@gmail.com\n              </a>\n            </div>\n          </div>\n          \n          {/* Navigation */}\n          <nav className=\"md:col-span-1\">\n            <h3 className=\"text-lg font-semibold mb-3\">Features</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link \n                  href=\"/\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/') ? 'text-white font-medium' : ''}`}\n                >\n                  Palette Generator\n                </Link>\n              </li>\n              <li>\n                <Link \n                  href=\"/visualizer\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/visualizer') ? 'text-white font-medium' : ''}`}\n                >\n                  Visualizer\n                </Link>\n              </li>\n              <li>\n                <Link \n                  href=\"/image-palette\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/image-palette') ? 'text-white font-medium' : ''}`}\n                >\n                  Image to Palette\n                </Link>\n              </li>\n            </ul>\n          </nav>\n          \n          {/* Resources */}\n          <nav className=\"md:col-span-1\">\n            <h3 className=\"text-lg font-semibold mb-3\">Resources</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link \n                  href=\"/designers-guide\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/designers-guide') ? 'text-white font-medium' : ''}`}\n                >\n                  Designer's Guide\n                </Link>\n              </li>\n              <li>\n                <Link \n                  href=\"/faq\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/faq') ? 'text-white font-medium' : ''}`}\n                >\n                  FAQ\n                </Link>\n              </li>\n            </ul>\n          </nav>\n          \n          {/* Legal */}\n          <nav className=\"md:col-span-1\">\n            <h3 className=\"text-lg font-semibold mb-3\">Legal</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link \n                  href=\"/privacy-policy\" \n                  className={`text-gray-300 hover:text-white transition-colors ${isActive('/privacy-policy') ? 'text-white font-medium' : ''}`}\n                >\n                  Privacy Policy\n                </Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n        \n        {/* Copyright and terms */}\n        <div className=\"mt-10 pt-4 border-t border-gray-700 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-gray-400 text-sm\">\n            &copy; {currentYear} Coolors.in. All rights reserved.\n          </p>\n          <div className=\"mt-4 md:mt-0 flex space-x-4\">\n            {/* Social links can be added here */}\n            <span className=\"text-xs text-gray-500\">\n              Built with SEO best practices\n            </span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":4653},"components/MobileNav.tsx":{"content":"import React, { useState } from 'react';\nimport Link from 'next/link';\nimport { X, Menu, Home, PenTool, HelpCircle, Settings, BookOpen } from 'lucide-react';\n\ninterface MobileNavProps {\n  currentPath: string;\n}\n\n/**\n * Mobile-friendly navigation component with improved accessibility and SEO\n */\nconst MobileNav: React.FC<MobileNavProps> = ({ currentPath }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n    // When opening menu, prevent background scrolling\n    if (!isOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n  };\n\n  // Close menu when clicking a link\n  const handleLinkClick = () => {\n    setIsOpen(false);\n    document.body.style.overflow = 'auto';\n  };\n\n  return (\n    <>\n      {/* Mobile menu button */}\n      <button \n        onClick={toggleMenu}\n        aria-label={isOpen ? \"Close menu\" : \"Open menu\"}\n        aria-expanded={isOpen}\n        className=\"lg:hidden p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-md\"\n      >\n        {isOpen ? <X size={24} /> : <Menu size={24} />}\n      </button>\n\n      {/* Mobile navigation overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 z-50 lg:hidden bg-gray-900 bg-opacity-50\"\n          aria-hidden=\"true\"\n          onClick={toggleMenu}\n        />\n      )}\n\n      {/* Mobile navigation menu */}\n      <nav \n        className={`fixed top-0 right-0 z-50 h-full w-64 bg-white shadow-xl transform transition-transform duration-300 ease-in-out ${\n          isOpen ? 'translate-x-0' : 'translate-x-full'\n        } lg:hidden`}\n        aria-label=\"Mobile navigation\"\n      >\n        <div className=\"flex justify-between items-center p-4 border-b\">\n          <span className=\"text-lg font-bold\">Coolors.in</span>\n          <button \n            onClick={toggleMenu}\n            aria-label=\"Close menu\"\n            className=\"p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-full\"\n          >\n            <X size={20} />\n          </button>\n        </div>\n\n        <ul className=\"py-4\">\n          <li>\n            <Link \n              href=\"/\" \n              onClick={handleLinkClick}\n              className={`flex items-center px-4 py-3 ${\n                currentPath === '/' ? 'bg-blue-50 text-blue-600' : 'text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              <Home size={18} className=\"mr-3\" />\n              <span>Home</span>\n            </Link>\n          </li>\n          <li>\n            <Link \n              href=\"/visualizer\" \n              onClick={handleLinkClick}\n              className={`flex items-center px-4 py-3 ${\n                currentPath === '/visualizer' ? 'bg-blue-50 text-blue-600' : 'text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              <PenTool size={18} className=\"mr-3\" />\n              <span>Palette Visualizer</span>\n            </Link>\n          </li>\n          <li>\n            <Link \n              href=\"/designers-guide\" \n              onClick={handleLinkClick}\n              className={`flex items-center px-4 py-3 ${\n                currentPath === '/designers-guide' ? 'bg-blue-50 text-blue-600' : 'text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              <BookOpen size={18} className=\"mr-3\" />\n              <span>Designer's Guide</span>\n            </Link>\n          </li>\n          <li>\n            <Link \n              href=\"/faq\" \n              onClick={handleLinkClick}\n              className={`flex items-center px-4 py-3 ${\n                currentPath === '/faq' ? 'bg-blue-50 text-blue-600' : 'text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              <HelpCircle size={18} className=\"mr-3\" />\n              <span>FAQ</span>\n            </Link>\n          </li>\n        </ul>\n\n        <div className=\"absolute bottom-0 w-full border-t p-4\">\n          <Link \n            href=\"/privacy-policy\" \n            onClick={handleLinkClick}\n            className=\"text-sm text-gray-500 hover:text-gray-700\"\n          >\n            Privacy Policy\n          </Link>\n        </div>\n      </nav>\n    </>\n  );\n};\n\nexport default MobileNav;","size_bytes":4271},"components/OptimizedImage.tsx":{"content":"import React from 'react';\nimport Image from 'next/image';\n\ninterface OptimizedImageProps {\n  src: string;\n  alt: string;\n  width?: number;\n  height?: number;\n  priority?: boolean;\n  className?: string;\n  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';\n}\n\nconst OptimizedImage: React.FC<OptimizedImageProps> = ({\n  src,\n  alt,\n  width,\n  height,\n  priority = false,\n  className = '',\n  objectFit = 'cover'\n}) => {\n  // For dynamic imports from public folder\n  const imageSrc = src.startsWith('/') ? src : `/${src}`;\n  \n  return (\n    <div className={`relative ${className}`} style={{ width: width ? `${width}px` : '100%', height: height ? `${height}px` : 'auto' }}>\n      <Image\n        src={imageSrc}\n        alt={alt}\n        fill={!width || !height}\n        width={width}\n        height={height}\n        loading={priority ? 'eager' : 'lazy'} \n        priority={priority}\n        style={{ objectFit }}\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  );\n};\n\nexport default OptimizedImage;","size_bytes":1054},"components/ResponsiveImage.tsx":{"content":"import React from 'react';\nimport Image from 'next/image';\n\ninterface ResponsiveImageProps {\n  src: string;\n  alt: string;\n  className?: string;\n  sizes?: string;\n  priority?: boolean;\n  quality?: number;\n  width?: number;\n  height?: number;\n  fill?: boolean;\n}\n\n/**\n * A responsive image component that optimizes loading based on device size\n * Uses Next.js Image component with performance optimizations\n */\nconst ResponsiveImage: React.FC<ResponsiveImageProps> = ({\n  src,\n  alt,\n  className = '',\n  sizes = '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw',\n  priority = false,\n  quality = 85,\n  width,\n  height,\n  fill = false\n}) => {\n  return (\n    <div className={`relative ${className}`}>\n      <Image\n        src={src}\n        alt={alt}\n        fill={fill}\n        width={!fill ? width : undefined}\n        height={!fill ? height : undefined}\n        quality={quality}\n        sizes={sizes}\n        loading={priority ? 'eager' : 'lazy'}\n        priority={priority}\n        className={`${fill ? 'object-cover' : ''}`}\n      />\n    </div>\n  );\n};\n\nexport default ResponsiveImage;","size_bytes":1095},"components/SEO.tsx":{"content":"import React from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  canonical?: string;\n  ogImage?: string;\n  ogType?: string;\n  keywords?: string;\n  structuredData?: any;\n  children?: React.ReactNode;\n}\n\nconst defaultDescription = \"Create and explore beautiful color combinations with Coolors.in, the free color palette generator. Design with confidence using our intuitive color tools.\";\nconst defaultKeywords = \"color palette generator, color scheme, color combinations, design tools, color palette, color inspiration\";\nconst defaultOgImage = \"/og-default.jpg\"; // Default social sharing image\n\nexport default function SEO({\n  title = \"Coolors.in - Free Color Palette Generator\",\n  description = defaultDescription,\n  canonical,\n  ogImage = defaultOgImage,\n  ogType = \"website\",\n  keywords = defaultKeywords,\n  structuredData,\n  children,\n}: SEOProps) {\n  const router = useRouter();\n  const siteUrl = \"https://coolors.in\"; // Update with your actual domain\n  const currentUrl = canonical || `${siteUrl}${router.asPath}`;\n  const fullTitle = title.includes(\"Coolors.in\") ? title : `${title} | Coolors.in`;\n\n  return (\n    <Head>\n      <title>{fullTitle}</title>\n      <meta name=\"description\" content={description} />\n      <meta name=\"keywords\" content={keywords} />\n      <link rel=\"canonical\" href={currentUrl} />\n      \n      <meta property=\"og:type\" content={ogType} />\n      <meta property=\"og:url\" content={currentUrl} />\n      <meta property=\"og:title\" content={fullTitle} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={`${siteUrl}${ogImage}`} />\n      <meta property=\"og:site_name\" content=\"Coolors.in\" />\n      \n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:url\" content={currentUrl} />\n      <meta name=\"twitter:title\" content={fullTitle} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={`${siteUrl}${ogImage}`} />\n      \n      {structuredData && (\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify(structuredData),\n          }}\n        />\n      )}\n      \n      {children}\n    </Head>\n  );\n}","size_bytes":2341},"components/StructuredData.tsx":{"content":"import React from 'react';\nimport Head from 'next/head';\n\ninterface StructuredDataProps {\n  data: any;\n}\n\n/**\n * Component for adding structured data (JSON-LD) to a page\n * This helps search engines better understand the page content\n */\nconst StructuredData: React.FC<StructuredDataProps> = ({ data }) => {\n  return (\n    <Head>\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(data) }}\n      />\n    </Head>\n  );\n};\n\nexport default StructuredData;","size_bytes":506},"hooks/useViewport.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface ViewportDimensions {\n  width: number;\n  height: number;\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n}\n\n/**\n * Custom hook to handle responsive design based on viewport dimensions\n * Provides information about the current viewport size and device type\n */\nexport function useViewport(): ViewportDimensions {\n  // Default to desktop values\n  const [viewport, setViewport] = useState<ViewportDimensions>({\n    width: typeof window !== 'undefined' ? window.innerWidth : 1200,\n    height: typeof window !== 'undefined' ? window.innerHeight : 800,\n    isMobile: false,\n    isTablet: false,\n    isDesktop: true,\n  });\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    // Handle resize events\n    const handleResize = () => {\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      \n      setViewport({\n        width,\n        height,\n        isMobile: width < 640,\n        isTablet: width >= 640 && width < 1024,\n        isDesktop: width >= 1024,\n      });\n    };\n    \n    // Set initial dimensions\n    handleResize();\n    \n    // Add event listener\n    window.addEventListener('resize', handleResize);\n    \n    // Clean up\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  \n  return viewport;\n}","size_bytes":1351},"pages/404.tsx":{"content":"import React from 'react';\nimport Link from 'next/link';\nimport SEO from '../components/SEO';\n\nexport default function Custom404() {\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <SEO\n        title=\"Page Not Found | Coolors.in\"\n        description=\"The page you're looking for could not be found. Return to Coolors.in to generate beautiful color palettes.\"\n      />\n      \n      <main className=\"flex-1 flex flex-col items-center justify-center px-4 text-center\">\n        <div className=\"max-w-md\">\n          <h1 className=\"text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-blue-500 mb-6\">\n            404\n          </h1>\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-4\">\n            Page Not Found\n          </h2>\n          <p className=\"text-gray-600 mb-8\">\n            We couldn't find the page you were looking for. It might have been moved, deleted, or never existed.\n          </p>\n          \n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <Link href=\"/\" className=\"px-5 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\">\n              Go to Homepage\n            </Link>\n            <Link href=\"/faq\" className=\"px-5 py-3 border border-gray-300 rounded-md hover:bg-gray-100 transition-colors\">\n              Visit FAQ\n            </Link>\n          </div>\n        </div>\n        \n        {/* Color palette display */}\n        <div className=\"mt-12 w-full max-w-lg\">\n          <div className=\"flex h-12 rounded-md overflow-hidden shadow-md\">\n            <div className=\"flex-1 bg-red-500\"></div>\n            <div className=\"flex-1 bg-yellow-400\"></div>\n            <div className=\"flex-1 bg-green-500\"></div>\n            <div className=\"flex-1 bg-blue-500\"></div>\n            <div className=\"flex-1 bg-purple-500\"></div>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            While you're here, enjoy this colorful palette!\n          </p>\n        </div>\n      </main>\n      \n      <footer className=\"py-6 text-center\">\n        <p className=\"text-gray-600 text-sm\">\n          &copy; {new Date().getFullYear()} Coolors.in. All rights reserved.\n        </p>\n      </footer>\n    </div>\n  );\n}","size_bytes":2260},"pages/500.tsx":{"content":"import React from 'react';\nimport Link from 'next/link';\nimport SEO from '../components/SEO';\n\nexport default function Custom500() {\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <SEO\n        title=\"Server Error | Coolors.in\"\n        description=\"Something went wrong on our server. We're working on fixing the issue.\"\n      />\n      \n      <main className=\"flex-1 flex flex-col items-center justify-center px-4 text-center\">\n        <div className=\"max-w-md\">\n          <h1 className=\"text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-orange-500 mb-6\">\n            500\n          </h1>\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-4\">\n            Server Error\n          </h2>\n          <p className=\"text-gray-600 mb-8\">\n            Something went wrong on our server. We've been notified and are working on fixing the issue. Please try again later.\n          </p>\n          \n          <div className=\"flex flex-wrap gap-4 justify-center\">\n            <Link href=\"/\" className=\"px-5 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\">\n              Try Again\n            </Link>\n            <Link href=\"/faq\" className=\"px-5 py-3 border border-gray-300 rounded-md hover:bg-gray-100 transition-colors\">\n              Visit FAQ\n            </Link>\n          </div>\n        </div>\n        \n        {/* Color palette display */}\n        <div className=\"mt-12 w-full max-w-lg\">\n          <div className=\"flex h-12 rounded-md overflow-hidden shadow-md\">\n            <div className=\"flex-1 bg-blue-700\"></div>\n            <div className=\"flex-1 bg-blue-500\"></div>\n            <div className=\"flex-1 bg-blue-300\"></div>\n            <div className=\"flex-1 bg-gray-300\"></div>\n            <div className=\"flex-1 bg-gray-100\"></div>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            While we fix things, enjoy this calming palette\n          </p>\n        </div>\n      </main>\n      \n      <footer className=\"py-6 text-center\">\n        <p className=\"text-gray-600 text-sm\">\n          &copy; {new Date().getFullYear()} Coolors.in. All rights reserved.\n        </p>\n      </footer>\n    </div>\n  );\n}","size_bytes":2226},"pages/_app.tsx":{"content":"import React from 'react';\nimport type { AppProps } from 'next/app';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from '../client/src/lib/queryClient';\nimport { PaletteProvider } from '../client/src/contexts/PaletteContext';\nimport { AuthProvider } from '../client/src/hooks/use-auth';\nimport { Toaster } from '../client/src/components/ui/toaster';\nimport '../styles/globals.css';\n\n// Import optimized script loading and Head component\nimport Script from 'next/script';\nimport Head from 'next/head';\nimport { AdSenseSetup } from '../components/AdSense';\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return (\n    <>\n      <Head>\n        {/* Add preconnect for critical domains to improve load times */}\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link rel=\"preconnect\" href=\"https://cdnjs.cloudflare.com\" />\n        <link rel=\"preconnect\" href=\"https://www.googletagmanager.com\" />\n        \n        {/* Preload critical fonts for better performance */}\n        <link \n          href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" \n          rel=\"stylesheet\"\n        />\n        \n        {/* Font Awesome */}\n        <link \n          href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\" \n          rel=\"stylesheet\"\n        />\n        \n        {/* Favicon */}\n        <link rel=\"icon\" href=\"/favicon.svg\" />\n        \n        {/* Default viewport setting for responsive design */}\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        \n        {/* Performance optimizations */}\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta name=\"theme-color\" content=\"#3b82f6\" />\n        \n        {/* Security */}\n        <meta httpEquiv=\"Content-Security-Policy\" content=\"upgrade-insecure-requests\" />\n      </Head>\n\n      {/* Google Analytics - optimized loading strategy */}\n      <Script\n        strategy=\"afterInteractive\"\n        src={`https://www.googletagmanager.com/gtag/js?id=G-XB40PTGVD4`}\n      />\n      <Script id=\"google-analytics\" strategy=\"afterInteractive\">\n        {`\n          window.dataLayer = window.dataLayer || [];\n          function gtag(){dataLayer.push(arguments);}\n          gtag('js', new Date());\n          gtag('config', 'G-XB40PTGVD4', {\n            'anonymize_ip': true,\n            'page_path': window.location.pathname\n          });\n        `}\n      </Script>\n\n      {/* Google AdSense setup component - loaded with afterInteractive strategy */}\n      <AdSenseSetup />\n\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <PaletteProvider>\n            <Component {...pageProps} />\n            <Toaster />\n          </PaletteProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </>\n  );\n}\n\nexport default MyApp;","size_bytes":2974},"pages/_document.tsx":{"content":"import React from 'react';\nimport Document, { Html, Head, Main, NextScript, DocumentContext } from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx: DocumentContext) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          {/* Meta charset for proper text encoding */}\n          <meta charSet=\"utf-8\" />\n          \n          {/* Basic application metadata */}\n          <meta name=\"application-name\" content=\"Coolors.in\" />\n          <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n          <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\" />\n          <meta name=\"apple-mobile-web-app-title\" content=\"Coolors.in\" />\n          <meta name=\"format-detection\" content=\"telephone=no\" />\n          \n          {/* Preconnect to critical resources */}\n          <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n          <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n          <link rel=\"preconnect\" href=\"https://cdnjs.cloudflare.com\" />\n          \n          {/* Preload critical assets */}\n          <link rel=\"preload\" href=\"/logo_circles.svg\" as=\"image\" type=\"image/svg+xml\" />\n          \n          {/* Add webmanifest for PWA support */}\n          <link rel=\"manifest\" href=\"/manifest.json\" />\n          \n          {/* Structured data for organization */}\n          <script\n            type=\"application/ld+json\"\n            dangerouslySetInnerHTML={{\n              __html: JSON.stringify({\n                '@context': 'https://schema.org',\n                '@type': 'WebApplication',\n                'name': 'Coolors.in Color Palette Generator',\n                'url': 'https://coolors.in/',\n                'description': 'Create beautiful color combinations with our intuitive color generator',\n                'applicationCategory': 'DesignApplication',\n                'operatingSystem': 'Any',\n                'offers': {\n                  '@type': 'Offer',\n                  'price': '0',\n                  'priceCurrency': 'USD'\n                },\n                'featureList': 'Generate color palettes, Save palettes, Export in multiple formats, Visualize palettes in UI templates'\n              }),\n            }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n          {/* No-JavaScript fallback content */}\n          <noscript>\n            <div style={{\n              padding: '20px',\n              textAlign: 'center',\n              maxWidth: '600px',\n              margin: '40px auto',\n              lineHeight: '1.6',\n              fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif'\n            }}>\n              <h1>JavaScript is Required</h1>\n              <p>\n                Coolors.in requires JavaScript to generate color palettes and provide an interactive experience.\n                Please enable JavaScript in your browser settings to use all features of this application.\n              </p>\n              <p>\n                While waiting for JavaScript to be enabled, here are some pre-generated color palettes you might like:\n              </p>\n              <div style={{ display: 'flex', flexDirection: 'column', gap: '10px', marginTop: '20px' }}>\n                <div style={{ display: 'flex', height: '50px' }}>\n                  <div style={{ flex: 1, backgroundColor: '#E63946' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#F1FAEE' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#A8DADC' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#457B9D' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#1D3557' }}></div>\n                </div>\n                <div style={{ display: 'flex', height: '50px' }}>\n                  <div style={{ flex: 1, backgroundColor: '#264653' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#2A9D8F' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#E9C46A' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#F4A261' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#E76F51' }}></div>\n                </div>\n                <div style={{ display: 'flex', height: '50px' }}>\n                  <div style={{ flex: 1, backgroundColor: '#606C38' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#283618' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#FEFAE0' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#DDA15E' }}></div>\n                  <div style={{ flex: 1, backgroundColor: '#BC6C25' }}></div>\n                </div>\n              </div>\n            </div>\n          </noscript>\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;","size_bytes":4965},"pages/designers-guide.tsx":{"content":"import React from 'react';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Header from '../client/src/components/Header';\nimport Footer from '../client/src/components/Footer';\nimport { SidebarAd, InArticleAd } from '../components/AdSense';\n\nconst DesignersGuide: NextPage = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = React.useState(false);\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <Head>\n        <title>Designer's Guide to Color Theory - Coolors.in</title>\n        <meta name=\"description\" content=\"Learn the fundamentals of color theory, color harmonies, and how to create stunning color palettes for your designs with our comprehensive guide.\" />\n        <meta name=\"keywords\" content=\"color theory, color harmonies, design guide, palette creation, color psychology\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/designers-guide\" />\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify({\n              '@context': 'https://schema.org',\n              '@type': 'Article',\n              'headline': 'Designer\\'s Guide to Color Theory',\n              'image': 'https://coolors.in/designers-guide-banner.jpg',\n              'author': {\n                '@type': 'Organization',\n                'name': 'Coolors.in'\n              },\n              'publisher': {\n                '@type': 'Organization',\n                'name': 'Coolors.in',\n                'logo': {\n                  '@type': 'ImageObject',\n                  'url': 'https://coolors.in/logo.svg'\n                }\n              },\n              'datePublished': '2023-01-15',\n              'dateModified': new Date().toISOString().split('T')[0]\n            })\n          }}\n        />\n      </Head>\n\n      <Header \n        onHelp={() => {}} \n        onExport={() => {}} \n        onSave={() => {}}\n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={() => setMobileMenuOpen(!mobileMenuOpen)}\n      />\n\n      <main className=\"flex-1\">\n        <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white py-16\">\n          <div className=\"container mx-auto px-4 max-w-5xl\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">Designer's Guide to Color Theory</h1>\n            <p className=\"text-xl md:text-2xl max-w-3xl opacity-90\">\n              Understanding the fundamental principles that will help you create harmonious and effective color palettes\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 py-12 max-w-5xl\">\n          <div className=\"flex flex-col md:flex-row gap-8\">\n            <div className=\"md:w-3/4\">\n              <nav className=\"mb-8 p-4 bg-white rounded-lg shadow-sm\">\n                <h2 className=\"text-lg font-semibold mb-3\">In this guide:</h2>\n                <ul className=\"flex flex-wrap gap-2\">\n                  <li>\n                    <a href=\"#color-basics\" className=\"px-3 py-1.5 bg-gray-100 rounded-full text-sm hover:bg-gray-200 transition-colors\">\n                      Color Basics\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#color-harmonies\" className=\"px-3 py-1.5 bg-gray-100 rounded-full text-sm hover:bg-gray-200 transition-colors\">\n                      Color Harmonies\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#color-psychology\" className=\"px-3 py-1.5 bg-gray-100 rounded-full text-sm hover:bg-gray-200 transition-colors\">\n                      Color Psychology\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#accessibility\" className=\"px-3 py-1.5 bg-gray-100 rounded-full text-sm hover:bg-gray-200 transition-colors\">\n                      Accessibility\n                    </a>\n                  </li>\n                  <li>\n                    <a href=\"#practical-tips\" className=\"px-3 py-1.5 bg-gray-100 rounded-full text-sm hover:bg-gray-200 transition-colors\">\n                      Practical Tips\n                    </a>\n                  </li>\n                </ul>\n              </nav>\n              \n              <section id=\"color-basics\" className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">The Basics of Color Theory</h2>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">The Color Wheel</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  The color wheel is a circular diagram of colors arranged according to their chromatic relationship. It serves as the foundation for understanding how colors relate to each other and how to create harmonious combinations.\n                </p>\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"w-full md:w-2/3 aspect-square rounded-full bg-gradient-conic from-red-500 via-yellow-500 via-green-500 via-blue-500 via-indigo-500 via-purple-500 to-red-500 mb-4\"></div>\n                </div>\n                <p className=\"text-gray-700 mb-6\">\n                  The traditional RYB (Red, Yellow, Blue) color wheel consists of primary, secondary, and tertiary colors:\n                </p>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li><strong className=\"text-red-600\">Primary colors:</strong> Red, Yellow, Blue - cannot be created by mixing other colors</li>\n                  <li><strong className=\"text-orange-500\">Secondary colors:</strong> Orange, Green, Purple - created by mixing two primary colors</li>\n                  <li><strong className=\"text-yellow-600\">Tertiary colors:</strong> Created by mixing a primary and its adjacent secondary color</li>\n                </ul>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Color Properties</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Hue</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      The pure color itself; what we usually mean when we say \"color\" (red, blue, yellow, etc.)\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Saturation</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      The intensity or purity of a color. Highly saturated colors are vivid, while less saturated colors appear more muted or gray.\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Value/Brightness</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      The lightness or darkness of a color. Adding white creates a tint, adding black creates a shade.\n                    </p>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Color Models</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  Different color models are used depending on the medium:\n                </p>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li><strong>RGB (Red, Green, Blue):</strong> Used for digital displays and screens. Additive color model.</li>\n                  <li><strong>CMYK (Cyan, Magenta, Yellow, Black):</strong> Used for print. Subtractive color model.</li>\n                  <li><strong>HSL/HSV (Hue, Saturation, Lightness/Value):</strong> More intuitive models for adjusting colors.</li>\n                </ul>\n              </section>\n              \n              <InArticleAd />\n              \n              <section id=\"color-harmonies\" className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">Color Harmonies</h2>\n                <p className=\"text-gray-700 mb-6\">\n                  Color harmonies are predefined color combinations that work well together. Here are the main types:\n                </p>\n                \n                <div className=\"space-y-8\">\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Monochromatic</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#CCEEFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#99DDFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#66CCFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#33AAFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#0088FF' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses different tints, shades, and tones of a single hue. Creates a cohesive and elegant look, but can lack contrast.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Analogous</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF9900' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFCC00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFFF00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#CCFF00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#99FF00' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses colors that are adjacent to each other on the color wheel. Creates a harmonious and comfortable design with enough variation.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Complementary</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF0000' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF6666' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFFFFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#6666FF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#0000FF' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses colors that are opposite each other on the color wheel. Creates a high-contrast, vibrant look that can be visually striking.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Split-Complementary</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF0000' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF6666' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFFFFF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#66FF66' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#6666FF' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses a base color and the two colors adjacent to its complement. Offers strong visual contrast while being more versatile than a simple complementary scheme.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Triadic</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF0000' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF6666' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFFF00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#66FF66' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#0000FF' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses three colors equally spaced around the color wheel. Creates a vibrant and balanced color scheme, even when using paler or unsaturated versions of the hues.\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Tetradic (Double Complementary)</h3>\n                    <div className=\"flex h-12 rounded-md overflow-hidden mb-3\">\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF0000' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FFFF00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#00FF00' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#0000FF' }}></div>\n                      <div className=\"flex-1\" style={{ backgroundColor: '#FF00FF' }}></div>\n                    </div>\n                    <p className=\"text-gray-700\">\n                      Uses four colors arranged into two complementary pairs. Offers rich color possibilities but can be challenging to balance. Works best when one color dominates.\n                    </p>\n                  </div>\n                </div>\n              </section>\n              \n              <InArticleAd />\n              \n              <section id=\"color-psychology\" className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">Color Psychology</h2>\n                <p className=\"text-gray-700 mb-6\">\n                  Colors can evoke emotional responses and associations. Understanding color psychology helps you choose colors that reinforce your message.\n                </p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                  <div className=\"bg-red-100 p-4 rounded-lg border-l-4 border-red-500\">\n                    <h3 className=\"font-semibold text-lg text-red-800 mb-2\">Red</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Passion, energy, excitement, danger, attention-grabbing\n                    </p>\n                  </div>\n                  <div className=\"bg-orange-100 p-4 rounded-lg border-l-4 border-orange-500\">\n                    <h3 className=\"font-semibold text-lg text-orange-800 mb-2\">Orange</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Enthusiasm, creativity, playfulness, warmth, affordability\n                    </p>\n                  </div>\n                  <div className=\"bg-yellow-100 p-4 rounded-lg border-l-4 border-yellow-500\">\n                    <h3 className=\"font-semibold text-lg text-yellow-800 mb-2\">Yellow</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Optimism, happiness, warmth, caution, intellect\n                    </p>\n                  </div>\n                  <div className=\"bg-green-100 p-4 rounded-lg border-l-4 border-green-500\">\n                    <h3 className=\"font-semibold text-lg text-green-800 mb-2\">Green</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Growth, harmony, health, nature, prosperity\n                    </p>\n                  </div>\n                  <div className=\"bg-blue-100 p-4 rounded-lg border-l-4 border-blue-500\">\n                    <h3 className=\"font-semibold text-lg text-blue-800 mb-2\">Blue</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Trust, reliability, tranquility, professionalism, depth\n                    </p>\n                  </div>\n                  <div className=\"bg-purple-100 p-4 rounded-lg border-l-4 border-purple-500\">\n                    <h3 className=\"font-semibold text-lg text-purple-800 mb-2\">Purple</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Luxury, creativity, wisdom, mystery, spirituality\n                    </p>\n                  </div>\n                  <div className=\"bg-pink-100 p-4 rounded-lg border-l-4 border-pink-500\">\n                    <h3 className=\"font-semibold text-lg text-pink-800 mb-2\">Pink</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Femininity, playfulness, romance, tenderness, youth\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg border-l-4 border-gray-500\">\n                    <h3 className=\"font-semibold text-lg text-gray-800 mb-2\">Neutral (Black, White, Gray)</h3>\n                    <p className=\"text-gray-700 text-sm\">\n                      Sophistication, balance, formality, simplicity, calmness\n                    </p>\n                  </div>\n                </div>\n                \n                <p className=\"text-gray-700 mb-4\">\n                  Keep in mind that cultural context matters. Colors can have different meanings across different cultures and societies.\n                </p>\n              </section>\n              \n              <section id=\"accessibility\" className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">Color Accessibility</h2>\n                <p className=\"text-gray-700 mb-6\">\n                  Ensuring your color choices are accessible to all users, including those with color vision deficiencies, is essential for inclusive design.\n                </p>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Color Contrast</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  WCAG (Web Content Accessibility Guidelines) recommends:\n                </p>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li><strong>AA standard:</strong> Contrast ratio of at least 4.5:1 for normal text and 3:1 for large text</li>\n                  <li><strong>AAA standard:</strong> Contrast ratio of at least 7:1 for normal text and 4.5:1 for large text</li>\n                </ul>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6\">\n                  <div className=\"p-6 rounded-lg\" style={{ backgroundColor: '#FFFFFF' }}>\n                    <div className=\"py-2 px-4 rounded bg-blue-600 text-white mb-2\">\n                      Good contrast: White on blue\n                    </div>\n                    <p className=\"text-gray-800\">This text has good contrast with the background</p>\n                  </div>\n                  <div className=\"p-6 rounded-lg\" style={{ backgroundColor: '#F0F0F0' }}>\n                    <div className=\"py-2 px-4 rounded bg-yellow-200 text-yellow-300 mb-2\">\n                      Poor contrast: Yellow on light yellow\n                    </div>\n                    <p className=\"text-gray-400\">This text has poor contrast with the background</p>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Color Blindness Considerations</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  About 8% of men and 0.5% of women have some form of color vision deficiency. To design for color blindness:\n                </p>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li>Don't rely solely on color to convey information</li>\n                  <li>Use patterns, icons, or labels along with colors</li>\n                  <li>Test your designs with color blindness simulation tools</li>\n                  <li>Use colors with distinctly different brightness levels</li>\n                </ul>\n              </section>\n              \n              <InArticleAd />\n              \n              <section id=\"practical-tips\" className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">Practical Tips for Creating Palettes</h2>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">The 60-30-10 Rule</h3>\n                <p className=\"text-gray-700 mb-4\">\n                  A classic interior design principle that applies equally well to visual design:\n                </p>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li><strong>60%:</strong> Dominant color (backgrounds, large areas)</li>\n                  <li><strong>30%:</strong> Secondary color (supporting elements)</li>\n                  <li><strong>10%:</strong> Accent color (calls to action, highlights)</li>\n                </ul>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Starting Points for Palette Creation</h3>\n                <div className=\"space-y-4 mb-6\">\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Start with a Brand Color</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      If you have a brand color, use it as a starting point and build your palette around it using color harmony principles.\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Draw from Nature</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      Nature's color schemes are inherently harmonious. Landscapes, plants, animals, and minerals can provide inspiring color combinations.\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Use Photography</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      Extract colors from photographs that capture the mood you want to convey. Our Image Palette tool can help with this!\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-100 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-lg mb-2\">Look at Competitors</h4>\n                    <p className=\"text-gray-700 text-sm\">\n                      Analyze what colors are being used in your industry. You might want to align with industry expectations or deliberately stand out.\n                    </p>\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Refinement Tips</h3>\n                <ul className=\"list-disc pl-6 mb-6 text-gray-700 space-y-2\">\n                  <li>Limit your palette to 3-5 colors for most projects</li>\n                  <li>Consider adding neutral colors (white, black, grays) to your palette</li>\n                  <li>Test your palette in different contexts (dark/light mode, different backgrounds)</li>\n                  <li>Ensure sufficient contrast between text and background colors</li>\n                  <li>Create extended palettes by adding tints and shades of your core colors</li>\n                </ul>\n                \n                <div className=\"bg-blue-50 p-6 rounded-lg border-l-4 border-blue-500 mb-4\">\n                  <h3 className=\"text-xl font-semibold text-blue-800 mb-2\">Try it on Coolors.in!</h3>\n                  <p className=\"text-gray-700 mb-4\">\n                    Now that you understand the principles of color theory, put your knowledge into practice:\n                  </p>\n                  <ul className=\"list-disc pl-6 mb-4 text-gray-700 space-y-1\">\n                    <li>Generate random palettes with our <Link href=\"/\" className=\"text-blue-600 hover:text-blue-800 underline\">Palette Generator</Link></li>\n                    <li>Extract colors from images with our <Link href=\"/image-palette\" className=\"text-blue-600 hover:text-blue-800 underline\">Image Palette</Link> tool</li>\n                    <li>Visualize your palettes in real UI with our <Link href=\"/visualize\" className=\"text-blue-600 hover:text-blue-800 underline\">Palette Visualizer</Link></li>\n                  </ul>\n                  <Link href=\"/\" className=\"inline-block px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\">\n                    Create Palettes Now\n                  </Link>\n                </div>\n              </section>\n              \n              <section className=\"mb-12 bg-white rounded-lg shadow-md p-8\">\n                <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">Further Resources</h2>\n                <ul className=\"list-disc pl-6 mb-4 text-gray-700 space-y-2\">\n                  <li><a href=\"https://color.adobe.com/create/color-wheel\" className=\"text-blue-600 hover:text-blue-800\" target=\"_blank\" rel=\"noopener noreferrer\">Adobe Color Wheel</a></li>\n                  <li><a href=\"https://webaim.org/resources/contrastchecker/\" className=\"text-blue-600 hover:text-blue-800\" target=\"_blank\" rel=\"noopener noreferrer\">WebAIM Contrast Checker</a></li>\n                  <li><a href=\"https://www.colorsandfonts.com/\" className=\"text-blue-600 hover:text-blue-800\" target=\"_blank\" rel=\"noopener noreferrer\">Colors & Fonts</a></li>\n                  <li><a href=\"https://colorhunt.co/\" className=\"text-blue-600 hover:text-blue-800\" target=\"_blank\" rel=\"noopener noreferrer\">Color Hunt</a></li>\n                  <li><a href=\"https://www.pantone.com/connect\" className=\"text-blue-600 hover:text-blue-800\" target=\"_blank\" rel=\"noopener noreferrer\">Pantone Connect</a></li>\n                </ul>\n                <p className=\"text-gray-700\">\n                  Remember, while these principles provide a foundation for effective color use, design is also subjective. Trust your instincts and test your color choices with your target audience when possible.\n                </p>\n              </section>\n            </div>\n            \n            <div className=\"md:w-1/4\">\n              <div className=\"sticky top-6\">\n                <div className=\"mb-6 bg-white rounded-lg shadow-sm p-4\">\n                  <h3 className=\"text-lg font-semibold mb-3\">Table of Contents</h3>\n                  <ul className=\"space-y-2 text-gray-700\">\n                    <li><a href=\"#color-basics\" className=\"hover:text-blue-600 transition-colors\">The Basics of Color Theory</a></li>\n                    <li><a href=\"#color-harmonies\" className=\"hover:text-blue-600 transition-colors\">Color Harmonies</a></li>\n                    <li><a href=\"#color-psychology\" className=\"hover:text-blue-600 transition-colors\">Color Psychology</a></li>\n                    <li><a href=\"#accessibility\" className=\"hover:text-blue-600 transition-colors\">Color Accessibility</a></li>\n                    <li><a href=\"#practical-tips\" className=\"hover:text-blue-600 transition-colors\">Practical Tips</a></li>\n                  </ul>\n                </div>\n                \n                <div className=\"mb-6\">\n                  <SidebarAd />\n                </div>\n                \n                <div className=\"bg-white rounded-lg shadow-sm p-4\">\n                  <h3 className=\"text-lg font-semibold mb-3\">Try Our Tools</h3>\n                  <ul className=\"space-y-2\">\n                    <li>\n                      <Link href=\"/\" className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n                        <span className=\"mr-2\">🎨</span> Palette Generator\n                      </Link>\n                    </li>\n                    <li>\n                      <Link href=\"/image-palette\" className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n                        <span className=\"mr-2\">🖼️</span> Image Palette\n                      </Link>\n                    </li>\n                    <li>\n                      <Link href=\"/visualize\" className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n                        <span className=\"mr-2\">👁️</span> Palette Visualizer\n                      </Link>\n                    </li>\n                    <li>\n                      <Link href=\"/saved-palettes\" className=\"text-blue-600 hover:text-blue-800 flex items-center\">\n                        <span className=\"mr-2\">💾</span> Saved Palettes\n                      </Link>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer className=\"mt-auto\" />\n    </div>\n  );\n};\n\nexport default DesignersGuide;","size_bytes":29674},"pages/faq.tsx":{"content":"import React, { useState } from 'react';\nimport type { NextPage } from 'next';\nimport Link from 'next/link';\nimport Header from '../client/src/components/Header';\nimport SEO from '../components/SEO';\nimport { generateFAQSchema, generateBreadcrumbSchema } from '../utils/structuredData';\n\n// Define the FAQ data structure\ntype FAQ = {\n  question: string;\n  answer: React.ReactNode;\n};\n\nconst FAQPage: NextPage = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  \n  // FAQ data with rich HTML content\n  const faqs: FAQ[] = [\n    {\n      question: \"What is Coolors.in?\",\n      answer: (\n        <p>\n          Coolors.in is a free color palette generator that helps designers, developers, and creatives discover, create, and share beautiful color combinations for their projects. It offers intuitive tools to generate, adjust, export, and visualize color palettes.\n        </p>\n      )\n    },\n    {\n      question: \"How do I generate a new color palette?\",\n      answer: (\n        <div>\n          <p>There are multiple ways to generate a color palette in Coolors.in:</p>\n          <ul className=\"list-disc pl-5 space-y-1 mt-2\">\n            <li>Press the spacebar on your keyboard (the easiest way)</li>\n            <li>Click the \"Generate\" button in the action bar</li>\n            <li>Choose a trending palette from the sidebar</li>\n            <li>Upload an image to extract colors</li>\n            <li>Select a color theory (complementary, analogous, etc.) from the dropdown</li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      question: \"Can I lock specific colors while generating others?\",\n      answer: (\n        <p>\n          Yes! Click the lock icon on any color you want to keep fixed. When you generate a new palette (with spacebar or the generate button), locked colors will remain unchanged while other colors will be regenerated.\n        </p>\n      )\n    },\n    {\n      question: \"How do I adjust the colors in my palette?\",\n      answer: (\n        <p>\n          Click on any color's \"Adjust\" button to open the color adjustment modal. You can fine-tune the color using RGB sliders, or enter a specific hex code. Changes apply only to that specific color in your palette.\n        </p>\n      )\n    },\n    {\n      question: \"How can I save or export my palette?\",\n      answer: (\n        <div>\n          <p>You have several options to save or export your palette:</p>\n          <ul className=\"list-disc pl-5 space-y-1 mt-2\">\n            <li>Click the \"Save\" button to store your palette locally</li>\n            <li>Click the \"Export\" button to download your palette as a PNG image or JSON file</li>\n            <li>Copy individual hex/RGB values by clicking on the format you need</li>\n            <li>Create a URL with your palette to share with others</li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      question: \"What color theories are available?\",\n      answer: (\n        <div>\n          <p>Coolors.in provides several color theories to guide palette generation:</p>\n          <ul className=\"list-disc pl-5 space-y-1 mt-2\">\n            <li><strong>Monochromatic</strong>: Variations of a single color with different shades and tints</li>\n            <li><strong>Analogous</strong>: Colors that sit next to each other on the color wheel</li>\n            <li><strong>Complementary</strong>: Colors from opposite sides of the color wheel</li>\n            <li><strong>Split-complementary</strong>: A color plus two colors adjacent to its complement</li>\n            <li><strong>Triadic</strong>: Three colors evenly spaced around the color wheel</li>\n            <li><strong>Tetradic</strong>: Two pairs of complementary colors</li>\n            <li><strong>Neutral</strong>: Subtle, desaturated colors that work well as backgrounds</li>\n          </ul>\n        </div>\n      )\n    },\n    {\n      question: \"How does the image-to-palette feature work?\",\n      answer: (\n        <p>\n          Navigate to the \"Image Palette\" page, upload an image, and our algorithm will extract the dominant colors from your image to create a harmonious palette. You can adjust the number of colors and extraction method to get the best results.\n        </p>\n      )\n    },\n    {\n      question: \"What is the Palette Visualizer?\",\n      answer: (\n        <p>\n          The Palette Visualizer shows how your colors would look in real-world UI components. It offers templates for dashboards, landing pages, analytics, chat interfaces, and calendars so you can see how your palette works in practical applications.\n        </p>\n      )\n    },\n    {\n      question: \"Can I use Coolors.in for commercial projects?\",\n      answer: (\n        <p>\n          Yes! Coolors.in is free to use for both personal and commercial projects. The color palettes you generate are yours to use however you wish. We appreciate attribution, but it's not required.\n        </p>\n      )\n    },\n    {\n      question: \"How do I contact Coolors.in for feedback or support?\",\n      answer: (\n        <p>\n          For feedback, support, or business inquiries, please email us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:text-blue-800 underline\">coolors.in@gmail.com</a>. We welcome suggestions for new features and improvements!\n        </p>\n      )\n    },\n  ];\n\n  // Create plain text versions of answers for structured data\n  const plainTextFaqs = faqs.map(faq => ({\n    question: faq.question,\n    answer: typeof faq.answer === 'string' \n      ? faq.answer \n      : 'See our FAQ page for more details.'\n  }));\n\n  // Define breadcrumb for structured data\n  const breadcrumbs = [\n    { name: 'Home', url: '/' },\n    { name: 'FAQ', url: '/faq' }\n  ];\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <SEO\n        title=\"FAQ - Coolors.in | Color Palette Generator\"\n        description=\"Find answers to frequently asked questions about Coolors.in's color palette generator, features, and how to make the most of our tools.\"\n        keywords=\"color palette FAQ, color generator help, Coolors.in tutorial, color scheme questions, palette creator help\"\n        canonical=\"https://coolors.in/faq\"\n        structuredData={generateFAQSchema(plainTextFaqs)}\n      >\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify(generateBreadcrumbSchema(breadcrumbs))\n          }}\n        />\n      </SEO>\n      \n      <Header \n        onHelp={() => {}} \n        onExport={() => {}} \n        onSave={() => {}}\n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={() => setMobileMenuOpen(!mobileMenuOpen)}\n      />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-8 max-w-5xl\">\n        {/* Breadcrumb navigation for better user experience and SEO */}\n        <nav aria-label=\"Breadcrumb\" className=\"mb-6\">\n          <ol className=\"flex text-sm text-gray-500\">\n            <li>\n              <Link href=\"/\" className=\"hover:text-blue-600 transition-colors\">\n                Home\n              </Link>\n              <span className=\"mx-2\" aria-hidden=\"true\">/</span>\n            </li>\n            <li aria-current=\"page\" className=\"font-medium text-gray-700\">FAQ</li>\n          </ol>\n        </nav>\n        \n        <header>\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-8 mt-4\">Frequently Asked Questions</h1>\n        </header>\n        \n        <section aria-labelledby=\"faq-section\">\n          <div className=\"rounded-lg bg-white shadow-md\">\n            {faqs.map((faq, index) => (\n              <article \n                key={index} \n                className={`p-5 border-b border-gray-200 ${index === faqs.length - 1 ? 'border-b-0' : ''}`}\n                id={`faq-${index}`}\n              >\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-3\">{faq.question}</h2>\n                <div className=\"text-gray-600 leading-relaxed prose max-w-none\">{faq.answer}</div>\n              </article>\n            ))}\n          </div>\n        </section>\n        \n        <section aria-labelledby=\"help-section\" className=\"mt-10\">\n          <div className=\"bg-blue-50 rounded-lg p-6 shadow-sm\">\n            <h2 id=\"help-section\" className=\"text-xl font-semibold text-blue-800 mb-3\">Still need help?</h2>\n            <p className=\"text-blue-700 mb-4\">\n              If you couldn't find the answer you're looking for, check out our <Link href=\"/designers-guide\" className=\"text-blue-600 hover:text-blue-800 underline focus:ring-2 focus:ring-blue-500\">Designer's Guide</Link> for more in-depth information about color theory and best practices.\n            </p>\n            <p className=\"text-blue-700\">\n              For additional support, contact us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:text-blue-800 underline focus:ring-2 focus:ring-blue-500\">coolors.in@gmail.com</a>\n            </p>\n          </div>\n        </section>\n      </main>\n      \n      <footer className=\"bg-gray-800 text-white py-8 mt-10\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"mb-4 md:mb-0\">\n              <h2 className=\"text-xl font-bold\">Coolors.in</h2>\n              <p className=\"text-gray-400 text-sm mt-1\">The super fast color palette generator</p>\n            </div>\n            \n            <nav aria-label=\"Footer Navigation\">\n              <ul className=\"flex flex-wrap justify-center space-x-6\">\n                <li>\n                  <Link href=\"/\" className=\"text-gray-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    Home\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/designers-guide\" className=\"text-gray-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    Designer's Guide\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/faq\" className=\"text-gray-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    <span aria-current=\"page\">FAQ</span>\n                  </Link>\n                </li>\n                <li>\n                  <Link href=\"/privacy-policy\" className=\"text-gray-300 hover:text-white transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500\">\n                    Privacy Policy\n                  </Link>\n                </li>\n              </ul>\n            </nav>\n          </div>\n          \n          <div className=\"mt-8 text-center text-gray-400 text-sm\">\n            <p>© {new Date().getFullYear()} Coolors.in. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n\nexport default FAQPage;","size_bytes":10865},"pages/index.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport type { NextPage } from 'next';\nimport dynamic from 'next/dynamic';\nimport { useToast } from '../client/src/hooks/use-toast';\nimport Header from '../client/src/components/Header';\nimport KeyboardShortcutsBar from '../client/src/components/KeyboardShortcutsBar';\nimport ActionButtons from '../client/src/components/ActionButtons';\nimport ColorCard from '../client/src/components/ColorCard';\nimport OnboardingTour from '../client/src/components/modals/OnboardingTour';\nimport ExportModal from '../client/src/components/modals/ExportModal';\nimport AdjustColorModal from '../client/src/components/modals/AdjustColorModal';\nimport { usePalette } from '../client/src/contexts/PaletteContext';\nimport { type Color } from '../client/src/types/Color';\nimport SEO from '../components/SEO';\n\n// Define any components that must be client-side only\nconst ClientSideShortcutsBar = dynamic(\n  () => import('../client/src/components/KeyboardShortcutsBar'),\n  { ssr: false }\n);\n\nconst HomePage: NextPage = () => {\n  const [showOnboarding, setShowOnboarding] = useState(false);\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [showAdjustModal, setShowAdjustModal] = useState(false);\n  const [activeColorIndex, setActiveColorIndex] = useState<number | null>(null);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [draggedIndex, setDraggedIndex] = useState<number | null>(null);\n  const [isClient, setIsClient] = useState(false);\n  \n  const { palette, generatePalette, addColor, resetPalette, updateColor, reorderColors } = usePalette();\n  const { toast } = useToast();\n\n  // Set isClient to true after component mounts\n  useEffect(() => {\n    setIsClient(true);\n    \n    // Check if first visit\n    if (typeof window !== 'undefined') {\n      const hasVisited = localStorage.getItem(\"hasVisitedPalettePro\");\n      if (!hasVisited) {\n        setShowOnboarding(true);\n        localStorage.setItem(\"hasVisitedPalettePro\", \"true\");\n      }\n    }\n    \n    // Setup space key handler\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.code === \"Space\" && \n          document.activeElement?.tagName !== \"INPUT\" && \n          document.activeElement?.tagName !== \"TEXTAREA\" &&\n          !showOnboarding && \n          !showExportModal && \n          !showAdjustModal) {\n        e.preventDefault();\n        handleGeneratePalette();\n      }\n    };\n    \n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [showOnboarding, showExportModal, showAdjustModal]);\n\n  const handleGeneratePalette = () => {\n    // Call the generate palette function from context\n    generatePalette();\n    \n    toast({\n      title: \"New palette generated!\",\n      description: \"Press spacebar for another one.\",\n      duration: 2000,\n    });\n  };\n\n  const handleSavePalette = () => {\n    // Save to localStorage\n    if (typeof window !== 'undefined') {\n      const savedPalettes = JSON.parse(localStorage.getItem(\"savedPalettes\") || \"[]\");\n      const newPalette = {\n        id: Date.now(),\n        colors: palette,\n        createdAt: new Date().toISOString(),\n      };\n      \n      savedPalettes.push(newPalette);\n      localStorage.setItem(\"savedPalettes\", JSON.stringify(savedPalettes));\n      \n      toast({\n        title: \"Palette saved!\",\n        description: \"Your palette has been saved to local storage.\",\n        duration: 2000,\n      });\n    }\n  };\n\n  const handleHelp = () => {\n    setShowOnboarding(true);\n  };\n\n  const handleExport = () => {\n    setShowExportModal(true);\n  };\n\n  const handleAdjustColor = (index: number) => {\n    setActiveColorIndex(index);\n    setShowAdjustModal(true);\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n  \n  // Drag and drop handlers for mobile and desktop\n  const handleDragStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n  \n  const handleDragOver = (e: React.DragEvent, index: number) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = \"move\";\n  };\n  \n  const handleDrop = (e: React.DragEvent, targetIndex: number) => {\n    e.preventDefault();\n    if (draggedIndex !== null && draggedIndex !== targetIndex) {\n      reorderColors(draggedIndex, targetIndex);\n      \n      toast({\n        title: \"Colors reordered\",\n        description: \"Palette order has been updated\",\n        duration: 2000,\n      });\n    }\n  };\n  \n  const handleDragEnd = () => {\n    setDraggedIndex(null);\n  };\n  \n  // Touch events for mobile drag and drop\n  const handleTouchStart = (index: number) => {\n    setDraggedIndex(index);\n  };\n  \n  const handleTouchMove = (e: React.TouchEvent) => {\n    // Preview of movement handled by CSS\n  };\n  \n  const handleTouchEnd = (e: React.TouchEvent, targetIndex: number) => {\n    if (draggedIndex !== null && draggedIndex !== targetIndex) {\n      reorderColors(draggedIndex, targetIndex);\n      \n      toast({\n        title: \"Colors reordered\",\n        description: \"Palette order has been updated\",\n        duration: 2000,\n      });\n    }\n    setDraggedIndex(null);\n  };\n\n  // Server-side rendering fallback content\n  if (!isClient) {\n    return (\n      <div className=\"flex flex-col h-screen overflow-hidden bg-gray-50\">\n        <SEO \n          title=\"Coolors.in - Free Color Palette Generator | Create Beautiful Color Schemes\"\n          description=\"Create and explore beautiful color combinations with Coolors.in, the free color palette generator. Design with confidence using our intuitive color tools.\"\n          keywords=\"color palette generator, color scheme, color combinations, design tools, color inspiration\"\n          canonical=\"https://coolors.in/\"\n          structuredData={{\n            '@context': 'https://schema.org',\n            '@type': 'WebApplication',\n            'name': 'Coolors.in Color Palette Generator',\n            'url': 'https://coolors.in/',\n            'description': 'Create beautiful color combinations with our intuitive color generator',\n            'applicationCategory': 'DesignApplication',\n            'operatingSystem': 'Any',\n            'offers': {\n              '@type': 'Offer',\n              'price': '0',\n              'priceCurrency': 'USD'\n            },\n            'featureList': 'Generate color palettes, Save palettes, Export in multiple formats, Visualize palettes in UI templates'\n          }}\n        />\n        \n        <Header \n          onHelp={() => {}} \n          onExport={() => {}} \n          onSave={() => {}}\n          mobileMenuOpen={false}\n          toggleMobileMenu={() => {}}\n        />\n        \n        <main className=\"flex-1 flex flex-col items-center justify-center\">\n          <div className=\"text-2xl font-bold mb-4\">Loading Color Palette Generator...</div>\n          <div className=\"w-16 h-16 border-t-4 border-blue-500 border-solid rounded-full animate-spin\"></div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen overflow-hidden bg-gray-50\">\n      <SEO \n        title=\"Coolors.in - Free Color Palette Generator | Create Beautiful Color Schemes\"\n        description=\"Create and explore beautiful color combinations with Coolors.in, the free color palette generator. Design with confidence using our intuitive color tools.\"\n        keywords=\"color palette generator, color scheme, color combinations, design tools, color inspiration\"\n        canonical=\"https://coolors.in/\"\n        structuredData={{\n          '@context': 'https://schema.org',\n          '@type': 'WebApplication',\n          'name': 'Coolors.in Color Palette Generator',\n          'url': 'https://coolors.in/',\n          'description': 'Create beautiful color combinations with our intuitive color generator',\n          'applicationCategory': 'DesignApplication',\n          'operatingSystem': 'Any',\n          'offers': {\n            '@type': 'Offer',\n            'price': '0',\n            'priceCurrency': 'USD'\n          },\n          'featureList': 'Generate color palettes, Save palettes, Export in multiple formats, Visualize palettes in UI templates'\n        }}\n      />\n      \n      <Header \n        onHelp={handleHelp} \n        onExport={handleExport} \n        onSave={handleSavePalette}\n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={toggleMobileMenu}\n      />\n      \n      <ClientSideShortcutsBar />\n      \n      <main>\n        {/* Mobile View: Stack colors vertically with drag support */}\n        <section className=\"flex-1 flex flex-col overflow-auto md:hidden\" id=\"mobilePaletteContainer\" aria-label=\"Color Palette - Mobile View\">\n          {palette.map((color, index) => (\n            <article \n              key={index}\n              className={`relative mb-10 ${draggedIndex === index ? 'opacity-60 border-2 border-dashed border-gray-400' : ''}`}\n              draggable={true}\n              onDragStart={() => handleDragStart(index)}\n              onDragOver={(e) => handleDragOver(e, index)}\n              onDrop={(e) => handleDrop(e, index)}\n              onDragEnd={handleDragEnd}\n              onTouchStart={() => handleTouchStart(index)}\n              onTouchMove={handleTouchMove}\n              onTouchEnd={(e) => handleTouchEnd(e, index)}\n            >\n              {/* Clear separation between palettes */}\n              <div className=\"w-full flex flex-col\">\n                <header className=\"bg-gray-100 dark:bg-gray-800 py-1 px-2 rounded-t-md text-xs opacity-80 text-center shadow-sm\">\n                  <h2>Color {index+1}</h2> \n                  <span className=\"ml-2 inline-flex items-center text-gray-500\">\n                    <i className=\"fas fa-grip-lines text-xs mr-1\" aria-hidden=\"true\"></i>\n                    <span className=\"sr-only\">Draggable</span>\n                    drag to reorder\n                  </span>\n                </header>\n                <div className=\"absolute top-10 left-2 z-10 p-3 rounded-full bg-black bg-opacity-50 touch-manipulation cursor-grab active:cursor-grabbing\">\n                  <i className=\"fas fa-grip-lines text-sm text-white\" aria-hidden=\"true\"></i>\n                  <span className=\"sr-only\">Drag handle</span>\n                </div>\n                <ColorCard \n                  color={color}\n                  index={index}\n                  onAdjustColor={() => handleAdjustColor(index)}\n                />\n              </div>\n            </article>\n          ))}\n        </section>\n        \n        {/* Desktop View: Colors side by side with drag support */}\n        <section className=\"hidden md:flex flex-1 flex-row overflow-hidden\" id=\"desktopPaletteContainer\" aria-label=\"Color Palette - Desktop View\">\n          {palette.map((color, index) => (\n            <article \n              key={index}\n              className={`relative flex-1 ${draggedIndex === index ? 'opacity-60 border-2 border-dashed border-gray-400' : ''}`}\n              draggable={true}\n              onDragStart={() => handleDragStart(index)}\n              onDragOver={(e) => handleDragOver(e, index)}\n              onDrop={(e) => handleDrop(e, index)}\n              onDragEnd={handleDragEnd}\n              onTouchStart={() => handleTouchStart(index)}\n              onTouchMove={handleTouchMove}\n              onTouchEnd={(e) => handleTouchEnd(e, index)}\n            >\n              <div className=\"absolute top-3 left-3 z-20 p-3 rounded-full bg-black bg-opacity-40 cursor-grab active:cursor-grabbing transition-opacity opacity-70 hover:opacity-100\">\n                <i className=\"fas fa-grip-lines text-white\" aria-hidden=\"true\"></i>\n                <span className=\"sr-only\">Drag handle for color {index+1}</span>\n              </div>\n              <ColorCard \n                color={color}\n                index={index}\n                onAdjustColor={() => handleAdjustColor(index)}\n              />\n            </article>\n          ))}\n          \n          <div className=\"flex items-center justify-center w-16 bg-gray-100 border-l border-gray-300 hover:bg-gray-200 cursor-pointer transition-colors\"\n              onClick={() => addColor()} aria-label=\"Add new color\">\n            <div className=\"flex flex-col items-center justify-center text-gray-500 space-y-2\">\n              <i className=\"fas fa-plus text-xl\" aria-hidden=\"true\"></i>\n              <span className=\"text-xs font-medium\">Add</span>\n            </div>\n          </div>\n        </section>\n      </main>\n      \n      <ActionButtons \n        onGenerate={handleGeneratePalette}\n        onAddColor={addColor}\n        onClearAll={resetPalette}\n      />\n      \n      {showOnboarding && <OnboardingTour onClose={() => setShowOnboarding(false)} />}\n      \n      {showExportModal && \n        <ExportModal \n          palette={palette} \n          onClose={() => setShowExportModal(false)} \n        />\n      }\n      \n      {showAdjustModal && activeColorIndex !== null &&\n        <AdjustColorModal \n          color={palette[activeColorIndex]} \n          onClose={() => setShowAdjustModal(false)}\n          onApply={(updatedColor: Color) => {\n            updateColor(activeColorIndex, updatedColor);\n            setShowAdjustModal(false);\n          }}\n        />\n      }\n    </div>\n  );\n};\n\nexport default HomePage;","size_bytes":13209},"pages/privacy-policy.tsx":{"content":"import React from 'react';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Header from '../client/src/components/Header';\nimport Footer from '../client/src/components/Footer';\nimport { InArticleAd } from '../components/AdSense';\n\nconst PrivacyPolicyPage: NextPage = () => {\n  const [mobileMenuOpen, setMobileMenuOpen] = React.useState(false);\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <Head>\n        <title>Privacy Policy - Coolors.in | Color Palette Generator</title>\n        <meta name=\"description\" content=\"Learn about how Coolors.in handles your data and privacy. We're committed to transparency and protecting your personal information.\" />\n        <meta name=\"keywords\" content=\"privacy policy, data protection, Coolors.in privacy\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/privacy-policy\" />\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify({\n              '@context': 'https://schema.org',\n              '@type': 'WebPage',\n              'name': 'Privacy Policy - Coolors.in',\n              'description': 'Learn about how Coolors.in handles your data and privacy.',\n              'publisher': {\n                '@type': 'Organization',\n                'name': 'Coolors.in',\n                'logo': {\n                  '@type': 'ImageObject',\n                  'url': 'https://coolors.in/logo.svg'\n                }\n              }\n            })\n          }}\n        />\n      </Head>\n\n      <Header \n        onHelp={() => {}} \n        onExport={() => {}} \n        onSave={() => {}}\n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={() => setMobileMenuOpen(!mobileMenuOpen)}\n      />\n\n      <main className=\"flex-1 container mx-auto px-4 py-8 max-w-5xl\">\n        <h1 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-8 mt-4\">Privacy Policy</h1>\n        \n        <div className=\"bg-white rounded-lg shadow-md p-6 mb-8\">\n          <p className=\"mb-4 text-gray-600\">Last updated: April {currentYear}</p>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">1. Introduction</h2>\n            <p className=\"text-gray-700 mb-4\">\n              Welcome to Coolors.in (\"we,\" \"our,\" or \"us\"). We are committed to protecting your privacy and providing a safe online experience. This Privacy Policy explains how we collect, use, and share information about you when you use our website at coolors.in and services (collectively, the \"Services\").\n            </p>\n            <p className=\"text-gray-700\">\n              By using our Services, you agree to the collection, use, and sharing of your information as described in this Privacy Policy. If you do not agree, please do not use our Services.\n            </p>\n          </section>\n          \n          <InArticleAd />\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">2. Information We Collect</h2>\n            \n            <h3 className=\"text-xl font-medium text-gray-800 mb-2\">2.1 Information You Provide to Us</h3>\n            <p className=\"text-gray-700 mb-4\">\n              We collect information you provide directly to us, such as when you create an account, save color palettes, or contact us. This information may include:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li>Account information (e.g., name, email address, password)</li>\n              <li>User-generated content (e.g., color palettes you create or save)</li>\n              <li>Communications with us</li>\n            </ul>\n            \n            <h3 className=\"text-xl font-medium text-gray-800 mb-2\">2.2 Information We Collect Automatically</h3>\n            <p className=\"text-gray-700 mb-4\">\n              When you use our Services, we automatically collect certain information, including:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li>Device information (e.g., IP address, browser type, operating system)</li>\n              <li>Usage information (e.g., pages visited, time spent on pages, actions taken)</li>\n              <li>Location information (based on IP address)</li>\n              <li>Cookies and similar technologies (see our Cookie Policy section below)</li>\n            </ul>\n          </section>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">3. How We Use Information</h2>\n            <p className=\"text-gray-700 mb-4\">\n              We use the information we collect to:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li>Provide, maintain, and improve our Services</li>\n              <li>Process and fulfill your requests</li>\n              <li>Send you technical notices, updates, and administrative messages</li>\n              <li>Respond to your comments and questions</li>\n              <li>Personalize your experience</li>\n              <li>Monitor and analyze usage patterns</li>\n              <li>Detect, prevent, and address technical issues</li>\n              <li>Protect against harmful or unlawful activity</li>\n            </ul>\n          </section>\n          \n          <InArticleAd />\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">4. Sharing of Information</h2>\n            <p className=\"text-gray-700 mb-4\">\n              We may share information about you as follows:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li>With vendors, service providers, and consultants who need access to such information to perform services for us</li>\n              <li>In response to a request for information if we believe disclosure is in accordance with applicable law</li>\n              <li>If we believe your actions are inconsistent with our user agreements or policies, or to protect the rights, property, and safety of us or others</li>\n              <li>In connection with a merger, sale of company assets, financing, or acquisition of all or a portion of our business</li>\n              <li>With your consent or at your direction</li>\n            </ul>\n          </section>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">5. Cookie Policy</h2>\n            <p className=\"text-gray-700 mb-4\">\n              We use cookies and similar technologies like web beacons, pixel tags, and local storage to provide and improve our Services. These technologies help us remember your preferences, understand how you use our Services, and customize your experience.\n            </p>\n            <p className=\"text-gray-700 mb-4\">\n              Types of cookies we use:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li><strong>Essential cookies:</strong> Necessary for the functionality of our Services</li>\n              <li><strong>Preference cookies:</strong> Remember your settings and preferences</li>\n              <li><strong>Analytics cookies:</strong> Help us understand how users interact with our Services</li>\n              <li><strong>Advertising cookies:</strong> Used to deliver relevant advertisements and track ad campaign performance</li>\n            </ul>\n            <p className=\"text-gray-700 mb-4\">\n              You can manage your cookie preferences through your browser settings. Please note that disabling certain cookies may affect the functionality of our Services.\n            </p>\n          </section>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">6. Your Rights and Choices</h2>\n            <p className=\"text-gray-700 mb-4\">\n              Depending on your location, you may have certain rights regarding your personal information, including:\n            </p>\n            <ul className=\"list-disc pl-6 mb-4 text-gray-700\">\n              <li>Accessing, correcting, or deleting your personal information</li>\n              <li>Objecting to our processing of your personal information</li>\n              <li>Requesting restriction of processing of your personal information</li>\n              <li>Data portability</li>\n              <li>Withdrawing consent at any time (where processing is based on consent)</li>\n            </ul>\n            <p className=\"text-gray-700\">\n              To exercise these rights, please contact us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:text-blue-800\">coolors.in@gmail.com</a>.\n            </p>\n          </section>\n          \n          <InArticleAd />\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">7. Children's Privacy</h2>\n            <p className=\"text-gray-700\">\n              Our Services are not directed to children under 16. We do not knowingly collect personal information from children under 16. If we learn that we have collected personal information from a child under 16, we will take steps to delete that information as quickly as possible. If you believe that a child under 16 has provided us with personal information, please contact us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:text-blue-800\">coolors.in@gmail.com</a>.\n            </p>\n          </section>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">8. Data Security</h2>\n            <p className=\"text-gray-700\">\n              We take reasonable measures to protect your personal information from loss, theft, misuse, unauthorized access, disclosure, alteration, and destruction. However, no security system is impenetrable, and we cannot guarantee the security of our systems or your information.\n            </p>\n          </section>\n          \n          <section className=\"mb-8\">\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">9. Changes to this Privacy Policy</h2>\n            <p className=\"text-gray-700\">\n              We may update this Privacy Policy from time to time. If we make material changes, we will notify you by updating the date at the top of this Privacy Policy and, in some cases, we may provide additional notice. Your continued use of our Services after the updated Privacy Policy has been posted constitutes your acceptance of the changes.\n            </p>\n          </section>\n          \n          <section>\n            <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">10. Contact Us</h2>\n            <p className=\"text-gray-700\">\n              If you have any questions, concerns, or requests regarding this Privacy Policy or our privacy practices, please contact us at <a href=\"mailto:coolors.in@gmail.com\" className=\"text-blue-600 hover:text-blue-800\">coolors.in@gmail.com</a>.\n            </p>\n          </section>\n        </div>\n      </main>\n      \n      <Footer className=\"mt-auto\" />\n    </div>\n  );\n};\n\nexport default PrivacyPolicyPage;","size_bytes":11303},"pages/visualizer-new.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport type { NextPage } from 'next';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport { Layout, Monitor, PieChart, MessageSquare, Calendar, ArrowLeft, ArrowRight, Check } from 'lucide-react';\nimport { isLightColor } from '../client/src/lib/colorUtils';\nimport { Color } from '../shared/schema';\nimport CommonHead from '../components/CommonHead';\nimport Footer from '../client/src/components/Footer';\n\n// Template types\ntype TemplateType = 'dashboard' | 'landing' | 'analytics' | 'chat' | 'calendar';\n\n// Server-side props to pass initial palette data\nexport async function getServerSideProps() {\n  // Default palette for initial render\n  const defaultPalette: Color[] = [\n    { hex: '#1e293b', rgb: { r: 30, g: 41, b: 59 }, locked: false },\n    { hex: '#334155', rgb: { r: 51, g: 65, b: 85 }, locked: false },\n    { hex: '#3b82f6', rgb: { r: 59, g: 130, b: 246 }, locked: false },\n    { hex: '#ffffff', rgb: { r: 255, g: 255, b: 255 }, locked: false },\n    { hex: '#f8fafc', rgb: { r: 248, g: 250, b: 252 }, locked: false }\n  ];\n  \n  return {\n    props: {\n      initialPalette: defaultPalette\n    }\n  };\n}\n\nconst VisualizerPage: NextPage<{ initialPalette: Color[] }> = ({ initialPalette }) => {\n  const [palette, setPalette] = useState<Color[]>(initialPalette);\n  const [activeTemplate, setActiveTemplate] = useState<TemplateType>('dashboard');\n  const [showExportToast, setShowExportToast] = useState(false);\n  const [colorIndicators, setColorIndicators] = useState(false);\n  \n  // Check if we're in the browser to access localStorage\n  useEffect(() => {\n    try {\n      const savedPaletteJson = localStorage.getItem('currentPalette');\n      if (savedPaletteJson) {\n        const savedPalette = JSON.parse(savedPaletteJson);\n        if (Array.isArray(savedPalette) && savedPalette.length > 0) {\n          console.log('Next.js: Loaded palette from localStorage:', savedPalette);\n          setPalette(savedPalette);\n        }\n      }\n    } catch (err) {\n      console.error('Error loading palette from localStorage:', err);\n    }\n  }, [setPalette]);\n\n  // Listen for palette updates from the generator page\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'currentPalette') {\n        try {\n          const updatedPalette = JSON.parse(e.newValue || '[]');\n          if (Array.isArray(updatedPalette) && updatedPalette.length > 0) {\n            setPalette(updatedPalette);\n          }\n        } catch (err) {\n          console.error('Error parsing palette from storage event:', err);\n        }\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Helper to get text color based on background for contrast\n  const getTextColor = (bgColor: string): string => {\n    return isLightColor(bgColor) ? '#1f2937' : '#ffffff';\n  };\n\n  // Export current template as image\n  const exportAsImage = async () => {\n    if (typeof window !== 'undefined') {\n      try {\n        // Dynamically import html2canvas (client-side only)\n        const html2canvas = (await import('html2canvas')).default;\n        const visualizerEl = document.getElementById('template-visualizer');\n        \n        if (!visualizerEl) return;\n        \n        const canvas = await html2canvas(visualizerEl, {\n          backgroundColor: null,\n          scale: 2 // Higher resolution\n        });\n        \n        const image = canvas.toDataURL('image/png');\n        const link = document.createElement('a');\n        link.href = image;\n        link.download = `${activeTemplate}-template-${new Date().getTime()}.png`;\n        link.click();\n        \n        // Show success toast\n        setShowExportToast(true);\n        setTimeout(() => setShowExportToast(false), 3000);\n      } catch (err) {\n        console.error('Error exporting template:', err);\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-4 md:p-8 flex flex-col\">\n      <CommonHead \n        title=\"Palette Visualizer | See Your Colors in Real UI Templates - Coolors.in\"\n        description=\"Visualize your color palette in real UI templates. See how your colors work together in dashboards, landing pages, and app interfaces.\"\n        keywords=\"palette visualizer, color combinations, UI templates, color schemes in action\"\n        canonicalUrl=\"https://coolors.in/visualizer\"\n        structuredData={{\n          \"@context\": \"https://schema.org\",\n          \"@type\": \"WebPage\",\n          \"name\": \"Palette Visualizer | Coolors.in\",\n          \"url\": \"https://coolors.in/visualizer\",\n          \"description\": \"Visualize your color palette in real UI templates with Coolors.in's Palette Visualizer\",\n          \"isPartOf\": {\n            \"@type\": \"WebApplication\",\n            \"name\": \"Coolors.in\"\n          }\n        }}\n      />\n      \n      <header className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-gray-800 bg-gradient-to-r from-purple-600 to-blue-400 bg-clip-text text-transparent\">\n            Palette Visualizer\n          </h1>\n          <Link href=\"/\" className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors\">\n            <ArrowLeft className=\"mr-1\" size={20} />\n            Back to Generator\n          </Link>\n        </div>\n        <p className=\"text-gray-600 mt-2\">\n          See how your color palette would look in different UI templates\n        </p>\n      </header>\n      \n      {/* Top action bar */}\n      <div className=\"bg-white rounded-lg shadow-md p-4 mb-4\">\n        <div className=\"flex flex-wrap justify-between items-center\">\n          <div className=\"flex flex-wrap gap-2\">\n            <TemplateButton \n              active={activeTemplate === 'dashboard'} \n              onClick={() => setActiveTemplate('dashboard')}\n              icon={<Layout size={18} />}\n              label=\"Dashboard\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'landing'} \n              onClick={() => setActiveTemplate('landing')}\n              icon={<Monitor size={18} />}\n              label=\"Landing Page\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'analytics'} \n              onClick={() => setActiveTemplate('analytics')}\n              icon={<PieChart size={18} />}\n              label=\"Analytics\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'chat'} \n              onClick={() => setActiveTemplate('chat')}\n              icon={<MessageSquare size={18} />}\n              label=\"Chat App\"\n            />\n            <TemplateButton \n              active={activeTemplate === 'calendar'} \n              onClick={() => setActiveTemplate('calendar')}\n              icon={<Calendar size={18} />}\n              label=\"Calendar\"\n            />\n          </div>\n          <div className=\"flex items-center gap-3 mt-3 sm:mt-0\">\n            <div className=\"flex items-center\">\n              <input \n                type=\"checkbox\" \n                id=\"color-indicators\" \n                className=\"mr-2\"\n                checked={colorIndicators}\n                onChange={() => setColorIndicators(!colorIndicators)} \n              />\n              <label htmlFor=\"color-indicators\" className=\"text-sm text-gray-600\">Show color indicators</label>\n            </div>\n            <button \n              onClick={exportAsImage} \n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-1\"\n            >\n              <ArrowRight size={16} />\n              Export as PNG\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Template visualization */}\n      <div \n        id=\"template-visualizer\" \n        className=\"bg-white rounded-xl shadow-lg overflow-hidden flex-1 mb-6 relative\"\n      >\n        {activeTemplate === 'dashboard' && (\n          <DashboardTemplate palette={palette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'landing' && (\n          <LandingTemplate palette={palette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'analytics' && (\n          <AnalyticsTemplate palette={palette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'chat' && (\n          <ChatTemplate palette={palette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n        {activeTemplate === 'calendar' && (\n          <CalendarTemplate palette={palette} getTextColor={getTextColor} showIndicators={colorIndicators} />\n        )}\n      </div>\n      \n      {/* Color palette reference */}\n      <div className=\"bg-white rounded-lg shadow p-4\">\n        <h3 className=\"text-lg font-medium mb-2\">Your Palette</h3>\n        <div className=\"flex h-12 rounded-md overflow-hidden\">\n          {palette.map((color, index) => (\n            <div \n              key={index} \n              className=\"flex-1\" \n              style={{ backgroundColor: color.hex }}\n            >\n              <div className=\"h-full flex items-center justify-center\">\n                <span className={`text-xs font-medium ${isLightColor(color.hex) ? 'text-gray-800' : 'text-white'}`}>\n                  {color.hex}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Export success toast */}\n      {showExportToast && (\n        <div className=\"fixed bottom-4 right-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-md flex items-center\">\n          <Check size={20} className=\"mr-2\" />\n          <span>Template exported successfully!</span>\n        </div>\n      )}\n      \n      {/* Footer */}\n      <Footer />\n    </div>\n  );\n};\n\n// Template button component\ninterface TemplateButtonProps {\n  active: boolean;\n  onClick: () => void;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction TemplateButton({ active, onClick, icon, label }: TemplateButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={`px-4 py-2 rounded-md font-medium flex items-center gap-2 transition-colors ${\n        active \n          ? \"bg-gradient-to-r from-purple-600 to-blue-500 text-white\" \n          : \"bg-gray-100 text-gray-700 hover:bg-gray-200\"\n      }`}\n    >\n      {icon}\n      {label}\n    </button>\n  );\n}\n\n// Color indicator component\ninterface ColorIndicatorProps {\n  color: string;\n  index: number;\n  showIndicators: boolean;\n}\n\nfunction ColorIndicator({ color, index, showIndicators }: ColorIndicatorProps) {\n  if (!showIndicators) return null;\n  \n  return (\n    <div \n      className=\"absolute top-0 right-0 px-2 py-1 text-xs font-bold rounded-bl-md z-10\"\n      style={{ \n        backgroundColor: color,\n        color: isLightColor(color) ? '#000' : '#fff'\n      }}\n    >\n      Color {index + 1}\n    </div>\n  );\n}\n\n// Dashboard Template\nfunction DashboardTemplate({ \n  palette, \n  getTextColor, \n  showIndicators \n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] flex flex-col\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc' }}>\n      {/* Sidebar */}\n      <div className=\"flex h-full\">\n        <div \n          className=\"w-56 h-full p-4 flex flex-col relative\" \n          style={{ \n            backgroundColor: palette[0]?.hex || '#1e293b',\n            color: getTextColor(palette[0]?.hex || '#1e293b')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n          <div className=\"font-bold text-xl mb-6\">App Name</div>\n          \n          <div className=\"space-y-1\">\n            <div className=\"p-2 rounded flex items-center gap-2 font-medium relative\" style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}>\n              {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n              <Layout size={16} /> Dashboard\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <PieChart size={16} /> Analytics\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <MessageSquare size={16} /> Messages\n            </div>\n            <div className=\"p-2 rounded flex items-center gap-2\">\n              <Calendar size={16} /> Calendar\n            </div>\n          </div>\n\n          <div className=\"mt-auto\">\n            <div className=\"p-2 rounded\">Settings</div>\n            <div className=\"p-2 rounded\">Help</div>\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"flex-1 p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h1 className=\"text-2xl font-bold\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Dashboard</h1>\n            <div \n              className=\"px-4 py-2 rounded relative\"  \n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n              + New Item\n            </div>\n          </div>\n\n          {/* Stats cards */}\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div \n              className=\"p-4 rounded-lg shadow relative\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n              <div className=\"text-sm opacity-80\">Total Users</div>\n              <div className=\"text-2xl font-bold\">4,927</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 12% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Revenue</div>\n              <div className=\"text-2xl font-bold\">$24,438</div>\n              <div className=\"text-xs mt-2 text-green-500\">↑ 8% from last month</div>\n            </div>\n            <div \n              className=\"p-4 rounded-lg shadow\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div className=\"text-sm opacity-80\">Active Projects</div>\n              <div className=\"text-2xl font-bold\">23</div>\n              <div className=\"text-xs mt-2 text-red-500\">↓ 2 from last month</div>\n            </div>\n          </div>\n\n          {/* Main panel */}\n          <div \n            className=\"rounded-lg shadow p-4 relative\"\n            style={{ \n              backgroundColor: palette[3]?.hex || '#ffffff',\n              color: getTextColor(palette[3]?.hex || '#ffffff')\n            }}\n          >\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"font-bold\">Recent Activity</h2>\n              <div className=\"text-sm\">View All</div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"py-2 border-b last:border-0 flex justify-between\">\n                  <div>User #{i} completed Task #{i}</div>\n                  <div className=\"text-sm opacity-70\">Just now</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Landing Template\nfunction LandingTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] overflow-auto relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {/* Navigation */}\n      <header \n        className=\"px-6 py-4 flex justify-between items-center sticky top-0 relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"font-bold text-xl\">Landing Page</div>\n        <nav className=\"flex items-center gap-6\">\n          <div>Features</div>\n          <div>Pricing</div>\n          <div>About</div>\n          <div \n            className=\"px-4 py-2 rounded relative\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n            Get Started\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <div \n        className=\"px-6 py-16 flex gap-8 justify-between relative\" \n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n        <div className=\"max-w-md\">\n          <h1 className=\"text-4xl font-bold mb-4\">Welcome to Our Platform</h1>\n          <p className=\"mb-6 opacity-90\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisi vel consectetur interdum.</p>\n          <div className=\"flex gap-4\">\n            <div \n              className=\"px-4 py-2 rounded font-medium relative\"\n              style={{ \n                backgroundColor: palette[2]?.hex || '#3b82f6',\n                color: getTextColor(palette[2]?.hex || '#3b82f6')\n              }}\n            >\n              Get Started\n            </div>\n            <div \n              className=\"px-4 py-2 rounded font-medium border\"\n              style={{ \n                borderColor: getTextColor(palette[1]?.hex || '#334155')\n              }}\n            >\n              Learn More\n            </div>\n          </div>\n        </div>\n        <div \n          className=\"w-80 h-48 rounded flex items-center justify-center relative\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n          <span className=\"text-center\">Hero Image</span>\n        </div>\n      </div>\n\n      {/* Features */}\n      <div className=\"px-6 py-12\">\n        <h2 className=\"text-2xl font-bold text-center mb-8\" style={{ color: getTextColor(palette[4]?.hex || '#f8fafc') }}>Features</h2>\n        <div className=\"grid grid-cols-3 gap-6\">\n          {[1, 2, 3].map(i => (\n            <div \n              key={i} \n              className=\"p-4 rounded-lg text-center relative\"\n              style={{ \n                backgroundColor: palette[3]?.hex || '#ffffff',\n                color: getTextColor(palette[3]?.hex || '#ffffff')\n              }}\n            >\n              <div \n                className=\"w-12 h-12 rounded-full mx-auto mb-4 flex items-center justify-center relative\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {i}\n              </div>\n              <h3 className=\"font-bold mb-2\">Feature {i}</h3>\n              <p className=\"text-sm opacity-80\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio.</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Analytics Template\nfunction AnalyticsTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  // Placeholder for analytics charts\n  return (\n    <div className=\"h-[500px] overflow-auto relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      <header className=\"p-4 border-b flex justify-between items-center\">\n        <h1 className=\"text-xl font-bold\">Analytics Dashboard</h1>\n        <div className=\"flex items-center gap-4\">\n          <div>Last 7 Days ▼</div>\n          <div \n            className=\"px-3 py-1 rounded text-sm relative\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n            Export\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div \n            className=\"p-4 rounded-lg relative\"\n            style={{ \n              backgroundColor: palette[0]?.hex || '#1e293b',\n              color: getTextColor(palette[0]?.hex || '#1e293b')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n            <h3 className=\"font-medium mb-2\">Page Views</h3>\n            <div className=\"text-3xl font-bold\">42,856</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"absolute bottom-0 left-0 w-full\">\n                <div className=\"flex justify-between h-40\">\n                  {[1, 2, 3, 4, 5, 6, 7].map(i => (\n                    <div \n                      key={i} \n                      className=\"w-8 mx-1 rounded-t\"\n                      style={{ \n                        height: `${Math.random() * 100}%`,\n                        backgroundColor: palette[2]?.hex || '#3b82f6' \n                      }}\n                    ></div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div \n            className=\"p-4 rounded-lg relative\"\n            style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155')\n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n            <h3 className=\"font-medium mb-2\">Conversion Rate</h3>\n            <div className=\"text-3xl font-bold\">8.42%</div>\n            <div className=\"relative h-40 mt-4\">\n              {/* Chart placeholders */}\n              <div className=\"w-full h-full flex items-center justify-center\">\n                <div \n                  className=\"w-32 h-32 rounded-full border-8 flex items-center justify-center\"\n                  style={{ borderColor: palette[2]?.hex || '#3b82f6' }}\n                >\n                  <span className=\"text-2xl font-bold\">8.4%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 rounded-lg mb-6 relative\"\n          style={{ \n            backgroundColor: palette[3]?.hex || '#ffffff',\n            color: getTextColor(palette[3]?.hex || '#ffffff')\n          }}\n        >\n          {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n          <h3 className=\"font-medium mb-4\">Traffic Sources</h3>\n          <div className=\"space-y-3\">\n            {['Organic Search', 'Direct', 'Social Media', 'Email', 'Referral'].map((source, i) => (\n              <div key={i} className=\"flex items-center\">\n                <div className=\"w-24\">{source}</div>\n                <div className=\"flex-1 h-6 bg-gray-200 rounded-full overflow-hidden\">\n                  <div \n                    className=\"h-full rounded-full\"\n                    style={{ \n                      width: `${Math.floor(Math.random() * 70) + 10}%`,\n                      backgroundColor: i % 2 === 0 ? palette[0]?.hex : palette[2]?.hex \n                    }}\n                  ></div>\n                </div>\n                <div className=\"w-16 text-right\">{`${Math.floor(Math.random() * 70) + 10}%`}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      {showIndicators && <div className=\"absolute bottom-0 right-0 p-2 bg-opacity-75 rounded-tl-md text-sm\" style={{ \n        backgroundColor: palette[4]?.hex || '#f8fafc',\n        color: getTextColor(palette[4]?.hex || '#f8fafc')\n      }}>\n        Background: Color 5\n      </div>}\n    </div>\n  );\n}\n\n// Chat Template\nfunction ChatTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  return (\n    <div className=\"h-[500px] flex relative\" style={{ backgroundColor: palette[3]?.hex || '#ffffff' }}>\n      {/* Sidebar */}\n      <div \n        className=\"w-64 h-full border-r flex flex-col relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b'),\n          borderColor: 'rgba(255,255,255,0.1)'\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"p-4 border-b\" style={{ borderColor: 'rgba(255,255,255,0.1)' }}>\n          <h2 className=\"font-bold text-lg\">Messages</h2>\n        </div>\n        <div className=\"p-3\">\n          <div \n            className=\"mb-3 p-2 rounded flex items-center gap-2 relative\"\n            style={{ \n              backgroundColor: palette[1]?.hex || '#334155',\n              color: getTextColor(palette[1]?.hex || '#334155') \n            }}\n          >\n            {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n            <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n            <div>\n              <div className=\"font-medium\">Alice Smith</div>\n              <div className=\"text-xs opacity-80\">Hey there!</div>\n            </div>\n          </div>\n          {['Bob Johnson', 'Catherine Lee', 'David Miller'].map((name, i) => (\n            <div key={i} className=\"mb-3 p-2 rounded flex items-center gap-2\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n              <div>\n                <div className=\"font-medium\">{name}</div>\n                <div className=\"text-xs opacity-80\">Last message...</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Chat area */}\n      <div className=\"flex-1 flex flex-col relative\">\n        {showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n        <div \n          className=\"p-4 border-b flex items-center gap-3 relative\"\n          style={{ \n            color: getTextColor(palette[3]?.hex || '#ffffff') \n          }}\n        >\n          <div className=\"w-10 h-10 rounded-full bg-gray-400\"></div>\n          <div>\n            <div className=\"font-medium\">Alice Smith</div>\n            <div className=\"text-xs\">Online</div>\n          </div>\n        </div>\n\n        <div className=\"flex-1 p-4 overflow-auto\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-start\">\n              <div \n                className=\"max-w-xs rounded-lg p-3 relative\"\n                style={{ \n                  backgroundColor: palette[4]?.hex || '#f1f5f9',\n                  color: getTextColor(palette[4]?.hex || '#f1f5f9')\n                }}\n              >\n                {showIndicators && <ColorIndicator color={palette[4]?.hex || '#f1f5f9'} index={4} showIndicators={showIndicators} />}\n                <p>Hey there! How are you doing today?</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:32 AM</div>\n              </div>\n            </div>\n            <div className=\"flex justify-end\">\n              <div \n                className=\"max-w-xs rounded-lg p-3 relative\"\n                style={{ \n                  backgroundColor: palette[2]?.hex || '#3b82f6',\n                  color: getTextColor(palette[2]?.hex || '#3b82f6')\n                }}\n              >\n                {showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n                <p>I'm doing great! Just finished working on that project we discussed.</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:34 AM</div>\n              </div>\n            </div>\n            <div className=\"flex justify-start\">\n              <div \n                className=\"max-w-xs rounded-lg p-3\"\n                style={{ \n                  backgroundColor: palette[4]?.hex || '#f1f5f9',\n                  color: getTextColor(palette[4]?.hex || '#f1f5f9')\n                }}\n              >\n                <p>That's awesome! Can you share the details?</p>\n                <div className=\"text-xs mt-1 opacity-70\">10:36 AM</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div \n          className=\"p-4 border-t flex items-center gap-2\"\n          style={{ \n            color: getTextColor(palette[3]?.hex || '#ffffff') \n          }}\n        >\n          <input \n            type=\"text\" \n            placeholder=\"Type a message...\" \n            className=\"flex-1 p-3 rounded-lg\"\n            style={{ \n              backgroundColor: palette[4]?.hex || '#f1f5f9',\n              color: getTextColor(palette[4]?.hex || '#f1f5f9')\n            }}\n          />\n          <button \n            className=\"p-3 rounded-lg\"\n            style={{ \n              backgroundColor: palette[2]?.hex || '#3b82f6',\n              color: getTextColor(palette[2]?.hex || '#3b82f6')\n            }}\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Calendar Template\nfunction CalendarTemplate({ \n  palette, \n  getTextColor,\n  showIndicators\n}: { \n  palette: Color[], \n  getTextColor: (color: string) => string,\n  showIndicators: boolean\n}) {\n  const weekdays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  const currentDay = 15; // Just for demonstration\n  \n  return (\n    <div className=\"h-[500px] flex flex-col relative\" style={{ backgroundColor: palette[4]?.hex || '#f8fafc', color: getTextColor(palette[4]?.hex || '#f8fafc') }}>\n      {showIndicators && <ColorIndicator color={palette[4]?.hex || '#f8fafc'} index={4} showIndicators={showIndicators} />}\n      {/* Header */}\n      <div \n        className=\"p-4 flex justify-between items-center relative\"\n        style={{ \n          backgroundColor: palette[0]?.hex || '#1e293b',\n          color: getTextColor(palette[0]?.hex || '#1e293b')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[0]?.hex || '#1e293b'} index={0} showIndicators={showIndicators} />}\n        <div className=\"font-bold text-lg\">May 2023</div>\n        <div className=\"flex gap-2\">\n          <button className=\"p-2 rounded-lg\">◀</button>\n          <button className=\"p-2 rounded-lg\">Today</button>\n          <button className=\"p-2 rounded-lg\">▶</button>\n        </div>\n        <div className=\"flex gap-2\">\n          <button className=\"p-2 rounded-lg\">Month</button>\n          <button className=\"p-2 rounded-lg\">Week</button>\n          <button className=\"p-2 rounded-lg\">Day</button>\n        </div>\n      </div>\n\n      {/* Weekdays header */}\n      <div \n        className=\"grid grid-cols-7 text-center py-2 border-b relative\"\n        style={{ \n          backgroundColor: palette[1]?.hex || '#334155',\n          color: getTextColor(palette[1]?.hex || '#334155')\n        }}\n      >\n        {showIndicators && <ColorIndicator color={palette[1]?.hex || '#334155'} index={1} showIndicators={showIndicators} />}\n        {weekdays.map(day => (\n          <div key={day} className=\"font-medium\">{day}</div>\n        ))}\n      </div>\n\n      {/* Calendar grid */}\n      <div className=\"flex-1 grid grid-cols-7 grid-rows-5 border-b\">\n        {Array.from({ length: 35 }, (_, i) => {\n          const day = i - 3; // Offset to start month from correct weekday\n          const isCurrentMonth = day > 0 && day <= 31;\n          const isToday = day === currentDay;\n          \n          return (\n            <div \n              key={i} \n              className={`border-r border-b p-1 flex flex-col ${isCurrentMonth ? '' : 'opacity-40'}`}\n              style={{ \n                backgroundColor: isToday ? palette[3]?.hex : 'transparent',\n                color: isToday ? getTextColor(palette[3]?.hex || '#ffffff') : getTextColor(palette[4]?.hex || '#f8fafc')\n              }}\n            >\n              {isToday && showIndicators && <ColorIndicator color={palette[3]?.hex || '#ffffff'} index={3} showIndicators={showIndicators} />}\n              <div className=\"text-right mb-1\">{isCurrentMonth ? day : (day <= 0 ? 31 + day : day - 31)}</div>\n              \n              {/* Calendar events */}\n              {isCurrentMonth && Math.random() > 0.7 && (\n                <div \n                  className=\"text-xs p-1 rounded mb-1 truncate relative\"\n                  style={{ \n                    backgroundColor: palette[2]?.hex || '#3b82f6',\n                    color: getTextColor(palette[2]?.hex || '#3b82f6')\n                  }}\n                >\n                  {day === 15 && showIndicators && <ColorIndicator color={palette[2]?.hex || '#3b82f6'} index={2} showIndicators={showIndicators} />}\n                  Meeting\n                </div>\n              )}\n              \n              {isCurrentMonth && Math.random() > 0.8 && (\n                <div \n                  className=\"text-xs p-1 rounded truncate\"\n                  style={{ \n                    backgroundColor: palette[0]?.hex || '#1e293b',\n                    color: getTextColor(palette[0]?.hex || '#1e293b')\n                  }}\n                >\n                  Call\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default VisualizerPage;","size_bytes":35721},"pages/visualizer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\nimport { usePalette } from '../client/src/contexts/PaletteContext';\nimport Header from '../client/src/components/Header';\nimport Footer from '../client/src/components/Footer';\nimport { Calendar, BarChart, LineChart, Store, Layout, MessageSquare } from 'lucide-react';\nimport { Color } from '../client/src/types/Color';\nimport { isLightColor } from '../client/src/lib/colorUtils';\n\ntype TemplateType = 'dashboard' | 'landing' | 'analytics' | 'chat' | 'calendar';\n\ninterface TemplateButtonProps {\n  active: boolean;\n  onClick: () => void;\n  icon: React.ReactNode;\n  label: string;\n}\n\nfunction TemplateButton({ active, onClick, icon, label }: TemplateButtonProps) {\n  return (\n    <button\n      onClick={onClick}\n      className={`flex flex-col items-center p-2 rounded-lg transition-all ${\n        active \n          ? 'bg-primary text-white shadow-md' \n          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n      }`}\n    >\n      <div className=\"mb-1\">{icon}</div>\n      <span className=\"text-xs font-medium\">{label}</span>\n    </button>\n  );\n}\n\nconst PaletteVisualizer: NextPage = () => {\n  const [activeTemplate, setActiveTemplate] = useState<TemplateType>('dashboard');\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { palette } = usePalette();\n  const [isClient, setIsClient] = useState(false);\n  \n  // Set isClient to true after component mounts\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n  \n  // Function to determine if text should be dark or light based on background color\n  const getTextColor = (hex: string) => {\n    return isLightColor(hex) ? 'text-gray-900' : 'text-white';\n  };\n  \n  // A helper function for text color in JSX templates\n  const textColorClass = (hex: string) => {\n    return isLightColor(hex) ? 'text-gray-900' : 'text-white';\n  };\n  \n  // Server-side rendering fallback content\n  if (!isClient) {\n    return (\n      <div className=\"min-h-screen flex flex-col bg-gray-50\">\n        <Head>\n          <title>Palette Visualizer - Coolors.in | See Your Colors in Action</title>\n          <meta name=\"description\" content=\"See your color palettes in realistic UI templates. Visualize your colors applied to dashboards, landing pages, charts, and more.\" />\n          <meta name=\"keywords\" content=\"color palette visualizer, UI color template, design preview\" />\n          <link rel=\"canonical\" href=\"https://coolors.in/visualizer\" />\n        </Head>\n        \n        <Header \n          onHelp={() => {}} \n          onExport={() => {}} \n          onSave={() => {}}\n          mobileMenuOpen={false}\n          toggleMobileMenu={() => {}}\n        />\n        \n        <div className=\"flex-1 flex flex-col items-center justify-center\">\n          <div className=\"text-2xl font-bold mb-4\">Loading Palette Visualizer...</div>\n          <div className=\"w-16 h-16 border-t-4 border-blue-500 border-solid rounded-full animate-spin\"></div>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      <Head>\n        <title>Palette Visualizer - Coolors.in | See Your Colors in Action</title>\n        <meta name=\"description\" content=\"See your color palettes in realistic UI templates. Visualize your colors applied to dashboards, landing pages, charts, and more.\" />\n        <meta name=\"keywords\" content=\"color palette visualizer, UI color template, design preview\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/visualizer\" />\n      </Head>\n      \n      <Header \n        onHelp={() => {}} \n        onExport={() => {}} \n        onSave={() => {}}\n        onVisualize={() => {}}\n        mobileMenuOpen={mobileMenuOpen}\n        toggleMobileMenu={() => setMobileMenuOpen(!mobileMenuOpen)}\n      />\n      \n      <main className=\"flex-1 container mx-auto px-4 py-6 max-w-7xl\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-2\">Palette Visualizer</h1>\n          <p className=\"text-gray-600\">See how your color palette looks in different UI contexts</p>\n        </div>\n        \n        <div className=\"grid grid-cols-5 gap-3 mb-6 max-w-md\">\n          <TemplateButton \n            active={activeTemplate === 'dashboard'} \n            onClick={() => setActiveTemplate('dashboard')} \n            icon={<Layout size={20} />} \n            label=\"Dashboard\" \n          />\n          <TemplateButton \n            active={activeTemplate === 'landing'} \n            onClick={() => setActiveTemplate('landing')} \n            icon={<Store size={20} />} \n            label=\"Landing\" \n          />\n          <TemplateButton \n            active={activeTemplate === 'analytics'} \n            onClick={() => setActiveTemplate('analytics')} \n            icon={<BarChart size={20} />} \n            label=\"Analytics\" \n          />\n          <TemplateButton \n            active={activeTemplate === 'chat'} \n            onClick={() => setActiveTemplate('chat')} \n            icon={<MessageSquare size={20} />} \n            label=\"Chat\" \n          />\n          <TemplateButton \n            active={activeTemplate === 'calendar'} \n            onClick={() => setActiveTemplate('calendar')} \n            icon={<Calendar size={20} />} \n            label=\"Calendar\" \n          />\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n          {activeTemplate === 'dashboard' && (\n            <DashboardTemplate palette={palette} getTextColor={textColorClass} />\n          )}\n          {activeTemplate === 'landing' && (\n            <LandingTemplate palette={palette} getTextColor={textColorClass} />\n          )}\n          {activeTemplate === 'analytics' && (\n            <AnalyticsTemplate palette={palette} getTextColor={textColorClass} />\n          )}\n          {activeTemplate === 'chat' && (\n            <ChatTemplate palette={palette} getTextColor={textColorClass} />\n          )}\n          {activeTemplate === 'calendar' && (\n            <CalendarTemplate palette={palette} getTextColor={textColorClass} />\n          )}\n        </div>\n        \n        <div className=\"mt-8 bg-gray-100 p-4 rounded-lg\">\n          <h2 className=\"text-xl font-semibold mb-2\">How to Use This Tool</h2>\n          <p className=\"text-gray-700 mb-3\">\n            This visualizer helps you see how your palette would look in real-world UI scenarios. \n            Choose different templates above to visualize your colors in context.\n          </p>\n          <p className=\"text-gray-700\">\n            Return to the main palette generator to make adjustments, then come back to see how they look!\n          </p>\n        </div>\n      </main>\n      \n      <Footer className=\"mt-auto\" />\n    </div>\n  );\n};\n\n// Template Components\nfunction DashboardTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Use the first 5 colors from palette, or default if not enough\n  const colors = [...palette];\n  while (colors.length < 5) {\n    colors.push({ hex: \"#e5e5e5\", rgb: { r: 229, g: 229, b: 229 }, locked: false });\n  }\n  \n  return (\n    <div className=\"p-0\">\n      {/* Navigation */}\n      <div className=\"flex\" style={{ backgroundColor: colors[0].hex }}>\n        <div className=\"w-64 p-4\">\n          <div className={`font-bold text-xl ${getTextColor(colors[0].hex)}`}>Admin Panel</div>\n        </div>\n        <div className=\"flex-1 flex justify-end items-center p-4\">\n          <div className={`flex items-center space-x-4 ${getTextColor(colors[0].hex)}`}>\n            <span className=\"cursor-pointer\">Search</span>\n            <span className=\"cursor-pointer\">Notifications</span>\n            <div className=\"w-8 h-8 rounded-full bg-gray-300\"></div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex min-h-[500px]\">\n        {/* Sidebar */}\n        <div className=\"w-64 p-4\" style={{ backgroundColor: colors[1].hex }}>\n          <ul className={`space-y-3 ${getTextColor(colors[1].hex)}`}>\n            <li className=\"p-2 rounded cursor-pointer font-medium\" style={{ backgroundColor: colors[0].hex }}>\n              <span className={getTextColor(colors[0].hex)}>Dashboard</span>\n            </li>\n            <li className=\"p-2 rounded cursor-pointer\">Users</li>\n            <li className=\"p-2 rounded cursor-pointer\">Products</li>\n            <li className=\"p-2 rounded cursor-pointer\">Orders</li>\n            <li className=\"p-2 rounded cursor-pointer\">Analytics</li>\n            <li className=\"p-2 rounded cursor-pointer\">Settings</li>\n          </ul>\n        </div>\n        \n        {/* Main content */}\n        <div className=\"flex-1 p-6\" style={{ backgroundColor: colors[2].hex }}>\n          <div className={`text-2xl font-bold mb-6 ${getTextColor(colors[2].hex)}`}>Dashboard Overview</div>\n          \n          {/* Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n              <div className={`text-sm ${getTextColor(colors[3].hex)}`}>Total Sales</div>\n              <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>$24,582</div>\n              <div className={`text-xs ${getTextColor(colors[3].hex)}`}>+12% from last month</div>\n            </div>\n            <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n              <div className={`text-sm ${getTextColor(colors[3].hex)}`}>Active Users</div>\n              <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>2,845</div>\n              <div className={`text-xs ${getTextColor(colors[3].hex)}`}>+5% from last week</div>\n            </div>\n            <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n              <div className={`text-sm ${getTextColor(colors[3].hex)}`}>Conversion</div>\n              <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>5.27%</div>\n              <div className={`text-xs ${getTextColor(colors[3].hex)}`}>-0.5% from yesterday</div>\n            </div>\n          </div>\n          \n          {/* Chart area */}\n          <div className=\"p-4 rounded-lg mb-6\" style={{ backgroundColor: colors[4].hex }}>\n            <div className={`text-lg font-medium mb-4 ${getTextColor(colors[4].hex)}`}>Sales Analytics</div>\n            <div className=\"h-60 w-full flex items-end justify-between space-x-2\">\n              <div className=\"h-20% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '20%' }}></div>\n              <div className=\"h-45% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '45%' }}></div>\n              <div className=\"h-30% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '30%' }}></div>\n              <div className=\"h-60% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '60%' }}></div>\n              <div className=\"h-40% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '40%' }}></div>\n              <div className=\"h-55% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '55%' }}></div>\n              <div className=\"h-75% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '75%' }}></div>\n              <div className=\"h-65% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '65%' }}></div>\n              <div className=\"h-80% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '80%' }}></div>\n              <div className=\"h-45% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '45%' }}></div>\n              <div className=\"h-35% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '35%' }}></div>\n              <div className=\"h-50% w-6 rounded-t-sm\" style={{ backgroundColor: colors[0].hex, height: '50%' }}></div>\n            </div>\n          </div>\n          \n          {/* Recent orders */}\n          <div className=\"rounded-lg\" style={{ backgroundColor: colors[4].hex }}>\n            <div className={`p-4 border-b ${getTextColor(colors[4].hex)}`}>\n              <div className=\"text-lg font-medium\">Recent Orders</div>\n            </div>\n            <div className=\"p-4\">\n              <table className={`min-w-full ${getTextColor(colors[4].hex)}`}>\n                <thead>\n                  <tr>\n                    <th className=\"text-left pb-2\">Order ID</th>\n                    <th className=\"text-left pb-2\">Customer</th>\n                    <th className=\"text-left pb-2\">Status</th>\n                    <th className=\"text-left pb-2\">Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className=\"py-2\">#12345</td>\n                    <td>John Smith</td>\n                    <td><span className=\"px-2 py-1 rounded-full text-xs\" style={{ backgroundColor: colors[0].hex }}>\n                      <span className={getTextColor(colors[0].hex)}>Completed</span>\n                    </span></td>\n                    <td>$126.00</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-2\">#12346</td>\n                    <td>Jane Doe</td>\n                    <td><span className=\"px-2 py-1 rounded-full text-xs\" style={{ backgroundColor: colors[1].hex }}>\n                      <span className={getTextColor(colors[1].hex)}>Processing</span>\n                    </span></td>\n                    <td>$58.50</td>\n                  </tr>\n                  <tr>\n                    <td className=\"py-2\">#12347</td>\n                    <td>Robert Brown</td>\n                    <td><span className=\"px-2 py-1 rounded-full text-xs\" style={{ backgroundColor: colors[3].hex }}>\n                      <span className={getTextColor(colors[3].hex)}>Pending</span>\n                    </span></td>\n                    <td>$235.75</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LandingTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Use the first 5 colors from palette, or default if not enough\n  const colors = [...palette];\n  while (colors.length < 5) {\n    colors.push({ hex: \"#e5e5e5\", rgb: { r: 229, g: 229, b: 229 }, locked: false });\n  }\n  \n  return (\n    <div className=\"p-0\">\n      {/* Header */}\n      <header style={{ backgroundColor: colors[0].hex }} className=\"p-4\">\n        <div className=\"container mx-auto flex justify-between items-center\">\n          <div className={`text-xl font-bold ${getTextColor(colors[0].hex)}`}>ColorBrand</div>\n          <nav>\n            <ul className={`flex space-x-6 ${getTextColor(colors[0].hex)}`}>\n              <li>Home</li>\n              <li>Features</li>\n              <li>Pricing</li>\n              <li>About</li>\n              <li>Contact</li>\n            </ul>\n          </nav>\n          <button className=\"px-4 py-2 rounded-lg\" style={{ backgroundColor: colors[4].hex }}>\n            <span className={getTextColor(colors[4].hex)}>Sign Up</span>\n          </button>\n        </div>\n      </header>\n      \n      {/* Hero Section */}\n      <section style={{ backgroundColor: colors[1].hex }} className=\"py-16\">\n        <div className=\"container mx-auto px-6 flex flex-col md:flex-row items-center\">\n          <div className=\"md:w-1/2 mb-10 md:mb-0\">\n            <h1 className={`text-4xl font-bold mb-4 ${getTextColor(colors[1].hex)}`}>\n              Create Beautiful Color Palettes\n            </h1>\n            <p className={`text-lg mb-6 ${getTextColor(colors[1].hex)}`}>\n              Your ultimate tool for generating stunning color combinations for your projects.\n              Save time and create professional designs effortlessly.\n            </p>\n            <div className=\"flex space-x-4\">\n              <button className=\"px-6 py-3 rounded-lg font-medium\" style={{ backgroundColor: colors[3].hex }}>\n                <span className={getTextColor(colors[3].hex)}>Get Started</span>\n              </button>\n              <button className={`px-6 py-3 rounded-lg font-medium border ${getTextColor(colors[1].hex)}`}>\n                Learn More\n              </button>\n            </div>\n          </div>\n          <div className=\"md:w-1/2 flex justify-center\">\n            <div className=\"w-full max-w-md h-64 rounded-lg flex\">\n              <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[0].hex }}></div>\n              <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[1].hex }}></div>\n              <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[2].hex }}></div>\n              <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[3].hex }}></div>\n              <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[4].hex }}></div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Features Section */}\n      <section style={{ backgroundColor: colors[2].hex }} className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <h2 className={`text-3xl font-bold mb-8 text-center ${getTextColor(colors[2].hex)}`}>\n            Key Features\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"p-6 rounded-lg\" style={{ backgroundColor: colors[4].hex }}>\n              <div className={`text-xl font-semibold mb-3 ${getTextColor(colors[4].hex)}`}>\n                Generate Instantly\n              </div>\n              <p className={getTextColor(colors[4].hex)}>\n                Create beautiful color palettes with a single click. Save time and focus on your design.\n              </p>\n            </div>\n            <div className=\"p-6 rounded-lg\" style={{ backgroundColor: colors[4].hex }}>\n              <div className={`text-xl font-semibold mb-3 ${getTextColor(colors[4].hex)}`}>\n                Export Anywhere\n              </div>\n              <p className={getTextColor(colors[4].hex)}>\n                Export your palettes in multiple formats and use them in your favorite design tools.\n              </p>\n            </div>\n            <div className=\"p-6 rounded-lg\" style={{ backgroundColor: colors[4].hex }}>\n              <div className={`text-xl font-semibold mb-3 ${getTextColor(colors[4].hex)}`}>\n                Color Theory\n              </div>\n              <p className={getTextColor(colors[4].hex)}>\n                Access advanced color theory options to create harmonious and balanced palettes.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Testimonial Section */}\n      <section style={{ backgroundColor: colors[3].hex }} className=\"py-16\">\n        <div className=\"container mx-auto px-6\">\n          <h2 className={`text-3xl font-bold mb-8 text-center ${getTextColor(colors[3].hex)}`}>\n            What Our Users Say\n          </h2>\n          <div className=\"flex justify-center\">\n            <div className=\"max-w-xl p-6 rounded-lg\" style={{ backgroundColor: colors[0].hex }}>\n              <p className={`text-lg italic mb-4 ${getTextColor(colors[0].hex)}`}>\n                \"This color palette generator has completely transformed my workflow. I can create stunning designs in minutes that used to take hours!\"\n              </p>\n              <div className={`font-medium ${getTextColor(colors[0].hex)}`}>\n                - Sarah Johnson, UX Designer\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Footer */}\n      <footer style={{ backgroundColor: colors[0].hex }} className=\"py-8\">\n        <div className=\"container mx-auto px-6\">\n          <div className={`text-center ${getTextColor(colors[0].hex)}`}>\n            <p>© 2023 ColorBrand. All rights reserved.</p>\n            <div className=\"flex justify-center space-x-4 mt-4\">\n              <span>Terms</span>\n              <span>Privacy</span>\n              <span>Contact</span>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nfunction AnalyticsTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Use the first 5 colors from palette, or default if not enough\n  const colors = [...palette];\n  while (colors.length < 5) {\n    colors.push({ hex: \"#e5e5e5\", rgb: { r: 229, g: 229, b: 229 }, locked: false });\n  }\n  \n  return (\n    <div style={{ backgroundColor: colors[4].hex }} className=\"p-6\">\n      <div className={`text-2xl font-bold mb-4 ${getTextColor(colors[4].hex)}`}>\n        Analytics Dashboard\n      </div>\n      \n      {/* Filters row */}\n      <div className=\"flex flex-wrap gap-3 mb-6\">\n        <div className=\"px-3 py-2 rounded-md\" style={{ backgroundColor: colors[1].hex }}>\n          <span className={getTextColor(colors[1].hex)}>Last 30 days</span>\n        </div>\n        <div className=\"px-3 py-2 rounded-md\" style={{ backgroundColor: colors[0].hex }}>\n          <span className={getTextColor(colors[0].hex)}>All channels</span>\n        </div>\n        <div className=\"px-3 py-2 rounded-md\" style={{ backgroundColor: colors[0].hex }}>\n          <span className={getTextColor(colors[0].hex)}>All users</span>\n        </div>\n      </div>\n      \n      {/* Stats row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n          <div className={`text-sm mb-1 ${getTextColor(colors[3].hex)}`}>Total Visitors</div>\n          <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>24,581</div>\n          <div className={`text-xs ${getTextColor(colors[3].hex)}`}>↑ 12.5%</div>\n        </div>\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n          <div className={`text-sm mb-1 ${getTextColor(colors[3].hex)}`}>Conversion Rate</div>\n          <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>5.27%</div>\n          <div className={`text-xs ${getTextColor(colors[3].hex)}`}>↓ 0.3%</div>\n        </div>\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n          <div className={`text-sm mb-1 ${getTextColor(colors[3].hex)}`}>Average Order</div>\n          <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>$48.71</div>\n          <div className={`text-xs ${getTextColor(colors[3].hex)}`}>↑ 3.1%</div>\n        </div>\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[3].hex }}>\n          <div className={`text-sm mb-1 ${getTextColor(colors[3].hex)}`}>Revenue</div>\n          <div className={`text-2xl font-bold ${getTextColor(colors[3].hex)}`}>$14,582</div>\n          <div className={`text-xs ${getTextColor(colors[3].hex)}`}>↑ 8.3%</div>\n        </div>\n      </div>\n      \n      {/* Chart area */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        <div className=\"md:col-span-2 p-4 rounded-lg\" style={{ backgroundColor: colors[2].hex }}>\n          <div className={`text-lg font-medium mb-4 ${getTextColor(colors[2].hex)}`}>Revenue Over Time</div>\n          <div className=\"relative h-60\">\n            {/* Line chart simulation */}\n            <div className=\"absolute bottom-0 left-0 w-full h-1 bg-gray-200\"></div>\n            <svg viewBox=\"0 0 100 40\" className=\"w-full h-full\" preserveAspectRatio=\"none\">\n              <path \n                d=\"M0,35 L10,28 L20,30 L30,20 L40,15 L50,18 L60,10 L70,15 L80,5 L90,8 L100,2\" \n                fill=\"none\" \n                stroke={colors[0].hex} \n                strokeWidth=\"2\"\n              />\n              <path \n                d=\"M0,38 L10,36 L20,34 L30,32 L40,30 L50,33 L60,25 L70,28 L80,22 L90,25 L100,20\" \n                fill=\"none\" \n                stroke={colors[1].hex} \n                strokeWidth=\"2\"\n              />\n            </svg>\n          </div>\n        </div>\n        <div className=\"p-4 rounded-lg\" style={{ backgroundColor: colors[2].hex }}>\n          <div className={`text-lg font-medium mb-4 ${getTextColor(colors[2].hex)}`}>Traffic Source</div>\n          <div className=\"h-60 relative\">\n            {/* Pie chart simulation */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"w-40 h-40 rounded-full relative overflow-hidden\">\n                <div style={{ backgroundColor: colors[0].hex, width: '100%', height: '100%', clipPath: 'polygon(50% 50%, 100% 0, 100% 100%, 0 100%, 0 0)' }}></div>\n                <div style={{ backgroundColor: colors[1].hex, width: '100%', height: '100%', clipPath: 'polygon(50% 50%, 100% 0, 50% 0, 0 0, 0 50%)' }}></div>\n                <div style={{ backgroundColor: colors[3].hex, width: '100%', height: '100%', clipPath: 'polygon(50% 50%, 0 50%, 0 0, 50% 0)' }}></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Data table */}\n      <div className=\"rounded-lg overflow-hidden\" style={{ backgroundColor: colors[3].hex }}>\n        <div className={`p-4 border-b ${getTextColor(colors[3].hex)} border-opacity-20`}>\n          <div className=\"text-lg font-medium\">Top Performing Products</div>\n        </div>\n        <div className=\"overflow-x-auto\">\n          <table className={`min-w-full ${getTextColor(colors[3].hex)}`}>\n            <thead>\n              <tr className=\"border-b border-opacity-20\">\n                <th className=\"p-3 text-left\">Product</th>\n                <th className=\"p-3 text-left\">Orders</th>\n                <th className=\"p-3 text-left\">Revenue</th>\n                <th className=\"p-3 text-left\">Conversion</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"border-b border-opacity-10\">\n                <td className=\"p-3\">Product A</td>\n                <td className=\"p-3\">853</td>\n                <td className=\"p-3\">$12,245</td>\n                <td className=\"p-3\">8.4%</td>\n              </tr>\n              <tr className=\"border-b border-opacity-10\">\n                <td className=\"p-3\">Product B</td>\n                <td className=\"p-3\">645</td>\n                <td className=\"p-3\">$10,150</td>\n                <td className=\"p-3\">6.7%</td>\n              </tr>\n              <tr>\n                <td className=\"p-3\">Product C</td>\n                <td className=\"p-3\">532</td>\n                <td className=\"p-3\">$8,760</td>\n                <td className=\"p-3\">5.2%</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ChatTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Use the first 5 colors from palette, or default if not enough\n  const colors = [...palette];\n  while (colors.length < 5) {\n    colors.push({ hex: \"#e5e5e5\", rgb: { r: 229, g: 229, b: 229 }, locked: false });\n  }\n  \n  return (\n    <div style={{ backgroundColor: colors[4].hex }} className=\"h-[600px] flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 h-full flex flex-col border-r\" style={{ backgroundColor: colors[0].hex, borderColor: `${colors[1].hex}40` }}>\n        <div className={`p-4 border-b ${getTextColor(colors[0].hex)}`} style={{ borderColor: `${colors[1].hex}40` }}>\n          <div className=\"text-lg font-bold\">Messages</div>\n        </div>\n        \n        <div className=\"p-2\">\n          <div className={`text-sm font-medium p-2 ${getTextColor(colors[0].hex)}`}>Conversations</div>\n          \n          {/* Contact list */}\n          <div className=\"space-y-1\">\n            <div className=\"p-2 rounded-md flex items-center\" style={{ backgroundColor: colors[1].hex }}>\n              <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n              <div className={getTextColor(colors[1].hex)}>\n                <div className=\"font-medium\">Sarah Johnson</div>\n                <div className=\"text-xs opacity-75\">Online</div>\n              </div>\n            </div>\n            \n            <div className=\"p-2 rounded-md flex items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n              <div className={getTextColor(colors[0].hex)}>\n                <div className=\"font-medium\">John Smith</div>\n                <div className=\"text-xs opacity-75\">Last seen 10m ago</div>\n              </div>\n            </div>\n            \n            <div className=\"p-2 rounded-md flex items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n              <div className={getTextColor(colors[0].hex)}>\n                <div className=\"font-medium\">Emily Davis</div>\n                <div className=\"text-xs opacity-75\">Last seen 2h ago</div>\n              </div>\n            </div>\n            \n            <div className=\"p-2 rounded-md flex items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n              <div className={getTextColor(colors[0].hex)}>\n                <div className=\"font-medium\">Michael Brown</div>\n                <div className=\"text-xs opacity-75\">Last seen yesterday</div>\n              </div>\n            </div>\n            \n            <div className=\"p-2 rounded-md flex items-center\">\n              <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n              <div className={getTextColor(colors[0].hex)}>\n                <div className=\"font-medium\">Jessica Williams</div>\n                <div className=\"text-xs opacity-75\">Last seen 3d ago</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chat area */}\n      <div className=\"flex-1 flex flex-col h-full\">\n        {/* Chat header */}\n        <div className=\"p-4 border-b flex items-center\" style={{ backgroundColor: colors[3].hex, borderColor: `${colors[1].hex}40` }}>\n          <div className=\"w-10 h-10 rounded-full bg-gray-300 mr-3\"></div>\n          <div className={getTextColor(colors[3].hex)}>\n            <div className=\"font-medium\">Sarah Johnson</div>\n            <div className=\"text-xs\">Online</div>\n          </div>\n          <div className=\"ml-auto flex space-x-3\">\n            <div className={`cursor-pointer ${getTextColor(colors[3].hex)}`}>\n              <i className=\"fas fa-phone\"></i>\n            </div>\n            <div className={`cursor-pointer ${getTextColor(colors[3].hex)}`}>\n              <i className=\"fas fa-video\"></i>\n            </div>\n            <div className={`cursor-pointer ${getTextColor(colors[3].hex)}`}>\n              <i className=\"fas fa-ellipsis-v\"></i>\n            </div>\n          </div>\n        </div>\n        \n        {/* Messages */}\n        <div className=\"flex-1 p-4 overflow-y-auto\" style={{ backgroundColor: colors[2].hex }}>\n          <div className=\"space-y-4\">\n            {/* Received message */}\n            <div className=\"flex\">\n              <div className=\"w-8 h-8 rounded-full bg-gray-300 mr-2\"></div>\n              <div className=\"max-w-[70%]\">\n                <div className=\"rounded-lg p-3\" style={{ backgroundColor: colors[1].hex }}>\n                  <div className={getTextColor(colors[1].hex)}>\n                    Hey there! How's your project coming along?\n                  </div>\n                </div>\n                <div className={`text-xs mt-1 ${getTextColor(colors[2].hex)} opacity-75`}>10:30 AM</div>\n              </div>\n            </div>\n            \n            {/* Sent message */}\n            <div className=\"flex justify-end\">\n              <div className=\"max-w-[70%]\">\n                <div className=\"rounded-lg p-3\" style={{ backgroundColor: colors[0].hex }}>\n                  <div className={getTextColor(colors[0].hex)}>\n                    It's going well! I'm working on the color palette right now. What do you think of these colors?\n                  </div>\n                </div>\n                <div className={`text-xs mt-1 ${getTextColor(colors[2].hex)} opacity-75 text-right`}>10:32 AM</div>\n              </div>\n            </div>\n            \n            {/* Sent message */}\n            <div className=\"flex justify-end\">\n              <div className=\"max-w-[70%]\">\n                <div className=\"rounded-lg p-3 flex\" style={{ backgroundColor: colors[0].hex }}>\n                  <div className={`flex-1 ${getTextColor(colors[0].hex)}`}>\n                    <div className=\"w-full h-20 flex\">\n                      <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[0].hex }}></div>\n                      <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[1].hex }}></div>\n                      <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[2].hex }}></div>\n                      <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[3].hex }}></div>\n                      <div className=\"w-1/5 h-full\" style={{ backgroundColor: colors[4].hex }}></div>\n                    </div>\n                  </div>\n                </div>\n                <div className={`text-xs mt-1 ${getTextColor(colors[2].hex)} opacity-75 text-right`}>10:32 AM</div>\n              </div>\n            </div>\n            \n            {/* Received message */}\n            <div className=\"flex\">\n              <div className=\"w-8 h-8 rounded-full bg-gray-300 mr-2\"></div>\n              <div className=\"max-w-[70%]\">\n                <div className=\"rounded-lg p-3\" style={{ backgroundColor: colors[1].hex }}>\n                  <div className={getTextColor(colors[1].hex)}>\n                    These look amazing! I especially like the combination of the first and third colors.\n                  </div>\n                </div>\n                <div className={`text-xs mt-1 ${getTextColor(colors[2].hex)} opacity-75`}>10:35 AM</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Message input */}\n        <div className=\"p-4 border-t\" style={{ backgroundColor: colors[3].hex, borderColor: `${colors[1].hex}40` }}>\n          <div className=\"flex items-center\">\n            <div className={`mr-3 cursor-pointer ${getTextColor(colors[3].hex)}`}>\n              <i className=\"fas fa-plus\"></i>\n            </div>\n            <input \n              type=\"text\" \n              placeholder=\"Type a message...\" \n              className=\"flex-1 py-2 px-3 rounded-full\"\n              style={{ backgroundColor: colors[4].hex, color: isLightColor(colors[4].hex) ? '#333' : '#fff' }}\n            />\n            <div className={`ml-3 cursor-pointer ${getTextColor(colors[3].hex)}`}>\n              <i className=\"fas fa-paper-plane\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction CalendarTemplate({ palette, getTextColor }: { palette: Color[], getTextColor: (color: string) => string }) {\n  // Use the first 5 colors from palette, or default if not enough\n  const colors = [...palette];\n  while (colors.length < 5) {\n    colors.push({ hex: \"#e5e5e5\", rgb: { r: 229, g: 229, b: 229 }, locked: false });\n  }\n  \n  // Helper function to create dates for the calendar\n  const getDates = () => {\n    const days = [];\n    for (let i = 1; i <= 31; i++) {\n      days.push(i);\n    }\n    return days;\n  };\n  \n  const dates = getDates();\n  \n  return (\n    <div className=\"p-6\" style={{ backgroundColor: colors[4].hex }}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className={`text-2xl font-bold ${getTextColor(colors[4].hex)}`}>\n          Calendar - August 2023\n        </div>\n        <div className=\"flex space-x-2\">\n          <button className=\"p-2 rounded-md\" style={{ backgroundColor: colors[0].hex }}>\n            <span className={getTextColor(colors[0].hex)}>\n              <i className=\"fas fa-chevron-left\"></i>\n            </span>\n          </button>\n          <button className=\"p-2 rounded-md\" style={{ backgroundColor: colors[0].hex }}>\n            <span className={getTextColor(colors[0].hex)}>\n              <i className=\"fas fa-chevron-right\"></i>\n            </span>\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"flex space-x-4 mb-6\">\n        <button className=\"px-4 py-2 rounded-md\" style={{ backgroundColor: colors[0].hex }}>\n          <span className={getTextColor(colors[0].hex)}>Month</span>\n        </button>\n        <button className=\"px-4 py-2 rounded-md\" style={{ backgroundColor: colors[3].hex }}>\n          <span className={getTextColor(colors[3].hex)}>Week</span>\n        </button>\n        <button className=\"px-4 py-2 rounded-md\" style={{ backgroundColor: colors[3].hex }}>\n          <span className={getTextColor(colors[3].hex)}>Day</span>\n        </button>\n      </div>\n      \n      {/* Calendar grid */}\n      <div style={{ backgroundColor: colors[2].hex }} className=\"rounded-lg overflow-hidden\">\n        {/* Day names */}\n        <div className=\"grid grid-cols-7 border-b\" style={{ borderColor: `${colors[3].hex}40` }}>\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (\n            <div key={index} className={`p-3 text-center font-medium ${getTextColor(colors[2].hex)}`}>\n              {day}\n            </div>\n          ))}\n        </div>\n        \n        {/* Calendar dates */}\n        <div className=\"grid grid-cols-7\">\n          {/* Empty cells for days before the 1st */}\n          {[0, 1, 2].map((_, index) => (\n            <div key={`empty-${index}`} className=\"h-24 p-2 border-b border-r\" style={{ borderColor: `${colors[3].hex}30` }}></div>\n          ))}\n          \n          {dates.map((date, index) => {\n            // Add special styling for specific dates to simulate events\n            const hasEvent = date === 4 || date === 10 || date === 15 || date === 22 || date === 28;\n            const isToday = date === 17;\n            \n            return (\n              <div \n                key={date} \n                className={`h-24 p-2 border-b border-r relative ${(index + 3) % 7 === 0 ? 'border-r-0' : ''}`}\n                style={{ borderColor: `${colors[3].hex}30` }}\n              >\n                <div \n                  className={`w-6 h-6 flex items-center justify-center rounded-full mb-1 ${\n                    isToday ? 'font-bold' : ''\n                  }`}\n                  style={isToday ? { backgroundColor: colors[1].hex } : {}}\n                >\n                  <span className={isToday ? getTextColor(colors[1].hex) : getTextColor(colors[2].hex)}>\n                    {date}\n                  </span>\n                </div>\n                \n                {hasEvent && (\n                  <div className=\"px-2 py-1 rounded-md text-xs mb-1\" style={{ backgroundColor: colors[0].hex }}>\n                    <span className={getTextColor(colors[0].hex)}>\n                      {date === 4 ? 'Team Meeting' : ''}\n                      {date === 10 ? 'Project Review' : ''}\n                      {date === 15 ? 'Client Call' : ''}\n                      {date === 22 ? 'Workshop' : ''}\n                      {date === 28 ? 'Deadline' : ''}\n                    </span>\n                  </div>\n                )}\n                \n                {date === 12 && (\n                  <div className=\"px-2 py-1 rounded-md text-xs\" style={{ backgroundColor: colors[3].hex }}>\n                    <span className={getTextColor(colors[3].hex)}>Design Review</span>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      <div className=\"mt-6 flex flex-wrap gap-4\">\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: colors[0].hex }}></div>\n          <span className={getTextColor(colors[4].hex)}>Meetings</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: colors[3].hex }}></div>\n          <span className={getTextColor(colors[4].hex)}>Reviews</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 rounded-full mr-2\" style={{ backgroundColor: colors[1].hex }}></div>\n          <span className={getTextColor(colors[4].hex)}>Today</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PaletteVisualizer;","size_bytes":40318},"server/index.ts":{"content":"import { createServer } from 'vite';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst rootDir = path.resolve(__dirname, '..');\n\nasync function startDevServer() {\n  console.log('Starting client-side development server...');\n  \n  const server = await createServer({\n    configFile: path.join(rootDir, 'client', 'vite.config.replit.js'),\n    root: path.join(rootDir, 'client'),\n    server: {\n      port: 5000,\n      host: '0.0.0.0',\n      hmr: {\n        clientPort: 443\n      },\n      strictPort: true,\n      cors: true,\n      headers: {\n        'Access-Control-Allow-Origin': '*'\n      },\n      allowedHosts: [\n        'localhost',\n        '0.0.0.0',\n        '172.31.128.17',\n        'a7c2b0e9-c4bd-4912-9db6-d8e76a014543-00-1m0y5conrqvbj.riker.replit.dev',\n        '.replit.dev',\n        '.repl.co'\n      ]\n    }\n  });\n\n  await server.listen();\n  server.printUrls();\n}\n\nstartDevServer().catch(err => {\n  console.error('Error starting dev server:', err);\n  process.exit(1);\n});","size_bytes":1090},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const palettes = pgTable(\"palettes\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  colors: text(\"colors\").notNull(),\n  createdAt: text(\"created_at\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertPaletteSchema = createInsertSchema(palettes).pick({\n  userId: true,\n  name: true,\n  colors: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertPalette = z.infer<typeof insertPaletteSchema>;\nexport type Palette = typeof palettes.$inferSelect;\n\nexport type Color = {\n  hex: string;\n  rgb: {\n    r: number;\n    g: number;\n    b: number;\n  };\n  locked: boolean;\n};\n","size_bytes":1163},"pages/api/extract-colors.ts":{"content":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { createCanvas, loadImage } from 'canvas';\nimport { Color } from '../../client/src/types/Color';\nimport { hexToRgb, rgbToHex, getColorName } from '../../client/src/lib/colorUtils';\n\n// Default number of colors to extract if not specified\nconst DEFAULT_COLORS_COUNT = 5;\n\n// Quantize function for color extraction\nfunction quantizeColors(imageData: ImageData, maxColors: number): Color[] {\n  const pixels = imageData.data;\n  const pixelCount = pixels.length / 4;\n  const pixelArray = [];\n\n  // Extract pixels skipping alpha (every 4th value)\n  for (let i = 0; i < pixelCount; i++) {\n    const offset = i * 4;\n    const r = pixels[offset];\n    const g = pixels[offset + 1];\n    const b = pixels[offset + 2];\n    const a = pixels[offset + 3];\n\n    // Only include non-transparent pixels\n    if (a >= 125) {\n      const color = rgbToHex(r, g, b);\n      pixelArray.push({\n        hex: color,\n        rgb: { r, g, b },\n        locked: false\n      });\n    }\n  }\n\n  // Reduce similar colors by quantizing\n  const colorMap = new Map<string, { color: Color; count: number }>();\n  \n  pixelArray.forEach(color => {\n    // Create a simplified version of the color to group similar colors\n    const r = Math.round(color.rgb.r / 10) * 10;\n    const g = Math.round(color.rgb.g / 10) * 10;\n    const b = Math.round(color.rgb.b / 10) * 10;\n    const simplifiedHex = rgbToHex(r, g, b);\n    \n    if (colorMap.has(simplifiedHex)) {\n      const existing = colorMap.get(simplifiedHex)!;\n      existing.count += 1;\n    } else {\n      colorMap.set(simplifiedHex, { color, count: 1 });\n    }\n  });\n\n  // Sort by frequency and take the top maxColors\n  const sortedColors = Array.from(colorMap.values())\n    .sort((a, b) => b.count - a.count)\n    .slice(0, maxColors)\n    .map(item => item.color);\n\n  // Enhance the colors with names\n  return sortedColors.map(color => ({\n    ...color,\n    name: getColorName(color.hex)\n  }));\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // Only allow POST requests\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const { imageUrl, colorCount } = req.body;\n    \n    if (!imageUrl) {\n      return res.status(400).json({ error: 'Image URL is required' });\n    }\n\n    const count = parseInt(colorCount) || DEFAULT_COLORS_COUNT;\n    \n    // Load the image\n    const image = await loadImage(imageUrl);\n    \n    // Create a canvas to draw the image and extract pixel data\n    const canvas = createCanvas(image.width, image.height);\n    const ctx = canvas.getContext('2d');\n    \n    // Draw the image to the canvas\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n    \n    // Get the image data\n    const imageData = ctx.getImageData(0, 0, image.width, image.height);\n    \n    // Extract the colors\n    const colors = quantizeColors(imageData, count);\n    \n    // Return the extracted colors\n    return res.status(200).json({ colors });\n  } catch (error) {\n    console.error('Error extracting colors:', error);\n    return res.status(500).json({ error: 'Failed to extract colors from image' });\n  }\n}","size_bytes":3191},"pages/api/og-image.tsx":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { createCanvas, registerFont, loadImage } from 'canvas';\nimport path from 'path';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Set proper cache headers for CDNs\n  res.setHeader('Content-Type', 'image/png');\n  res.setHeader('Cache-Control', 'public, immutable, no-transform, s-maxage=31536000, max-age=31536000');\n  \n  try {\n    // Get query parameters\n    const { title = 'Coolors.in', description = 'Color Palette Generator' } = req.query;\n    \n    // Create canvas\n    const width = 1200;\n    const height = 630;\n    const canvas = createCanvas(width, height);\n    const ctx = canvas.getContext('2d');\n    \n    // Background gradient\n    const gradient = ctx.createLinearGradient(0, 0, width, height);\n    gradient.addColorStop(0, '#8B5CF6');\n    gradient.addColorStop(1, '#3B82F6');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw example color palette\n    const colors = ['#E63946', '#F1FAEE', '#A8DADC', '#457B9D', '#1D3557'];\n    const paletteHeight = 100;\n    const paletteY = height - paletteHeight - 50;\n    \n    colors.forEach((color, i) => {\n      const colorWidth = width / colors.length;\n      ctx.fillStyle = color;\n      ctx.fillRect(i * colorWidth, paletteY, colorWidth, paletteHeight);\n    });\n    \n    // Add text\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 60px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText(title as string, width / 2, height / 2 - 50);\n    \n    ctx.font = '40px Arial';\n    ctx.fillText(description as string, width / 2, height / 2 + 30);\n    \n    // Draw logo (example)\n    ctx.fillStyle = '#FFFFFF';\n    ctx.font = 'bold 40px Arial';\n    ctx.textAlign = 'left';\n    ctx.fillText('coolors.in', 60, 80);\n    \n    // Send the image\n    const buffer = canvas.toBuffer('image/png');\n    res.send(buffer);\n  } catch (error) {\n    console.error('Error generating OG image:', error);\n    res.status(500).send('Error generating image');\n  }\n}","size_bytes":2034},"pages/api/palette-og-image.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\nimport { createCanvas } from 'canvas';\nimport { hexToRgb } from '../../client/src/lib/colorUtils';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    const { colors } = req.query;\n    \n    if (!colors || typeof colors !== 'string') {\n      return res.status(400).json({ error: 'Missing colors parameter' });\n    }\n    \n    // Parse the colors query parameter\n    const colorArray = colors.split('-');\n    \n    if (!colorArray.length || colorArray.length > 10) {\n      return res.status(400).json({ error: 'Invalid number of colors. Must be between 1 and 10.' });\n    }\n    \n    // Add # prefix to hex values if missing\n    const hexColors = colorArray.map(c => c.startsWith('#') ? c : `#${c}`);\n    \n    // Create canvas for the palette preview\n    const width = 1200;\n    const height = 630;\n    const canvas = createCanvas(width, height);\n    const ctx = canvas.getContext('2d');\n    \n    // Fill background\n    ctx.fillStyle = '#f8f9fa';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Draw the palette colors\n    const colorBlockHeight = 300;\n    const colorBlockY = 150;\n    const colorBlockWidth = width / hexColors.length;\n    \n    hexColors.forEach((color, index) => {\n      ctx.fillStyle = color;\n      ctx.fillRect(index * colorBlockWidth, colorBlockY, colorBlockWidth, colorBlockHeight);\n    });\n    \n    // Add a title\n    ctx.fillStyle = '#333333';\n    ctx.font = 'bold 50px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Color Palette by Coolors.in', width / 2, 80);\n    \n    // Add hex codes below each color\n    ctx.font = '28px monospace';\n    hexColors.forEach((color, index) => {\n      const x = index * colorBlockWidth + colorBlockWidth / 2;\n      const y = colorBlockY + colorBlockHeight + 50;\n      \n      // Draw a background for the text to ensure readability\n      const textWidth = ctx.measureText(color.toUpperCase()).width;\n      const textPadding = 10;\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(\n        x - textWidth / 2 - textPadding,\n        y - 30,\n        textWidth + textPadding * 2,\n        40\n      );\n      \n      // Draw the hex code\n      ctx.fillStyle = '#333333';\n      ctx.fillText(color.toUpperCase(), x, y);\n    });\n    \n    // Add Coolors.in branding at the bottom\n    ctx.fillStyle = '#333333';\n    ctx.font = '24px sans-serif';\n    ctx.fillText('coolors.in - The super fast color palette generator', width / 2, height - 40);\n    \n    // Convert canvas to buffer and send as image\n    const buffer = canvas.toBuffer('image/png');\n    \n    // Set caching headers for better performance\n    res.setHeader('Cache-Control', 'public, max-age=86400, s-maxage=86400');\n    res.setHeader('Content-Type', 'image/png');\n    res.status(200).send(buffer);\n  } catch (error) {\n    console.error('Error generating palette image:', error);\n    res.status(500).json({ error: 'Failed to generate palette image' });\n  }\n}","size_bytes":2978},"pages/api/palettes.ts":{"content":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { getRandomColor } from '../../client/src/lib/colorUtils';\nimport { hexToRgb } from '../../client/src/lib/colorUtils';\nimport { Color } from '../../client/src/types/Color';\nimport { Palette } from '../../client/src/types/Palette';\n\n// For SSR prefetching of popular palettes\nconst POPULAR_PALETTES: Palette[] = [\n  {\n    id: 'popular-1',\n    name: 'Ocean Breeze',\n    colors: [\n      { hex: '#05445E', rgb: hexToRgb('#05445E') || { r: 5, g: 68, b: 94 }, locked: false, name: 'Navy Blue' },\n      { hex: '#189AB4', rgb: hexToRgb('#189AB4') || { r: 24, g: 154, b: 180 }, locked: false, name: 'Blue Green' },\n      { hex: '#75E6DA', rgb: hexToRgb('#75E6DA') || { r: 117, g: 230, b: 218 }, locked: false, name: 'Turquoise' },\n      { hex: '#D4F1F4', rgb: hexToRgb('#D4F1F4') || { r: 212, g: 241, b: 244 }, locked: false, name: 'Pale Blue' },\n      { hex: '#FFFFFF', rgb: hexToRgb('#FFFFFF') || { r: 255, g: 255, b: 255 }, locked: false, name: 'White' },\n    ]\n  },\n  {\n    id: 'popular-2',\n    name: 'Sunset Vibes',\n    colors: [\n      { hex: '#F0A500', rgb: hexToRgb('#F0A500') || { r: 240, g: 165, b: 0 }, locked: false, name: 'Yellow' },\n      { hex: '#CF7500', rgb: hexToRgb('#CF7500') || { r: 207, g: 117, b: 0 }, locked: false, name: 'Orange' },\n      { hex: '#E74646', rgb: hexToRgb('#E74646') || { r: 231, g: 70, b: 70 }, locked: false, name: 'Red' },\n      { hex: '#591C77', rgb: hexToRgb('#591C77') || { r: 89, g: 28, b: 119 }, locked: false, name: 'Purple' },\n      { hex: '#1D1CE5', rgb: hexToRgb('#1D1CE5') || { r: 29, g: 28, b: 229 }, locked: false, name: 'Blue' },\n    ]\n  },\n];\n\ntype ErrorResponse = {\n  error: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Palette[] | Palette | ErrorResponse>\n) {\n  switch (req.method) {\n    case 'GET':\n      // Return precalculated popular palettes or generate random ones\n      if (req.query.type === 'popular') {\n        return res.status(200).json(POPULAR_PALETTES);\n      } else {\n        // Generate a random palette\n        const colors: Color[] = Array.from({ length: 5 }, () => {\n          const hex = getRandomColor();\n          return {\n            hex,\n            rgb: hexToRgb(hex) || { r: 0, g: 0, b: 0 },\n            locked: false\n          };\n        });\n        \n        return res.status(200).json({\n          id: `random-${Date.now()}`,\n          name: 'Random Palette',\n          colors\n        });\n      }\n      \n    case 'POST':\n      try {\n        // Save a palette - in a real app this would go to a database\n        const { name, colors } = req.body;\n        \n        if (!Array.isArray(colors) || !name) {\n          return res.status(400).json({ error: 'Invalid palette data' });\n        }\n        \n        // In a real implementation, this would be saved to a database\n        const newPalette: Palette = {\n          id: `${Date.now()}`,\n          name,\n          colors,\n          createdAt: new Date()\n        };\n        \n        // For now we just return the created palette\n        return res.status(201).json(newPalette);\n      } catch (error) {\n        console.error('Error creating palette:', error);\n        return res.status(500).json({ error: 'Failed to create palette' });\n      }\n      \n    default:\n      res.setHeader('Allow', ['GET', 'POST']);\n      return res.status(405).json({ error: `Method ${req.method} Not Allowed` });\n  }\n}","size_bytes":3434},"pages/api/preview.ts":{"content":"import type { NextApiRequest, NextApiResponse } from 'next';\nimport { Color } from '../../client/src/types/Color';\nimport { hexToRgb } from '../../client/src/lib/colorUtils';\n\ntype PreviewResponse = {\n  colors: Color[];\n};\n\ntype ErrorResponse = {\n  error: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<PreviewResponse | ErrorResponse>\n) {\n  try {\n    const { colors } = req.query;\n    \n    if (!colors || typeof colors !== 'string') {\n      return res.status(400).json({ error: 'Missing colors parameter' });\n    }\n    \n    // Parse the colors query parameter - expects format like: colors=FF5733-33FF57-5733FF-F3FF33-FF33F3\n    const colorArray = colors.split('-');\n    \n    if (!colorArray.length || colorArray.length > 10) {\n      return res.status(400).json({ error: 'Invalid number of colors. Must be between 1 and 10.' });\n    }\n    \n    // Convert to Color objects\n    const paletteColors: Color[] = colorArray.map(hexCode => {\n      // Ensure the hex code has a # prefix\n      const formattedHex = hexCode.startsWith('#') ? hexCode : `#${hexCode}`;\n      \n      return {\n        hex: formattedHex,\n        rgb: hexToRgb(formattedHex) || { r: 0, g: 0, b: 0 },\n        locked: false\n      };\n    });\n    \n    res.setHeader('Cache-Control', 'public, s-maxage=86400, stale-while-revalidate=43200');\n    return res.status(200).json({ colors: paletteColors });\n  } catch (error) {\n    console.error('Error processing preview request:', error);\n    return res.status(500).json({ error: 'Failed to process preview request' });\n  }\n}","size_bytes":1577},"pages/api/robots.txt.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Set cache headers\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=86400, stale-while-revalidate=43200'\n  );\n  \n  // Set the content type to plain text\n  res.setHeader('Content-Type', 'text/plain');\n  \n  // Generate the robots.txt content\n  const robotsTxt = `User-agent: *\nAllow: /\n\n# Sitemap\nSitemap: https://coolors.in/api/sitemap.xml\n`;\n  \n  // Return the robots.txt\n  res.status(200).send(robotsTxt);\n}","size_bytes":557},"pages/api/sitemap.xml.ts":{"content":"import { NextApiRequest, NextApiResponse } from 'next';\n\n// This is a dynamic API route that generates a sitemap.xml\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  // Set cache headers\n  res.setHeader(\n    'Cache-Control',\n    'public, s-maxage=86400, stale-while-revalidate=43200'\n  );\n  \n  // Set the content type to XML\n  res.setHeader('Content-Type', 'text/xml');\n  \n  // Base URL for the site\n  const baseUrl = 'https://coolors.in';\n  \n  // Current date in ISO format for lastmod\n  const today = new Date().toISOString();\n  \n  // Define all the static pages of the site\n  const pages = [\n    { url: '', changefreq: 'daily', priority: '1.0' },\n    { url: '/designers-guide', changefreq: 'weekly', priority: '0.8' },\n    { url: '/faq', changefreq: 'weekly', priority: '0.8' },\n    { url: '/privacy-policy', changefreq: 'monthly', priority: '0.5' },\n    { url: '/visualizer', changefreq: 'daily', priority: '0.9' },\n    { url: '/image-palette', changefreq: 'daily', priority: '0.9' }\n  ];\n  \n  // Generate the sitemap XML\n  const sitemap = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  ${pages.map(page => `\n  <url>\n    <loc>${baseUrl}${page.url}</loc>\n    <lastmod>${today}</lastmod>\n    <changefreq>${page.changefreq}</changefreq>\n    <priority>${page.priority}</priority>\n  </url>\n  `).join('')}\n</urlset>`;\n  \n  // Return the sitemap\n  res.status(200).send(sitemap);\n}","size_bytes":1463},"pages/palette/[id].tsx":{"content":"import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\nimport { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { PaletteProvider } from '../../client/src/contexts/PaletteContext';\nimport { AuthProvider } from '../../client/src/hooks/use-auth';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from '../../client/src/lib/queryClient';\nimport { Toaster } from '@/components/ui/toaster';\nimport ExportModal from '../../client/src/components/modals/ExportModal';\nimport { Color } from '../../client/src/types/Color';\nimport { hexToRgb, isLightColor } from '../../client/src/lib/colorUtils';\n\n// Define the props for the page component\ninterface SharedPalettePageProps {\n  colors: Color[];\n  notFound: boolean;\n}\n\n// Define a color swatch component for the shared page\nconst ColorSwatch = ({ color }: { color: Color }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 1500);\n  };\n  \n  const textColorClass = isLightColor(color.hex) ? 'text-gray-900' : 'text-white';\n  \n  return (\n    <div \n      className=\"flex-1 h-full min-h-[150px] relative flex items-center justify-center flex-col transition-all\"\n      style={{ backgroundColor: color.hex }}\n    >\n      <div className={`text-lg font-medium ${textColorClass}`}>\n        {color.hex.toUpperCase()}\n      </div>\n      \n      <div className={`mt-2 flex space-x-2 opacity-80 hover:opacity-100 transition-opacity ${textColorClass}`}>\n        <button \n          onClick={() => copyToClipboard(color.hex)}\n          className=\"p-2 rounded-full bg-black bg-opacity-20 hover:bg-opacity-30 transition-colors\"\n        >\n          {copied ? 'Copied!' : (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n              <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n              <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n          )}\n        </button>\n      </div>\n      \n      {color.name && (\n        <div className={`mt-2 text-sm ${textColorClass}`}>\n          {color.name}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SharedPalettePage: NextPage<SharedPalettePageProps> = ({ colors, notFound }) => {\n  const [showExportModal, setShowExportModal] = useState(false);\n  const router = useRouter();\n  \n  if (notFound) {\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-gray-50 p-4\">\n        <Head>\n          <title>Palette Not Found - Coolors.in</title>\n          <meta name=\"description\" content=\"This color palette could not be found.\" />\n          <link rel=\"canonical\" href={`https://coolors.in/palette/${router.query.id}`} />\n        </Head>\n        \n        <div className=\"text-3xl font-bold text-gray-800 mb-6\">Palette Not Found</div>\n        <p className=\"text-gray-600 mb-8 text-center max-w-md\">\n          The color palette you're looking for doesn't exist or has been removed.\n        </p>\n        <Link href=\"/\" className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n          Create a New Palette\n        </Link>\n      </div>\n    );\n  }\n  \n  // Format colors as a string for sharing\n  const colorString = colors.map(c => c.hex.replace('#', '')).join('-');\n  const shareUrl = `https://coolors.in/palette/${colorString}`;\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <PaletteProvider>\n          <div className=\"min-h-screen flex flex-col bg-gray-50\">\n            <Head>\n              <title>Shared Color Palette - Coolors.in</title>\n              <meta name=\"description\" content=\"View and explore this shared color palette from Coolors.in\" />\n              <meta name=\"keywords\" content=\"shared palette, color scheme, coolors\" />\n              <link rel=\"canonical\" href={`https://coolors.in/palette/${router.query.id}`} />\n              <meta property=\"og:type\" content=\"website\" />\n              <meta property=\"og:title\" content=\"Color Palette from Coolors.in\" />\n              <meta property=\"og:description\" content=\"Check out this beautiful color palette I created with Coolors.in\" />\n              <meta property=\"og:image\" content={`https://coolors.in/api/palette-og-image?colors=${colorString}`} />\n              <meta property=\"og:url\" content={shareUrl} />\n              <meta name=\"twitter:card\" content=\"summary_large_image\" />\n              <meta name=\"twitter:title\" content=\"Color Palette from Coolors.in\" />\n              <meta name=\"twitter:description\" content=\"Check out this beautiful color palette I created with Coolors.in\" />\n              <meta name=\"twitter:image\" content={`https://coolors.in/api/palette-og-image?colors=${colorString}`} />\n            </Head>\n            \n            <header className=\"bg-white border-b border-gray-200\">\n              <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n                <Link href=\"/\" className=\"flex items-center\">\n                  <span className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                    Coolors.in\n                  </span>\n                </Link>\n                \n                <div className=\"flex space-x-3\">\n                  <button \n                    onClick={() => setShowExportModal(true)}\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n                  >\n                    Export\n                  </button>\n                  \n                  <Link \n                    href=\"/\"\n                    className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-colors\"\n                  >\n                    Create New\n                  </Link>\n                </div>\n              </div>\n            </header>\n            \n            <main className=\"flex-1 flex flex-col\">\n              {/* Desktop View: Colors side by side */}\n              <div className=\"hidden md:flex flex-1\">\n                {colors.map((color, index) => (\n                  <ColorSwatch key={index} color={color} />\n                ))}\n              </div>\n              \n              {/* Mobile View: Stack colors vertically */}\n              <div className=\"md:hidden flex flex-col\">\n                {colors.map((color, index) => (\n                  <div key={index} className=\"h-24\">\n                    <ColorSwatch color={color} />\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"bg-white border-t border-gray-200 p-6\">\n                <h2 className=\"text-xl font-bold mb-4\">About This Palette</h2>\n                \n                <div className=\"mb-6\">\n                  <div className=\"text-sm font-medium text-gray-500 mb-1\">Share URL</div>\n                  <div className=\"flex\">\n                    <input \n                      type=\"text\" \n                      readOnly \n                      value={shareUrl}\n                      className=\"flex-1 border border-gray-300 rounded-l-md py-2 px-3 bg-gray-50\"\n                    />\n                    <button \n                      onClick={() => {\n                        navigator.clipboard.writeText(shareUrl);\n                        alert('URL copied to clipboard!');\n                      }}\n                      className=\"px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 transition-colors\"\n                    >\n                      Copy\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-3\">\n                  <Link \n                    href={`/visualizer?colors=${colorString}`}\n                    className=\"px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors\"\n                  >\n                    Visualize\n                  </Link>\n                  \n                  <Link \n                    href={`/?colors=${colorString}`}\n                    className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n                  >\n                    Edit Palette\n                  </Link>\n                </div>\n              </div>\n            </main>\n            \n            <footer className=\"bg-gray-800 text-white py-6\">\n              <div className=\"container mx-auto px-4\">\n                <div className=\"flex flex-col md:flex-row justify-between items-center\">\n                  <div className=\"mb-4 md:mb-0\">\n                    <div className=\"text-xl font-bold\">Coolors.in</div>\n                    <div className=\"text-gray-400 text-sm\">The super fast color palette generator</div>\n                  </div>\n                  \n                  <div className=\"flex space-x-6\">\n                    <Link href=\"/\" className=\"text-gray-300 hover:text-white transition-colors\">\n                      Home\n                    </Link>\n                    <Link href=\"/faq\" className=\"text-gray-300 hover:text-white transition-colors\">\n                      FAQ\n                    </Link>\n                    <Link href=\"/privacy-policy\" className=\"text-gray-300 hover:text-white transition-colors\">\n                      Privacy\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </footer>\n            \n            {showExportModal && (\n              <ExportModal \n                palette={colors} \n                onClose={() => setShowExportModal(false)} \n              />\n            )}\n            \n            <Toaster />\n          </div>\n        </PaletteProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\n  try {\n    const id = params?.id as string;\n    \n    if (!id) {\n      return {\n        props: {\n          colors: [],\n          notFound: true\n        }\n      };\n    }\n    \n    // If ID is a hash of colors like FF5733-33FF57-5733FF\n    if (id.includes('-') || (id.length >= 6 && !id.includes('-'))) {\n      // Handle both formats: with dashes and without\n      const colorArray = id.includes('-') \n        ? id.split('-') \n        : id.match(/.{1,6}/g) || []; // Split into 6-character chunks if no dashes\n      \n      const colors: Color[] = colorArray.map(hexCode => {\n        // Ensure the hex code has a # prefix\n        const formattedHex = hexCode.startsWith('#') ? hexCode : `#${hexCode}`;\n        \n        return {\n          hex: formattedHex,\n          rgb: hexToRgb(formattedHex) || { r: 0, g: 0, b: 0 },\n          locked: false\n        };\n      });\n      \n      return {\n        props: {\n          colors,\n          notFound: false\n        }\n      };\n    }\n    \n    // If we can't parse the ID, return not found\n    return {\n      props: {\n        colors: [],\n        notFound: true\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching palette:', error);\n    \n    return {\n      props: {\n        colors: [],\n        notFound: true\n      }\n    };\n  }\n};\n\nexport default SharedPalettePage;","size_bytes":11454},"client/src/pages/ClothingPalettePage.tsx":{"content":"import React, { useState, useRef, useCallback } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Upload, Camera, Sun, Moon, Palette, User, Eye, Sparkles, RefreshCw, Download, Copy, ChevronLeft } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n// Using plain components instead of shadcn UI for compatibility\n\n// Color analysis utilities\nconst analyzeImageForSkinTone = async (imageData: string): Promise<{\n  skinTone: string;\n  undertone: string;\n  dominantColors: string[];\n}> => {\n  // Enhanced skin tone analysis - uses image characteristics for better results\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const img = new Image();\n  \n  return new Promise((resolve) => {\n    img.onload = () => {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx?.drawImage(img, 0, 0);\n      \n      // Sample pixels from center area (face region)\n      const centerX = Math.floor(img.width / 2);\n      const centerY = Math.floor(img.height / 2);\n      const sampleSize = Math.min(img.width, img.height) / 4;\n      \n      let totalR = 0, totalG = 0, totalB = 0, sampleCount = 0;\n      \n      for (let x = centerX - sampleSize/2; x < centerX + sampleSize/2; x += 10) {\n        for (let y = centerY - sampleSize/2; y < centerY + sampleSize/2; y += 10) {\n          const imageData = ctx?.getImageData(x, y, 1, 1);\n          if (imageData) {\n            totalR += imageData.data[0];\n            totalG += imageData.data[1];\n            totalB += imageData.data[2];\n            sampleCount++;\n          }\n        }\n      }\n      \n      const avgR = totalR / sampleCount;\n      const avgG = totalG / sampleCount;\n      const avgB = totalB / sampleCount;\n      \n      // Determine skin tone based on RGB values\n      const brightness = (avgR + avgG + avgB) / 3;\n      let skinTone: string;\n      if (brightness > 200) skinTone = 'fair';\n      else if (brightness > 160) skinTone = 'light';\n      else if (brightness > 120) skinTone = 'medium';\n      else if (brightness > 80) skinTone = 'tan';\n      else skinTone = 'deep';\n      \n      // Determine undertone based on color ratios\n      const yellowness = avgR + avgG - avgB * 2;\n      const pinkness = avgR - avgG;\n      \n      let undertone: string;\n      if (Math.abs(yellowness) < 10 && Math.abs(pinkness) < 10) {\n        undertone = 'neutral';\n      } else if (yellowness > pinkness) {\n        undertone = 'warm';\n      } else {\n        undertone = 'cool';\n      }\n      \n      resolve({\n        skinTone,\n        undertone,\n        dominantColors: [`rgb(${Math.floor(avgR)}, ${Math.floor(avgG)}, ${Math.floor(avgB)})`]\n      });\n    };\n    \n    img.src = imageData;\n  });\n};\n\n// Hair color options\nconst hairColorOptions = [\n  { value: 'black', label: 'Black', color: '#2C1B18' },\n  { value: 'brown', label: 'Brown', color: '#8B4513' },\n  { value: 'blonde', label: 'Blonde', color: '#F4C2A1' },\n  { value: 'red', label: 'Red', color: '#B22222' },\n  { value: 'gray', label: 'Gray', color: '#808080' },\n  { value: 'white', label: 'White', color: '#FFFFFF' },\n  { value: 'other', label: 'Other', color: '#A0A0A0' }\n];\n\n// Enhanced clothing color recommendations with multiple variations\nconst getClothingRecommendations = (skinTone: string, undertone: string, hairColor: string, isDayTime: boolean, variationIndex: number = 0) => {\n  \n  // Expanded color palettes with multiple themes and variations\n  const colorPalettes = {\n    cool: {\n      day: {\n        primary: [\n          // Classic Blues Theme\n          '#1e3a8a', '#1e40af', '#3b82f6', '#0ea5e9', '#0284c7', '#0891b2',\n          // Cool Teal Theme  \n          '#0f766e', '#0d9488', '#14b8a6', '#2dd4bf', '#06b6d4', '#0ea5e9',\n          // Sophisticated Navy Theme\n          '#1e293b', '#334155', '#475569', '#64748b'\n        ],\n        neutral: [\n          // Pure Whites & Grays\n          '#ffffff', '#f8fafc', '#f1f5f9', '#e2e8f0', '#cbd5e1', '#94a3b8',\n          // Cool Beiges\n          '#f8f9fa', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#6c757d'\n        ],\n        accent: [\n          // Bright Cool Accents\n          '#ec4899', '#f43f5e', '#ef4444', '#f97316', '#10b981', '#06b6d4',\n          // Jewel Tones\n          '#7c3aed', '#8b5cf6', '#a855f7', '#c084fc', '#d946ef', '#e879f9'\n        ]\n      },\n      evening: {\n        primary: [\n          // Deep Sapphire Theme\n          '#1e1b4b', '#312e81', '#3730a3', '#4338ca', '#4f46e5', '#6366f1',\n          // Rich Navy Theme\n          '#0f172a', '#1e293b', '#334155', '#475569', '#64748b', '#94a3b8'\n        ],\n        neutral: [\n          // Sophisticated Grays\n          '#1f2937', '#374151', '#4b5563', '#6b7280', '#9ca3af', '#d1d5db',\n          // Charcoal Elegance\n          '#111827', '#1f2937', '#374151', '#4b5563', '#6b7280', '#9ca3af'\n        ],\n        accent: [\n          // Evening Jewels\n          '#dc2626', '#ea580c', '#059669', '#0891b2', '#7c2d92', '#a21caf',\n          // Rich Metallics\n          '#6366f1', '#8b5cf6', '#ec4899', '#06b6d4', '#10b981', '#f59e0b'\n        ]\n      }\n    },\n    warm: {\n      day: {\n        primary: [\n          // Warm Reds & Corals\n          '#dc2626', '#ef4444', '#f87171', '#fca5a5', '#ea580c', '#fb923c',\n          // Rich Earth Tones\n          '#92400e', '#a16207', '#ca8a04', '#eab308', '#facc15', '#fde047',\n          // Autumn Spice Theme\n          '#d97706', '#f59e0b', '#f59e0b', '#fbbf24'\n        ],\n        neutral: [\n          // Warm Creams & Beiges\n          '#fef7cd', '#fef3c7', '#fde68a', '#fcd34d', '#f59e0b', '#d97706',\n          // Natural Linens\n          '#faf5f0', '#f5f0e8', '#e6ddd4', '#d2c7b8', '#b8a690', '#9c8b72'\n        ],\n        accent: [\n          // Vibrant Warm Accents\n          '#f97316', '#fb923c', '#fdba74', '#fed7aa', '#84cc16', '#a3e635',\n          // Sunset Tones\n          '#f59e0b', '#eab308', '#facc15', '#fde047', '#84cc16', '#65a30d'\n        ]\n      },\n      evening: {\n        primary: [\n          // Deep Burgundy Theme\n          '#7f1d1d', '#991b1b', '#b91c1c', '#dc2626', '#92400e', '#a16207',\n          // Rich Brown & Gold Theme\n          '#451a03', '#78350f', '#92400e', '#a16207', '#ca8a04', '#eab308'\n        ],\n        neutral: [\n          // Warm Sophisticated Grays\n          '#44403c', '#57534e', '#78716c', '#a8a29e', '#d6d3d1', '#e7e5e4',\n          // Chocolate Browns\n          '#292524', '#44403c', '#57534e', '#78716c', '#a8a29e', '#d6d3d1'\n        ],\n        accent: [\n          // Evening Warm Accents\n          '#dc2626', '#ea580c', '#f59e0b', '#059669', '#0d9488', '#7c2d92',\n          // Rich Metallics\n          '#eab308', '#ca8a04', '#a16207', '#92400e', '#78350f', '#451a03'\n        ]\n      }\n    },\n    neutral: {\n      day: {\n        primary: [\n          // True Grays\n          '#374151', '#4b5563', '#6b7280', '#9ca3af', '#d1d5db', '#f3f4f6',\n          // Universal Colors\n          '#1e40af', '#dc2626', '#059669', '#7c2d92', '#ea580c', '#0891b2'\n        ],\n        neutral: [\n          // Perfect Neutrals\n          '#ffffff', '#f9fafb', '#f3f4f6', '#e5e7eb', '#d1d5db', '#9ca3af',\n          // Warm-Cool Balance\n          '#fafaf9', '#f5f5f4', '#e7e5e4', '#d6d3d1', '#a8a29e', '#78716c'\n        ],\n        accent: [\n          // Universal Accents\n          '#3b82f6', '#ef4444', '#10b981', '#8b5cf6', '#f59e0b', '#06b6d4',\n          // Balanced Brights\n          '#2563eb', '#dc2626', '#16a34a', '#9333ea', '#d97706', '#0284c7'\n        ]\n      },\n      evening: {\n        primary: [\n          // Sophisticated Neutrals\n          '#1f2937', '#374151', '#4b5563', '#6b7280', '#9ca3af', '#d1d5db',\n          // Evening Jewel Tones\n          '#312e81', '#7f1d1d', '#064e3b', '#581c87', '#92400e', '#1e40af'\n        ],\n        neutral: [\n          // Evening Sophistication\n          '#111827', '#1f2937', '#374151', '#4b5563', '#6b7280', '#9ca3af',\n          // Elegant Darks\n          '#0f172a', '#1e293b', '#334155', '#475569', '#64748b', '#94a3b8'\n        ],\n        accent: [\n          // Evening Accents\n          '#4338ca', '#dc2626', '#059669', '#7c2d92', '#ea580c', '#0891b2',\n          // Refined Tones\n          '#6366f1', '#ef4444', '#10b981', '#a855f7', '#f59e0b', '#06b6d4'\n        ]\n      }\n    }\n  };\n\n  // Hair color modifications\n  const getHairColorAdjustments = (hairColor: string, baseColors: any) => {\n    const adjustments = { ...baseColors };\n    \n    switch (hairColor) {\n      case 'blonde':\n        // Blonde hair looks great with soft, muted colors\n        if (undertone === 'warm') {\n          adjustments.accent = ['#f97316', '#fbbf24', '#a3a3a3', '#f59e0b'];\n          adjustments.primary = ['#dc2626', '#ea580c', '#ca8a04', '#92400e'];\n        } else if (undertone === 'cool') {\n          adjustments.accent = ['#3b82f6', '#8b5cf6', '#ec4899', '#06b6d4'];\n          adjustments.primary = ['#1e40af', '#7c3aed', '#0ea5e9', '#1e3a8a'];\n        }\n        break;\n        \n      case 'red':\n        // Red hair pairs beautifully with greens, earth tones, avoid competing reds\n        adjustments.accent = ['#059669', '#0d9488', '#0891b2', '#7c2d92'];\n        adjustments.earth = ['#78716c', '#92400e', '#a16207', '#525252'];\n        // Remove competing reds from primary\n        adjustments.primary = adjustments.primary.filter((color: string) => \n          !color.includes('dc2626') && !color.includes('ef4444')\n        );\n        break;\n        \n      case 'black':\n        // Black hair can handle bold, dramatic colors\n        adjustments.accent = ['#dc2626', '#7c3aed', '#059669', '#f97316'];\n        adjustments.primary = [...adjustments.primary, '#1a1a1a', '#0f172a'];\n        break;\n        \n      case 'brown':\n        // Brown hair is versatile, enhance earth tones\n        adjustments.earth = ['#92400e', '#a16207', '#78716c', '#a8a29e'];\n        break;\n        \n      case 'gray':\n      case 'white':\n        // Silver/white hair looks stunning with jewel tones and soft colors\n        adjustments.accent = ['#7c3aed', '#0ea5e9', '#ec4899', '#059669'];\n        adjustments.metallic = ['#6366f1', '#8b5cf6', '#06b6d4', '#a855f7'];\n        break;\n    }\n    \n    return adjustments;\n  };\n\n  // Skin tone intensity adjustments\n  const getSkinToneAdjustments = (skinTone: string, colors: any) => {\n    const adjustments = { ...colors };\n    \n    switch (skinTone) {\n      case 'fair':\n        // Fair skin looks great with soft, medium-intensity colors\n        adjustments.primary = adjustments.primary.map((color: string) => \n          color.replace(/1e|0f|7f|45/g, '3b').replace(/81|92|a1/g, '94')\n        );\n        break;\n        \n      case 'deep':\n        // Deep skin tones can handle bold, vibrant colors\n        adjustments.accent = ['#ef4444', '#f97316', '#eab308', '#22c55e'];\n        adjustments.primary = [...adjustments.primary, '#1a1a1a', '#0f172a'];\n        break;\n        \n      case 'medium':\n      case 'tan':\n        // Medium skin tones look great with rich, warm colors\n        if (undertone === 'warm') {\n          adjustments.earth = ['#92400e', '#a16207', '#ca8a04', '#78716c'];\n        }\n        break;\n    }\n    \n    return adjustments;\n  };\n\n  // Helper function to randomly select unique colors from array\n  const selectRandomColors = (colorArray: string[], count: number, variationIndex: number): string[] => {\n    // First, ensure we have unique colors only\n    const uniqueColors = Array.from(new Set(colorArray));\n    \n    // If we don't have enough unique colors, pad with variations\n    while (uniqueColors.length < count && uniqueColors.length > 0) {\n      const baseColor = uniqueColors[uniqueColors.length % uniqueColors.length];\n      // Create a slight variation by adjusting brightness\n      const variation = adjustColorBrightness(baseColor, 0.1 * uniqueColors.length);\n      if (!uniqueColors.includes(variation)) {\n        uniqueColors.push(variation);\n      }\n    }\n    \n    // Shuffle using variationIndex for consistent but different results\n    const shuffled = [...uniqueColors];\n    const seed = variationIndex;\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = Math.floor(((seed * (i + 1)) % 997) / 997 * (i + 1));\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    return shuffled.slice(0, count);\n  };\n\n  // Helper function to adjust color brightness\n  const adjustColorBrightness = (hex: string, factor: number): string => {\n    const num = parseInt(hex.replace(\"#\", \"\"), 16);\n    const amt = Math.round(2.55 * factor * 100);\n    const R = (num >> 16) + amt;\n    const G = (num >> 8 & 0x00FF) + amt;\n    const B = (num & 0x0000FF) + amt;\n    return \"#\" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +\n      (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +\n      (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);\n  };\n\n  const timeOfDay = isDayTime ? 'day' : 'evening';\n  let baseColors = colorPalettes[undertone as keyof typeof colorPalettes]?.[timeOfDay] || \n                   colorPalettes.neutral[timeOfDay];\n  \n  // Apply hair color adjustments\n  baseColors = getHairColorAdjustments(hairColor, baseColors);\n  \n  // Apply skin tone adjustments  \n  baseColors = getSkinToneAdjustments(skinTone, baseColors);\n  \n  // Return organized palette with random selection based on variation\n  return {\n    primary: selectRandomColors(baseColors.primary, 4, variationIndex),\n    neutral: selectRandomColors(baseColors.neutral, 4, variationIndex + 1), \n    accent: selectRandomColors(baseColors.accent, 4, variationIndex + 2)\n  };\n};\n\nexport default function ClothingPalettePage() {\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [analyzedData, setAnalyzedData] = useState<{\n    skinTone: string;\n    undertone: string;\n    dominantColors: string[];\n  } | null>(null);\n  const [selectedHairColor, setSelectedHairColor] = useState<string>('brown');\n  const [isDayTime, setIsDayTime] = useState<boolean>(true);\n  const [isAnalyzing, setIsAnalyzing] = useState<boolean>(false);\n  const [recommendations, setRecommendations] = useState<any>(null);\n  const [variationCount, setVariationCount] = useState<number>(0);\n  const [isGenerating, setIsGenerating] = useState<boolean>(false);\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleImageUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Create image preview\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const imageData = e.target?.result as string;\n      setSelectedImage(imageData);\n      \n      // Analyze the image\n      setIsAnalyzing(true);\n      try {\n        const analysis = await analyzeImageForSkinTone(imageData);\n        setAnalyzedData(analysis);\n        setVariationCount(0); // Reset variation count for new image\n        generateRecommendations(analysis.skinTone, analysis.undertone, selectedHairColor, isDayTime, 0);\n      } catch (error) {\n        console.error('Error analyzing image:', error);\n      } finally {\n        setIsAnalyzing(false);\n      }\n    };\n    reader.readAsDataURL(file);\n  }, [selectedHairColor, isDayTime]);\n\n  // Update recommendations when settings change\n  React.useEffect(() => {\n    if (analyzedData) {\n      setVariationCount(0); // Reset variation when settings change\n      generateRecommendations(analyzedData.skinTone, analyzedData.undertone, selectedHairColor, isDayTime, 0);\n    }\n  }, [selectedHairColor, isDayTime, analyzedData]);\n\n  const generateRecommendations = (skinTone: string, undertone: string, hairColor: string, dayTime: boolean, variation: number = 0) => {\n    const recs = getClothingRecommendations(skinTone, undertone, hairColor, dayTime, variation);\n    setRecommendations(recs);\n  };\n\n  const handleGenerateRecommendations = async () => {\n    if (analyzedData) {\n      setIsGenerating(true);\n      \n      // Add a small delay for better UX feedback\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const newVariation = variationCount + 1;\n      setVariationCount(newVariation);\n      generateRecommendations(analyzedData.skinTone, analyzedData.undertone, selectedHairColor, isDayTime, newVariation);\n      \n      setIsGenerating(false);\n    }\n  };\n\n  const copyColorToClipboard = (color: string) => {\n    navigator.clipboard.writeText(color);\n  };\n\n  const ColorPalette = ({ colors, title }: { colors: string[], title: string }) => (\n    <div className=\"mb-6 bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n      <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">{title}</h3>\n      <div className=\"grid grid-cols-4 gap-3\">\n        {colors.map((color, index) => (\n          <div key={index} className=\"group relative\">\n            <div \n              className=\"w-full h-16 rounded-lg cursor-pointer transition-all duration-200 hover:scale-105 shadow-md\"\n              style={{ backgroundColor: color }}\n              onClick={() => copyColorToClipboard(color)}\n              title={`Click to copy ${color}`}\n            />\n            <p className=\"text-xs text-center mt-1 font-mono text-gray-600 group-hover:text-gray-900 transition-colors\">\n              {color}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50\">\n      <Helmet>\n        <title>Clothing Color Palette Creator - Personalized Style Recommendations</title>\n        <meta name=\"description\" content=\"Get personalized clothing color recommendations based on your skin tone, hair color, and occasion. Upload your photo for AI-powered style analysis.\" />\n        <meta name=\"keywords\" content=\"clothing colors, personal style, skin tone analysis, fashion colors, color matching\" />\n      </Helmet>\n\n      <Header \n        mobileMenuOpen={false}\n        toggleMobileMenu={() => {}}\n      />\n\n      {/* Back to Home Navigation */}\n      <div className=\"border-b border-gray-200 bg-white\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-purple-600 hover:text-purple-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              <span className=\"bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent\">\n                Clothing Color Palette Creator\n              </span>\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Discover your perfect clothing colors based on your unique skin tone, hair color, and lifestyle\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Left Panel - Input Section */}\n            <div className=\"space-y-6\">\n              {/* Image Upload */}\n              <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2\">\n                  <Camera className=\"w-5 h-5\" />\n                  Upload Your Photo\n                </h3>\n                <p className=\"text-gray-600 text-sm mb-4\">\n                  Upload a clear photo of your face for skin tone analysis\n                </p>\n                <div className=\"space-y-4\">\n                  {selectedImage ? (\n                    <div className=\"relative\">\n                      <img \n                        src={selectedImage} \n                        alt=\"Uploaded face\" \n                        className=\"w-full max-w-md mx-auto rounded-lg shadow-md\"\n                      />\n                      <button\n                        className=\"absolute top-2 right-2 px-3 py-1 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 shadow-sm transition-colors\"\n                        onClick={() => {\n                          setSelectedImage(null);\n                          setAnalyzedData(null);\n                          setRecommendations(null);\n                        }}\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <div \n                      className=\"border-2 border-dashed border-gray-300 rounded-lg p-12 text-center cursor-pointer hover:border-purple-400 transition-colors\"\n                      onClick={() => fileInputRef.current?.click()}\n                    >\n                      <Upload className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                      <p className=\"text-gray-600\">Click to upload your photo</p>\n                      <p className=\"text-sm text-gray-400 mt-2\">JPG, PNG up to 10MB</p>\n                    </div>\n                  )}\n                  \n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                    className=\"hidden\"\n                  />\n                  \n                  {isAnalyzing && (\n                    <div className=\"flex items-center justify-center gap-2 text-purple-600\">\n                      <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                      Analyzing skin tone...\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Hair Color Selection */}\n              <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2\">\n                  <Palette className=\"w-5 h-5\" />\n                  Hair Color\n                </h3>\n                <p className=\"text-gray-600 text-sm mb-4\">\n                  Select your hair color for better recommendations\n                </p>\n                  <div className=\"grid grid-cols-3 sm:grid-cols-4 gap-3\">\n                    {hairColorOptions.map((option) => (\n                      <button\n                        key={option.value}\n                        className={`p-3 rounded-lg border-2 transition-all ${\n                          selectedHairColor === option.value \n                            ? 'border-purple-500 bg-purple-50' \n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}\n                        onClick={() => setSelectedHairColor(option.value)}\n                      >\n                        <div \n                          className=\"w-8 h-8 rounded-full mx-auto mb-2 border border-gray-300\"\n                          style={{ backgroundColor: option.color }}\n                        />\n                        <p className=\"text-xs font-medium\">{option.label}</p>\n                      </button>\n                    ))}\n                  </div>\n              </div>\n\n              {/* Day/Night Toggle */}\n              <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2 flex items-center gap-2\">\n                  {isDayTime ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n                  Occasion Setting\n                </h3>\n                <p className=\"text-gray-600 text-sm mb-4\">\n                  Choose between day and night color recommendations\n                </p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <Sun className=\"w-5 h-5 text-yellow-500\" />\n                    <label htmlFor=\"time-toggle\" className=\"font-medium\">Day</label>\n                  </div>\n                  <button\n                    id=\"time-toggle\"\n                    className={`relative w-12 h-6 rounded-full transition-colors ${\n                      isDayTime ? 'bg-gray-300' : 'bg-blue-600'\n                    }`}\n                    onClick={() => setIsDayTime(!isDayTime)}\n                  >\n                    <div\n                      className={`absolute w-5 h-5 bg-white rounded-full top-0.5 transition-transform ${\n                        isDayTime ? 'left-0.5' : 'left-6'\n                      }`}\n                    />\n                  </button>\n                  <div className=\"flex items-center gap-3\">\n                    <label htmlFor=\"time-toggle\" className=\"font-medium\">Night</label>\n                    <Moon className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Analysis Results */}\n              {analyzedData && (\n                <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2\">\n                    <Eye className=\"w-5 h-5\" />\n                    Analysis Results\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Skin Tone:</span>\n                      <span className=\"px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm font-medium capitalize\">\n                        {analyzedData.skinTone}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Undertone:</span>\n                      <span className=\"px-3 py-1 border border-gray-300 text-gray-700 rounded-full text-sm font-medium capitalize\">\n                        {analyzedData.undertone}\n                      </span>\n                    </div>\n                    \n                    <button\n                      onClick={handleGenerateRecommendations}\n                      disabled={isGenerating}\n                      className={`w-full px-4 py-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center gap-2 transform ${\n                        isGenerating\n                          ? 'bg-gray-400 cursor-not-allowed'\n                          : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white hover:scale-105 active:scale-95 shadow-lg hover:shadow-xl'\n                      }`}\n                    >\n                      {isGenerating ? (\n                        <>\n                          <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                          Generating...\n                        </>\n                      ) : (\n                        <>\n                          <Sparkles className=\"w-4 h-4\" />\n                          Generate New Recommendations\n                        </>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Right Panel - Recommendations */}\n            <div>\n              {recommendations ? (\n                <div className=\"space-y-6\">\n                  <div className=\"text-center mb-6\">\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                      Your Personalized Color Palette\n                    </h2>\n                    <p className=\"text-gray-600\">\n                      {isDayTime ? 'Daytime' : 'Evening'} colors that complement your features\n                    </p>\n                  </div>\n\n                  <ColorPalette colors={recommendations.primary} title=\"Primary Colors\" />\n                  <ColorPalette colors={recommendations.neutral} title=\"Neutral Colors\" />\n                  <ColorPalette colors={recommendations.accent} title=\"Accent Colors\" />\n\n                  {/* Style Tips */}\n                  <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n                    <h3 className=\"text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2\">\n                      <Sparkles className=\"w-5 h-5\" />\n                      Style Tips\n                    </h3>\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold\">How to Use These Colors:</h4>\n                        <ul className=\"text-sm space-y-1 text-gray-600\">\n                          <li>• Use <strong>Primary colors</strong> for main clothing pieces</li>\n                          <li>• Use <strong>Neutral colors</strong> as your base wardrobe</li>\n                          <li>• Use <strong>Accent colors</strong> for accessories and details</li>\n                        </ul>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-semibold\">Best Combinations:</h4>\n                        <p className=\"text-sm text-gray-600\">\n                          Try pairing neutral bases with primary pieces and accent accessories\n                          for a balanced, harmonious look.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"bg-white rounded-xl shadow-lg p-12 border border-gray-100 h-96 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <User className=\"w-16 h-16 mx-auto text-gray-300 mb-4\" />\n                    <h3 className=\"text-lg font-semibold text-gray-500 mb-2\">\n                      Upload Your Photo to Get Started\n                    </h3>\n                    <p className=\"text-gray-400\">\n                      Upload a clear photo of your face to receive personalized clothing color recommendations\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer className=\"mt-16\" />\n    </div>\n  );\n}","size_bytes":30450},"client/src/pages/LandingPage.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Helmet } from \"react-helmet-async\";\nimport { ArrowRight, Palette, Smartphone, Monitor, Chrome, Download, Star, Users } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\nexport default function LandingPage() {\n  const handleGetStarted = () => {\n    window.location.href = '/generator';\n  };\n\n  const handleExplorePalettes = () => {\n    window.location.href = '/';\n  };\n\n  // Animated Color Palette Showcase Component\n  const AnimatedPaletteShowcase = () => {\n    const [currentSet, setCurrentSet] = useState(0);\n    \n    const paletteSets = [\n      [\n        ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57'],\n        ['#6C5CE7', '#A29BFE', '#FD79A8', '#E17055', '#00B894'],\n        ['#2D3436', '#636E72', '#DDD', '#74B9FF', '#00CEC9'],\n        ['#FF7675', '#FD79A8', '#FDCB6E', '#6C5CE7', '#74B9FF']\n      ],\n      [\n        ['#1ABC9C', '#2ECC71', '#3498DB', '#9B59B6', '#E74C3C'],\n        ['#F39C12', '#E67E22', '#D35400', '#C0392B', '#8E44AD'],\n        ['#2C3E50', '#34495E', '#7F8C8D', '#95A5A6', '#BDC3C7'],\n        ['#E8F5E8', '#FFF3CD', '#D1ECF1', '#F8D7DA', '#E2E3E5']\n      ],\n      [\n        ['#FF9FF3', '#F368E0', '#FF6B6B', '#4ECDC4', '#45B7D1'],\n        ['#A8E6CF', '#FFD93D', '#6BCF7F', '#4D96FF', '#9B59B6'],\n        ['#FFA07A', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9'],\n        ['#F8BBD9', '#E8F5E8', '#FFF8DC', '#E6E6FA', '#F0F8FF']\n      ]\n    ];\n    \n    useEffect(() => {\n      const interval = setInterval(() => {\n        setCurrentSet((prev) => (prev + 1) % paletteSets.length);\n      }, 3000);\n      \n      return () => clearInterval(interval);\n    }, []);\n    \n    return (\n      <div className=\"relative bg-white rounded-2xl shadow-xl p-8 border border-gray-100 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-50 to-indigo-50 opacity-50\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Endless Palette Possibilities</h3>\n            <p className=\"text-gray-600\">Discover thousands of beautiful color combinations</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            {paletteSets[currentSet].map((palette, paletteIndex) => (\n              <div \n                key={`${currentSet}-${paletteIndex}`}\n                className=\"bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-500 transform hover:scale-105 animate-fade-in\"\n                style={{\n                  animationDelay: `${paletteIndex * 0.1}s`\n                }}\n              >\n                <div className=\"flex h-20\">\n                  {palette.map((color, colorIndex) => (\n                    <div\n                      key={colorIndex}\n                      className=\"flex-1 transition-all duration-300 hover:scale-110 relative group\"\n                      style={{ backgroundColor: color }}\n                    >\n                      <div className=\"absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center\">\n                        <span className=\"text-white text-xs font-mono opacity-0 group-hover:opacity-100 transition-all duration-300\">\n                          {color}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"p-2 text-center\">\n                  <div className=\"flex justify-center space-x-1\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"w-1 h-1 bg-gray-300 rounded-full\"></div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"flex justify-center mt-6 space-x-2\">\n            {paletteSets.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentSet(index)}\n                className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                  index === currentSet \n                    ? 'bg-blue-600 scale-125' \n                    : 'bg-gray-300 hover:bg-gray-400'\n                }`}\n              />\n            ))}\n          </div>\n          \n          <div className=\"text-center mt-6\">\n            <button\n              onClick={() => window.location.href = '/generator'}\n              className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n            >\n              Start Creating Palettes\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50\">\n      <Helmet>\n        <title>Coolors.in - The Super Fast Color Palette Generator!</title>\n        <meta name=\"description\" content=\"Create the perfect palette or get inspired by thousands of beautiful color schemes. The super fast color palette generator for designers and developers.\" />\n        <meta name=\"keywords\" content=\"color palette generator, color schemes, design tools, color combinations, web design, ui design\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/\" />\n        \n        {/* Open Graph */}\n        <meta property=\"og:title\" content=\"Coolors.in - The Super Fast Color Palette Generator!\" />\n        <meta property=\"og:description\" content=\"Create the perfect palette or get inspired by thousands of beautiful color schemes.\" />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://coolors.in/\" />\n        <meta property=\"og:image\" content=\"https://coolors.in/og-image.jpg\" />\n        \n        {/* Schema.org JSON-LD */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"WebApplication\",\n            \"name\": \"Coolors.in Color Palette Generator\",\n            \"url\": \"https://coolors.in/\",\n            \"description\": \"Create the perfect palette or get inspired by thousands of beautiful color schemes\",\n            \"applicationCategory\": \"DesignApplication\",\n            \"operatingSystem\": \"Any\",\n            \"offers\": {\n              \"@type\": \"Offer\",\n              \"price\": \"0\",\n              \"priceCurrency\": \"USD\"\n            },\n            \"author\": {\n              \"@type\": \"Person\",\n              \"name\": \"Yash\"\n            }\n          })}\n        </script>\n      </Helmet>\n\n      {/* Header */}\n      <Header \n        mobileMenuOpen={false}\n        toggleMobileMenu={() => {}}\n      />\n\n      {/* Hero Section */}\n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center max-w-4xl mx-auto mb-20\">\n          <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold text-gray-900 mb-8 leading-tight\">\n            The super fast color\n            <br />\n            <span className=\"bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n              palette generator!\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed\">\n            Create the perfect palette or get inspired by thousands of beautiful color schemes.\n          </p>\n          \n          {/* CTA Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-8\">\n            <button\n              onClick={handleGetStarted}\n              className=\"group bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-8 py-4 rounded-xl font-semibold text-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 flex items-center\"\n            >\n              Start the generator!\n              <ArrowRight className=\"ml-2 group-hover:translate-x-1 transition-transform duration-300\" size={20} />\n            </button>\n            \n            <button\n              onClick={handleExplorePalettes}\n              className=\"bg-white text-gray-700 px-8 py-4 rounded-xl font-semibold text-lg border-2 border-gray-200 hover:border-blue-300 hover:text-blue-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1\"\n            >\n              Explore trending palettes\n            </button>\n          </div>\n          \n        </div>\n\n        {/* Animated Palette Showcase */}\n        <section className=\"mb-20\">\n          <style>\n            {`\n              @keyframes fade-in {\n                from {\n                  opacity: 0;\n                  transform: translateY(20px);\n                }\n                to {\n                  opacity: 1;\n                  transform: translateY(0);\n                }\n              }\n              .animate-fade-in {\n                animation: fade-in 0.8s ease-in-out both;\n              }\n            `}\n          </style>\n          <AnimatedPaletteShowcase />\n        </section>\n\n        {/* Apps & Tools Showcase */}\n        <section className=\"mb-20\">\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Color Palette Generator */}\n            <div className=\"bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center mb-4\">\n                <Palette className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-2\">Palette Generator</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                Create beautiful color palettes with advanced algorithms and color theory.\n              </p>\n              <button \n                onClick={() => window.location.href = '/'}\n                className=\"text-blue-600 font-medium text-sm hover:text-blue-700 transition-colors\"\n              >\n                Start creating →\n              </button>\n            </div>\n\n            {/* Clothing Color Palette */}\n            <div className=\"bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-violet-600 rounded-xl flex items-center justify-center mb-4\">\n                <Smartphone className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-2\">Clothing Colors</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                Get personalized clothing color recommendations based on your skin tone.\n              </p>\n              <button \n                onClick={() => window.location.href = '/clothing-palette'}\n                className=\"text-purple-600 font-medium text-sm hover:text-purple-700 transition-colors\"\n              >\n                Try now →\n              </button>\n            </div>\n\n            {/* Visualizer */}\n            <div className=\"bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl flex items-center justify-center mb-4\">\n                <Monitor className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-2\">Visualizer</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                See your color palettes in action with real-time mockups and previews.\n              </p>\n              <button \n                onClick={() => window.location.href = '/visualize'}\n                className=\"text-green-600 font-medium text-sm hover:text-green-700 transition-colors\"\n              >\n                Visualize →\n              </button>\n            </div>\n\n            {/* Image to Palette */}\n            <div className=\"bg-white p-6 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-600 rounded-xl flex items-center justify-center mb-4\">\n                <Download className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-2\">Image to Palette</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                Extract beautiful color palettes from any image you upload.\n              </p>\n              <button \n                onClick={() => window.location.href = '/image-palette'}\n                className=\"text-orange-600 font-medium text-sm hover:text-orange-700 transition-colors\"\n              >\n                Extract colors →\n              </button>\n            </div>\n          </div>\n        </section>\n\n        {/* Social Proof */}\n        <section className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-8\">\n            <Users className=\"w-6 h-6 text-gray-600 mr-2\" />\n            <p className=\"text-gray-600 font-medium\">\n              Used by thousands of designers and developers worldwide\n            </p>\n          </div>\n        </section>\n\n        {/* Features Grid */}\n        <section className=\"grid md:grid-cols-3 gap-8 mb-20\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-blue-100 to-indigo-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Palette className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Smart Generation</h3>\n            <p className=\"text-gray-600\">\n              Our advanced algorithms create harmonious color combinations that work perfectly together.\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-emerald-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Monitor className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Live Preview</h3>\n            <p className=\"text-gray-600\">\n              See your colors in action with our real-time visualization tools and UI mockups.\n            </p>\n          </div>\n          \n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-purple-100 to-violet-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n              <Download className=\"w-8 h-8 text-purple-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Easy Export</h3>\n            <p className=\"text-gray-600\">\n              Export your palettes in any format you need for your design workflow.\n            </p>\n          </div>\n        </section>\n\n        {/* Final CTA */}\n        <section className=\"text-center bg-gradient-to-r from-blue-600 to-indigo-600 rounded-3xl p-12 text-white\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n            Ready to create amazing palettes?\n          </h2>\n          <p className=\"text-xl mb-8 text-blue-100\">\n            Join thousands of designers who trust Coolors.in for their color needs.\n          </p>\n          <button\n            onClick={handleGetStarted}\n            className=\"bg-white text-blue-600 px-8 py-4 rounded-xl font-bold text-lg hover:bg-gray-100 transition-colors duration-300 shadow-lg\"\n          >\n            Start Creating Now\n          </button>\n        </section>\n      </main>\n\n      <Footer className=\"mt-20\" />\n    </div>\n  );\n}","size_bytes":16086},"client/src/pages/ClothingColorGuide.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Palette, Users, Star, ArrowRight, ChevronLeft } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\nexport default function ClothingColorGuide() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50\">\n      <Helmet>\n        <title>Clothing Color Palette Creator Guide - Find Your Perfect Colors | Coolors.in</title>\n        <meta name=\"description\" content=\"Discover how to use our clothing color palette creator to find the perfect colors for your wardrobe based on your skin tone, undertones, and personal style.\" />\n        <meta name=\"keywords\" content=\"clothing color palette, skin tone colors, wardrobe colors, fashion color theory, personal color analysis, outfit color combinations, clothing color guide\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/clothing-color-guide\" />\n        \n        {/* Open Graph */}\n        <meta property=\"og:title\" content=\"Clothing Color Palette Creator Guide - Find Your Perfect Colors\" />\n        <meta property=\"og:description\" content=\"Learn how to find the perfect clothing colors for your skin tone with our comprehensive guide to personal color analysis.\" />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:url\" content=\"https://coolors.in/clothing-color-guide\" />\n        \n        {/* Schema.org JSON-LD */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Article\",\n            \"headline\": \"Clothing Color Palette Creator Guide - Find Your Perfect Colors\",\n            \"description\": \"Comprehensive guide to using our clothing color palette creator for personal color analysis\",\n            \"author\": {\n              \"@type\": \"Person\",\n              \"name\": \"Yash\"\n            },\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\"\n            },\n            \"mainEntityOfPage\": {\n              \"@type\": \"WebPage\",\n              \"@id\": \"https://coolors.in/clothing-color-guide\"\n            }\n          })}\n        </script>\n      </Helmet>\n\n      <Header \n        mobileMenuOpen={false}\n        toggleMobileMenu={() => {}}\n      />\n\n      {/* Back to Home Navigation */}\n      <div className=\"border-b border-gray-200 bg-white\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-purple-600 hover:text-purple-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center max-w-4xl mx-auto mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight\">\n            Clothing Color Palette Creator\n            <br />\n            <span className=\"bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n              Find Your Perfect Colors\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed\">\n            Discover the clothing colors that make you look and feel your best with our AI-powered personal color analysis tool.\n          </p>\n          \n          <button\n            onClick={() => window.location.href = '/clothing-palette'}\n            className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-4 rounded-xl font-semibold text-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 flex items-center mx-auto\"\n          >\n            Try the Tool Now\n            <ArrowRight className=\"ml-2\" size={20} />\n          </button>\n        </div>\n\n        {/* What is Personal Color Analysis */}\n        <section className=\"mb-16\">\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">What is Personal Color Analysis?</h2>\n            <p className=\"text-gray-600 text-lg mb-6 leading-relaxed\">\n              Personal color analysis is the science of determining which colors complement your natural coloring - your skin tone, undertones, hair color, and eye color. Our clothing color palette creator uses advanced algorithms to analyze your photo and recommend colors that will:\n            </p>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Star className=\"w-5 h-5 text-purple-600 mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Enhance Your Natural Beauty</h3>\n                    <p className=\"text-gray-600\">Make your skin look brighter and more radiant</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Star className=\"w-5 h-5 text-purple-600 mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Create Harmonious Outfits</h3>\n                    <p className=\"text-gray-600\">Build a cohesive wardrobe with colors that work together</p>\n                  </div>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Star className=\"w-5 h-5 text-purple-600 mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Boost Your Confidence</h3>\n                    <p className=\"text-gray-600\">Look and feel your best in every outfit</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <Star className=\"w-5 h-5 text-purple-600 mt-1 flex-shrink-0\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Save Time and Money</h3>\n                    <p className=\"text-gray-600\">Shop smarter with colors you know will work</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* How to Use the Tool */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">How to Use Our Clothing Color Creator</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-purple-600\">1</span>\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Upload Your Photo</h3>\n              <p className=\"text-gray-600\">\n                Upload a clear, well-lit photo of yourself for the most accurate color analysis results.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-purple-600\">2</span>\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Get Your Analysis</h3>\n              <p className=\"text-gray-600\">\n                Our AI analyzes your skin tone, undertones, and features to determine your color profile.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-purple-100 to-pink-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-purple-600\">3</span>\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Discover Your Colors</h3>\n              <p className=\"text-gray-600\">\n                Receive personalized color palettes for primary, neutral, and accent clothing colors.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Color Categories */}\n        <section className=\"mb-16\">\n          <div className=\"bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl p-8 text-white\">\n            <h2 className=\"text-3xl font-bold mb-6 text-center\">Understanding Your Color Palette</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"bg-white/10 rounded-xl p-6 backdrop-blur-sm\">\n                <h3 className=\"text-xl font-bold mb-3\">Primary Colors</h3>\n                <p className=\"text-purple-100\">\n                  Your signature colors that make you shine. Perfect for statement pieces, dresses, and important occasions.\n                </p>\n              </div>\n              <div className=\"bg-white/10 rounded-xl p-6 backdrop-blur-sm\">\n                <h3 className=\"text-xl font-bold mb-3\">Neutral Colors</h3>\n                <p className=\"text-purple-100\">\n                  Your foundation colors for building a versatile wardrobe. Great for basics, workwear, and everyday pieces.\n                </p>\n              </div>\n              <div className=\"bg-white/10 rounded-xl p-6 backdrop-blur-sm\">\n                <h3 className=\"text-xl font-bold mb-3\">Accent Colors</h3>\n                <p className=\"text-purple-100\">\n                  Your pop colors for accessories, shoes, and adding personality to any outfit. Use sparingly for maximum impact.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Tips Section */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Pro Tips for Better Results</h2>\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Photo Guidelines</h3>\n                <ul className=\"space-y-3 text-gray-600\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Use natural lighting or bright indoor lighting\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Face the camera directly with shoulders visible\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Avoid heavy makeup or filters for accurate results\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Remove or minimize colored clothing near your face\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Using Your Results</h3>\n                <ul className=\"space-y-3 text-gray-600\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Start with one color category at a time\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Test colors in different lighting conditions\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Mix and match within your recommended palette\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-purple-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Save your palette colors for shopping reference\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"text-center bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Discover Your Perfect Colors?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Transform your wardrobe with personalized color recommendations.\n          </p>\n          <button\n            onClick={() => window.location.href = '/clothing-palette'}\n            className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:from-purple-700 hover:to-pink-700 transition-colors duration-300 shadow-lg\"\n          >\n            Start Your Color Analysis\n          </button>\n        </section>\n      </main>\n\n      <Footer className=\"mt-20\" />\n    </div>\n  );\n}","size_bytes":13680},"client/src/pages/ImagePaletteGuide.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Camera, Upload, Palette, ArrowRight, ChevronLeft } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\nexport default function ImagePaletteGuide() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 via-white to-red-50\">\n      <Helmet>\n        <title>Image to Color Palette Guide - Extract Colors from Photos | Coolors.in</title>\n        <meta name=\"description\" content=\"Learn how to extract beautiful color palettes from any image using our AI-powered color extraction tool. Perfect for design inspiration and color matching.\" />\n        <meta name=\"keywords\" content=\"image color extractor, photo color palette, color picker from image, extract colors from photo, image color analysis, design inspiration colors, dominant colors from image\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/image-palette-guide\" />\n        \n        {/* Open Graph */}\n        <meta property=\"og:title\" content=\"Image to Color Palette Guide - Extract Colors from Photos\" />\n        <meta property=\"og:description\" content=\"Extract beautiful color palettes from any image with our comprehensive guide to image color analysis.\" />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:url\" content=\"https://coolors.in/image-palette-guide\" />\n        \n        {/* Schema.org JSON-LD */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Article\",\n            \"headline\": \"Image to Color Palette Guide - Extract Colors from Photos\",\n            \"description\": \"Complete guide to extracting color palettes from images for design inspiration\",\n            \"author\": {\n              \"@type\": \"Person\",\n              \"name\": \"Yash\"\n            },\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\"\n            },\n            \"mainEntityOfPage\": {\n              \"@type\": \"WebPage\",\n              \"@id\": \"https://coolors.in/image-palette-guide\"\n            }\n          })}\n        </script>\n      </Helmet>\n\n      <Header \n        mobileMenuOpen={false}\n        toggleMobileMenu={() => {}}\n      />\n\n      {/* Back to Home Navigation */}\n      <div className=\"border-b border-gray-200 bg-white\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-orange-600 hover:text-orange-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center max-w-4xl mx-auto mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight\">\n            Image to Color Palette\n            <br />\n            <span className=\"bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\n              Extract Colors from Photos\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed\">\n            Transform any image into a beautiful color palette with our AI-powered color extraction tool. Perfect for finding design inspiration and color matching.\n          </p>\n          \n          <button\n            onClick={() => window.location.href = '/image-palette'}\n            className=\"bg-gradient-to-r from-orange-600 to-red-600 text-white px-8 py-4 rounded-xl font-semibold text-lg hover:from-orange-700 hover:to-red-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 flex items-center mx-auto\"\n          >\n            Try the Tool Now\n            <ArrowRight className=\"ml-2\" size={20} />\n          </button>\n        </div>\n\n        {/* What is Image Color Extraction */}\n        <section className=\"mb-16\">\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">What is Image Color Extraction?</h2>\n            <p className=\"text-gray-600 text-lg mb-6 leading-relaxed\">\n              Image color extraction is the process of analyzing an image to identify its dominant colors and creating a cohesive color palette. Our AI-powered tool examines millions of pixels to find the most significant colors and creates harmonious palettes that capture the essence of your image.\n            </p>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Perfect for:</h3>\n                <ul className=\"space-y-3 text-gray-600\">\n                  <li className=\"flex items-start gap-2\">\n                    <Camera className=\"w-5 h-5 text-orange-600 mt-1 flex-shrink-0\" />\n                    Design inspiration from photography\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <Palette className=\"w-5 h-5 text-orange-600 mt-1 flex-shrink-0\" />\n                    Brand color development from logos\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <Upload className=\"w-5 h-5 text-orange-600 mt-1 flex-shrink-0\" />\n                    Interior design color matching\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <Camera className=\"w-5 h-5 text-orange-600 mt-1 flex-shrink-0\" />\n                    Art and illustration color analysis\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-4\">Benefits:</h3>\n                <ul className=\"space-y-3 text-gray-600\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Save time on color research and selection\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Ensure color harmony and consistency\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Discover unexpected color combinations\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0\"></span>\n                    Create professional-looking designs\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* How to Use the Tool */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">How to Extract Colors from Images</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Upload className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Upload Your Image</h3>\n              <p className=\"text-gray-600\">\n                Upload any image - photographs, artwork, logos, or design references. Our tool supports all common image formats.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Camera className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">AI Analysis</h3>\n              <p className=\"text-gray-600\">\n                Our advanced AI analyzes the image to identify dominant colors, color relationships, and optimal palette combinations.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Palette className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Get Your Palette</h3>\n              <p className=\"text-gray-600\">\n                Receive a curated color palette with hex codes, ready to use in your design projects and creative work.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Use Cases */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Creative Applications</h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mb-4\">\n                <span className=\"text-white text-xl\">🎨</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Web Design</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Extract colors from inspiration images to create cohesive website color schemes.\n              </p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mb-4\">\n                <span className=\"text-white text-xl\">🏠</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Interior Design</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Match paint colors to furniture, artwork, or fabric patterns in your photos.\n              </p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mb-4\">\n                <span className=\"text-white text-xl\">📱</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">App Design</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Create app themes and UI color schemes from brand imagery or concept art.\n              </p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-lg p-6 border border-gray-100\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center mb-4\">\n                <span className=\"text-white text-xl\">🎭</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Art & Fashion</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Analyze artwork or fashion photos to understand color relationships and trends.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Tips for Better Results */}\n        <section className=\"mb-16\">\n          <div className=\"bg-gradient-to-r from-orange-600 to-red-600 rounded-2xl p-8 text-white\">\n            <h2 className=\"text-3xl font-bold mb-6 text-center\">Tips for Better Color Extraction</h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-bold mb-4\">Image Selection</h3>\n                <ul className=\"space-y-3 text-orange-100\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Use high-quality, well-lit images for accurate results\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Choose images with clear, distinct colors\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Avoid overly dark or washed-out photos\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Consider the mood and style you want to achieve\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold mb-4\">Working with Results</h3>\n                <ul className=\"space-y-3 text-orange-100\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Test extracted colors in your actual design context\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Adjust brightness and saturation if needed\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Combine colors from multiple images for variety\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Save palettes that work well for future reference\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Technical Features */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Advanced Features</h2>\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">🎯</span>\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">Smart Color Detection</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Advanced algorithms identify the most visually significant colors while filtering out noise and artifacts.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">⚖️</span>\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">Color Harmony</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Our tool ensures extracted colors work well together by analyzing color relationships and balance.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-orange-100 to-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl\">📊</span>\n                </div>\n                <h3 className=\"font-bold text-gray-900 mb-2\">Multiple Formats</h3>\n                <p className=\"text-gray-600 text-sm\">\n                  Export your extracted palettes in HEX, RGB, HSL, and other formats for any design workflow.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"text-center bg-gradient-to-r from-orange-50 to-red-50 rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Extract Colors from Your Images?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Turn any image into a beautiful, professional color palette in seconds.\n          </p>\n          <button\n            onClick={() => window.location.href = '/image-palette'}\n            className=\"bg-gradient-to-r from-orange-600 to-red-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:from-orange-700 hover:to-red-700 transition-colors duration-300 shadow-lg\"\n          >\n            Start Extracting Colors\n          </button>\n        </section>\n      </main>\n\n      <Footer className=\"mt-20\" />\n    </div>\n  );\n}","size_bytes":17375},"client/src/pages/VisualizerGuide.tsx":{"content":"import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Monitor, Eye, Layers, ArrowRight, ChevronLeft } from \"lucide-react\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\nexport default function VisualizerGuide() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 via-white to-blue-50\">\n      <Helmet>\n        <title>Color Palette Visualizer Guide - See Your Colors in Action | Coolors.in</title>\n        <meta name=\"description\" content=\"Learn how to use our color palette visualizer to preview your color schemes in real-world applications, websites, and design mockups before implementation.\" />\n        <meta name=\"keywords\" content=\"color palette visualizer, color scheme preview, design mockups, website color preview, UI color testing, color combination visualizer, design visualization tool\" />\n        <link rel=\"canonical\" href=\"https://coolors.in/visualizer-guide\" />\n        \n        {/* Open Graph */}\n        <meta property=\"og:title\" content=\"Color Palette Visualizer Guide - See Your Colors in Action\" />\n        <meta property=\"og:description\" content=\"Preview your color palettes in real-world applications with our comprehensive visualization tool guide.\" />\n        <meta property=\"og:type\" content=\"article\" />\n        <meta property=\"og:url\" content=\"https://coolors.in/visualizer-guide\" />\n        \n        {/* Schema.org JSON-LD */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify({\n            \"@context\": \"https://schema.org\",\n            \"@type\": \"Article\",\n            \"headline\": \"Color Palette Visualizer Guide - See Your Colors in Action\",\n            \"description\": \"Complete guide to using our color palette visualizer for design preview and testing\",\n            \"author\": {\n              \"@type\": \"Person\",\n              \"name\": \"Yash\"\n            },\n            \"publisher\": {\n              \"@type\": \"Organization\",\n              \"name\": \"Coolors.in\"\n            },\n            \"mainEntityOfPage\": {\n              \"@type\": \"WebPage\",\n              \"@id\": \"https://coolors.in/visualizer-guide\"\n            }\n          })}\n        </script>\n      </Helmet>\n\n      <Header \n        mobileMenuOpen={false}\n        toggleMobileMenu={() => {}}\n      />\n\n      {/* Back to Home Navigation */}\n      <div className=\"border-b border-gray-200 bg-white\">\n        <div className=\"container mx-auto px-4 py-3\">\n          <div \n            className=\"flex items-center text-green-600 hover:text-green-800 transition-colors cursor-pointer\"\n            onClick={() => window.location.href = '/'}\n          >\n            <ChevronLeft className=\"mr-1 h-4 w-4\" />\n            <span>Back to Home</span>\n          </div>\n        </div>\n      </div>\n\n      <main className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center max-w-4xl mx-auto mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-6 leading-tight\">\n            Color Palette Visualizer\n            <br />\n            <span className=\"bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n              See Your Colors in Action\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed\">\n            Preview your color palettes in real-world applications and design mockups before committing to your final color scheme.\n          </p>\n          \n          <button\n            onClick={() => window.location.href = '/visualize'}\n            className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white px-8 py-4 rounded-xl font-semibold text-lg hover:from-green-700 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 flex items-center mx-auto\"\n          >\n            Try the Visualizer\n            <ArrowRight className=\"ml-2\" size={20} />\n          </button>\n        </div>\n\n        {/* Why Use Color Visualization */}\n        <section className=\"mb-16\">\n          <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-6\">Why Visualize Your Color Palettes?</h2>\n            <p className=\"text-gray-600 text-lg mb-6 leading-relaxed\">\n              Color visualization is crucial for making informed design decisions. Our visualizer helps you understand how your color choices will look in real applications, preventing costly mistakes and ensuring your designs achieve the desired impact.\n            </p>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 bg-gradient-to-br from-green-50 to-blue-50 rounded-xl\">\n                <Eye className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Test Before Implementation</h3>\n                <p className=\"text-gray-600 text-sm\">See how colors work together before applying them to your actual project</p>\n              </div>\n              <div className=\"text-center p-6 bg-gradient-to-br from-green-50 to-blue-50 rounded-xl\">\n                <Monitor className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Multiple Contexts</h3>\n                <p className=\"text-gray-600 text-sm\">Preview your palette in websites, apps, and various design layouts</p>\n              </div>\n              <div className=\"text-center p-6 bg-gradient-to-br from-green-50 to-blue-50 rounded-xl\">\n                <Layers className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Instant Feedback</h3>\n                <p className=\"text-gray-600 text-sm\">Get immediate visual feedback and make adjustments in real-time</p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* How to Use the Visualizer */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">How to Use the Color Visualizer</h2>\n          <div className=\"grid md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-green-600\">1</span>\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-3\">Create Your Palette</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Start with a color palette from our generator or create your own custom palette.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-green-600\">2</span>\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-3\">Choose a Template</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Select from website layouts, mobile apps, or design mockups to preview your colors.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-green-600\">3</span>\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-3\">Apply Colors</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Our tool automatically applies your palette to different elements in the chosen template.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl font-bold text-green-600\">4</span>\n              </div>\n              <h3 className=\"text-lg font-bold text-gray-900 mb-3\">Evaluate & Refine</h3>\n              <p className=\"text-gray-600 text-sm\">\n                Assess the results and make adjustments to perfect your color scheme.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Use Cases */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Perfect for Every Project</h2>\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Web Design Projects</h3>\n              <ul className=\"space-y-3 text-gray-600\">\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-green-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Website headers and navigation elements\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-green-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Button and call-to-action color schemes\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-green-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Background and content area combinations\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-green-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Typography and text color hierarchy\n                </li>\n              </ul>\n            </div>\n            \n            <div className=\"bg-white rounded-2xl shadow-lg p-8 border border-gray-100\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-4\">Brand & Marketing</h3>\n              <ul className=\"space-y-3 text-gray-600\">\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Logo and brand identity colors\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Marketing material color schemes\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Social media template designs\n                </li>\n                <li className=\"flex items-start gap-3\">\n                  <span className=\"w-2 h-2 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></span>\n                  Presentation and infographic colors\n                </li>\n              </ul>\n            </div>\n          </div>\n        </section>\n\n        {/* Best Practices */}\n        <section className=\"mb-16\">\n          <div className=\"bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl p-8 text-white\">\n            <h2 className=\"text-3xl font-bold mb-6 text-center\">Visualization Best Practices</h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"text-xl font-bold mb-4\">Color Testing Tips</h3>\n                <ul className=\"space-y-3 text-green-100\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Test your palette in different lighting conditions\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Check contrast ratios for accessibility compliance\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    View your design on different screen sizes\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Consider how colors work in dark/light themes\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold mb-4\">Design Evaluation</h3>\n                <ul className=\"space-y-3 text-green-100\">\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Ensure proper visual hierarchy with your colors\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Check if important elements stand out clearly\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Verify brand consistency across all elements\n                  </li>\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"w-2 h-2 bg-white rounded-full mt-2 flex-shrink-0\"></span>\n                    Test user experience with your color choices\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Benefits Section */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8 text-center\">Why Designers Love Our Visualizer</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center border border-gray-100\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">⚡</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Save Time</h3>\n              <p className=\"text-gray-600 text-sm\">Instantly preview designs without manual mockup creation</p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center border border-gray-100\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">🎯</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Make Better Decisions</h3>\n              <p className=\"text-gray-600 text-sm\">Visual feedback helps you choose the perfect color combinations</p>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-lg p-6 text-center border border-gray-100\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-100 to-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-2xl\">💡</span>\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Reduce Revisions</h3>\n              <p className=\"text-gray-600 text-sm\">Catch potential issues early in the design process</p>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"text-center bg-gradient-to-r from-green-50 to-blue-50 rounded-2xl p-12\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n            Ready to Visualize Your Colors?\n          </h2>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            See your color palettes come to life in real design contexts.\n          </p>\n          <button\n            onClick={() => window.location.href = '/visualize'}\n            className=\"bg-gradient-to-r from-green-600 to-blue-600 text-white px-8 py-4 rounded-xl font-bold text-lg hover:from-green-700 hover:to-blue-700 transition-colors duration-300 shadow-lg\"\n          >\n            Start Visualizing Now\n          </button>\n        </section>\n      </main>\n\n      <Footer className=\"mt-20\" />\n    </div>\n  );\n}","size_bytes":16622}},"version":1}